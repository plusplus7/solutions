{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/alipay-donate.png","path":"img/alipay-donate.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/weixin-donate.png","path":"img/weixin-donate.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1527086731452},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1527086731481},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1527086731512},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1527086731541},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1527086737318},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1527086737346},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1527086738802},{"_id":"themes/yilia/_config.yml","hash":"e3644e9082c737ed7e043ff60a8a16a40c2cc493","modified":1548321732687},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1527086738772},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1527086741184},{"_id":"source/_posts/2014年，梦想还是要有的。万一实现了呢....md","hash":"9108c1a475570fdddcd37ba363c0cef6a48c4fef","modified":1527086726714},{"_id":"source/_posts/2014百度杯 BCTF 游记.md","hash":"199e4d19559580e665bac74f3aede568af611dd8","modified":1527086726745},{"_id":"source/_posts/2015年，初来乍到，请多指教.md","hash":"27d7ca93ddcd888aada88b2c3caafd77907fadd9","modified":1527086726775},{"_id":"source/_posts/Adrian_von_Ziegler.md","hash":"3324825dc3dfd352afb751de919d2964c0ac88a1","modified":1547485762709},{"_id":"source/_posts/Codeforces Round 332 (Div. 2)解题报告.md","hash":"9e302be937c5a7e20b2604acba88a72cb91f77a1","modified":1527086726833},{"_id":"source/_posts/Codeforces Round 378 (Div. 2)解题报告.md","hash":"4d44dd37c17aca42535949cd8a809c3baa74c1cf","modified":1527086726863},{"_id":"source/_posts/ICO.md","hash":"b4ec7ded3127d72d01537d2c6624ef1678cd0a91","modified":1547485762710},{"_id":"source/_posts/Leetcode解题报告合集.md","hash":"c17b2af31e5fc44dcd94a7d31991cb1a1b7109c8","modified":1527086726955},{"_id":"source/_posts/Secret解题报告.md","hash":"a4156562ccbe740035c7bebe90bb82865a33faca","modified":1527086726986},{"_id":"source/_posts/Undertale.md","hash":"4f71b18fe102e937d91bad205161b241b9f668d9","modified":1547485762712},{"_id":"source/_posts/k-近邻分类——机器学习笔记（四）.md","hash":"a234e64eec9b9b02115299eef26c232db032c895","modified":1527086726924},{"_id":"source/_posts/volatile关键字.md","hash":"554be9bbaf53550452fc96ce39bc520468857094","modified":1527086727048},{"_id":"source/_posts/【总结】2013年，再见 ACM:ICPC.md","hash":"5f3329d033155e4d4fba34f1d542d653f27c6a62","modified":1527086727079},{"_id":"source/_posts/【星月之旅】15年6月土耳其12天毕业旅行图文游记.md","hash":"400891bb6f2026fa97844073b050186a895c3082","modified":1547485762715},{"_id":"source/_posts/一个业余游戏解说的自我修养(一).md","hash":"d75f38588771540f0470b9ecc8f0ea8f0b1bfa0f","modified":1527086727144},{"_id":"source/_posts/一个业余游戏解说的自我修养(二).md","hash":"08d5e500ab3f3b2f7b0db332c65d4b89daa37d5c","modified":1527086727173},{"_id":"source/_posts/八数码问题的n种境界.md","hash":"3111bbafdde77318d150e17531018d7703ea5627","modified":1527086727202},{"_id":"source/_posts/博客系统更新日志(2015年09月05日更新).md","hash":"d6e1e1eb662cf8695e2d9323666278e9f4eea73d","modified":1527086727232},{"_id":"source/_posts/奥里与迷失之森.md","hash":"b92ee50daad37cc53cbf9f9d05e1b4eec2d4748e","modified":1527086727262},{"_id":"source/_posts/密码学算法学习笔记.md","hash":"57121393cffb99e5034299b0a4d9ebd03a39b3bb","modified":1527086727291},{"_id":"source/_posts/局部加权线性回归——机器学习笔记（二）.md","hash":"a7e92718192a3ad0df5f0d44ae029babfa8d9749","modified":1527086727319},{"_id":"source/_posts/收集的威尔逊定理证明.md","hash":"1afe6d68c55c7835257ccb81a7a6b6759658cb73","modified":1527086727354},{"_id":"source/_posts/普通程序员的日常修行之路.md","hash":"0712465e09df3e1c369bcabeb7166a7a9a43be89","modified":1527086727384},{"_id":"source/_posts/梯度下降算法——机器学习笔记（一）.md","hash":"970b184e918a2cb17a7edc83b3da5b0865269bf1","modified":1527086727412},{"_id":"source/_posts/求两个随机正整数互质的概率.md","hash":"99ce5e940e16ee5f8f1eee9ca10d54b3054ed200","modified":1527086727442},{"_id":"source/_posts/跳点寻路算法的学习笔记.md","hash":"1387777c2ec2117d53a00cce48b4fbf9b90a8fc5","modified":1547486911426},{"_id":"source/_posts/逻辑回归——机器学习笔记（三）.md","hash":"2abe9852b5c57e3c91e81f24c62d2e7d09844b42","modified":1527086727502},{"_id":"source/test/+7的购机指南问题.md","hash":"86c48b7172ccbc58efb0bea79d55dbc522a148f3","modified":1527086727560},{"_id":"source/test/2014年，梦想还是要有的。万一实现了呢....md","hash":"54b5e9c1d274d44d741a0db4bff4bd8faa2b98f9","modified":1527086727589},{"_id":"source/test/2014百度杯 BCTF 游记.md","hash":"199e4d19559580e665bac74f3aede568af611dd8","modified":1527086727619},{"_id":"source/test/2015年，初来乍到，请多指教.md","hash":"2d161ec74590cb328a2457b0ad9a957f0052e53f","modified":1527086727649},{"_id":"source/test/Azure Advanced Skills with Cases.md","hash":"2f7930679f902a95b76347d3ce9ce3fc1abcaf8e","modified":1527086727712},{"_id":"source/test/Codeforces Round #332 (Div. 2)解题报告.md","hash":"5cf1ba3eda2e48236db754b95853c0eee1f7f561","modified":1527086727740},{"_id":"source/test/Codeforces Round #378 (Div. 2) 解题报告.md","hash":"8326cee2621be3c690ccc0a22a7e23951622c1fb","modified":1527086727770},{"_id":"source/test/ICO.md","hash":"ab2b6b5ad36019e3cef7bcf08751c00b50c0e6a6","modified":1527086727830},{"_id":"source/test/Leetcode解题报告合集.md","hash":"d10e38a342c3b037fa676f328dd695e5f84aec01","modified":1527086727889},{"_id":"source/test/Secret解题报告.md","hash":"5eaa83ed88bd6c2fd63ce64f7944ef0e7aeecace","modified":1527086727919},{"_id":"source/test/aboutme.md","hash":"49ad6411addd77032523b090cddd72995d8c9c88","modified":1527086727681},{"_id":"source/test/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1527086727798},{"_id":"source/test/k-近邻分类——机器学习笔记（四）.md","hash":"ff1f019ff6ca66c48d8ddda6e48c01a9171ce8ff","modified":1527086727859},{"_id":"source/test/volatile关键字.md","hash":"681f9e7a1f3f691952c05abb0766dfbcc118cf77","modified":1527086727947},{"_id":"source/test/【总结】2013年，再见 ACM:ICPC.md","hash":"ad5c52e0b3bd93c7bc22b08f7a0b0bcc53b2f38a","modified":1527086727977},{"_id":"source/test/【星月之旅】15年6月土耳其12天毕业旅行图文游记.md","hash":"e945a8c78a338c391c33b417d2b9715eb0b75581","modified":1527086728007},{"_id":"source/test/一个业余游戏解说的自我修养(一).md","hash":"6473d0eb981aa02b5571bc52f85f37f392f83227","modified":1527086728036},{"_id":"source/test/一个业余游戏解说的自我修养(二).md","hash":"6a47cbe5e2f6ab5557abf7077590c06df118f586","modified":1527086728066},{"_id":"source/test/储物间.md","hash":"62739723db457d3b29816fb7f6a6747f2ad4b2d2","modified":1527086728096},{"_id":"source/test/八数码问题的n种境界.md","hash":"740bde8ec11bc49f0cfb31e57219de5028d81555","modified":1527086728126},{"_id":"source/test/博客系统更新日志(2015年09月05日更新).md","hash":"78c701a1807ba9f77c677e03db60f6414c71636c","modified":1527086728155},{"_id":"source/test/奥里与迷失之森.md","hash":"3925f056265798636e430a5d3c59dd756254792f","modified":1527086728184},{"_id":"source/test/密码学算法学习笔记.md","hash":"1d95e114f9ffb76b762c56ba269e4302c04e965a","modified":1527086728213},{"_id":"source/test/局部加权线性回归——机器学习笔记（二）.md","hash":"cdc8490678a768875ac5af0e237124b748aec8b6","modified":1527086728241},{"_id":"source/test/工作台.md","hash":"f366d8cb099cf2f8e4e13cf6a11f2c6a7abb48d9","modified":1527086728271},{"_id":"source/test/收集的威尔逊定理证明.md","hash":"46d1552285a0d0d73b97d1d6c764020608c464ca","modified":1527086728299},{"_id":"source/test/放映室主页.md","hash":"ec9913965022961d71102b11cc94d7420c1ef713","modified":1527086728328},{"_id":"source/test/普通程序员的日常修行之路.md","hash":"52718a6f2a7ea4bc409c7fc1ed60e269ec652cba","modified":1527086728357},{"_id":"source/test/梯度下降算法——机器学习笔记（一）.md","hash":"d8796883ed49c8b1adca2cfd92f369a021a72b48","modified":1527086728388},{"_id":"source/test/求两个随机正整数互质的概率.md","hash":"4bb64367c28a872acdaee433517bc9b5a2353c20","modified":1527086728417},{"_id":"source/test/赞助页面.md","hash":"3231d951d4d394ffb8e9fb8594e192a174a7d3c3","modified":1527086728445},{"_id":"source/test/跳点寻路算法的学习笔记.md","hash":"76bfe9dee2759156b00d501965af84b6ec830035","modified":1527086728475},{"_id":"source/test/逻辑回归——机器学习笔记（三）.md","hash":"318061254ecc2019f8c7024987c8075c572f1d7d","modified":1527086728504},{"_id":"themes/yilia/.git/COMMIT_EDITMSG","hash":"f55ec9d2afbed54e456383a07f8e622497c46558","modified":1527086731584},{"_id":"themes/yilia/.git/FETCH_HEAD","hash":"1efc9d034adf6456e816fcbb20023807ca64bbd0","modified":1527086731672},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1527086731701},{"_id":"themes/yilia/.git/ORIG_HEAD","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1527086737030},{"_id":"themes/yilia/.git/config","hash":"256e47c5a4386e6881318e44d2a716fdc3197863","modified":1527086731612},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1527086731642},{"_id":"themes/yilia/.git/index","hash":"e8ae227f244a03231da4d0d16d2d621a27e9c994","modified":1527086732023},{"_id":"themes/yilia/.git/packed-refs","hash":"83644c3638dafa38c817265c9207f098dd8aeee6","modified":1527086737060},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1527086737421},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1527086737451},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1527086737481},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1527086737510},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1527086737540},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1527086737570},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1527086737598},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1527086738553},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1527086738583},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1527086738612},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1527086738640},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1527086738672},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1527086738700},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1527086738730},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1527086739274},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1527086739386},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1527086740716},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1527086741140},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527086738436},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1527086739306},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1527086739352},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1527086731745},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1527086731775},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1527086731804},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1527086731833},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1527086731861},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1527086731889},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1527086731920},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1527086731948},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1527086731978},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1527086732066},{"_id":"themes/yilia/.git/logs/HEAD","hash":"725358ef6f18c1662bad15afce9894332b7dcafe","modified":1527086732126},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1527086737672},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1527086737702},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1527086737730},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1527086737762},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1527086737792},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1527086737821},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1527086737850},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"63d9a15dd0eda495fbfea91bf7d34ab3cce58bca","modified":1527086737879},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1527086737908},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1527086737937},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1527086737966},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1527086737996},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1527086738027},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1527086738055},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1527086738480},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1527086738510},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1527086738860},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1527086738889},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1527086738920},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1527086738951},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1527086738981},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1527086739013},{"_id":"themes/yilia/source/img/alipay-donate.png","hash":"5f553a175e53ae1b215f0dbe092406d0ff6abc50","modified":1527086739074},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1527086739138},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1527086739166},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1527086739196},{"_id":"themes/yilia/source/img/weixin-donate.png","hash":"43a796463977aeaa0d068e9d349a8bd3f170f48a","modified":1527086739227},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1527086739457},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1527086739487},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1527086739517},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1527086739546},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1527086739576},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1527086739606},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1527086739636},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1527086739666},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1527086739696},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1527086740055},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1527086740084},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1527086740112},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1527086740142},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1527086740172},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1527086740322},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1527086740351},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1527086740381},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1527086740411},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1527086740439},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1527086740469},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1527086740498},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1527086740528},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1527086740556},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1527086740586},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1527086740614},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1527086740645},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1527086740673},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1527086740948},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1527086740768},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1527086740796},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1527086740825},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1527086740857},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1527086740885},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1527086740916},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1527086740977},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1527086741007},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1527086741038},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1527086741069},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1527086741097},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1527086738422},{"_id":"themes/yilia/source/img/avatar.jpg","hash":"6881d730afea0da6a8650fe2a3a47a42db75c6e5","modified":1527086739108},{"_id":"themes/yilia/.git/objects/2e/4023fcdb3b548379c101d5c7e27ebae2406e62","hash":"1b896460752ad45a7559d0ac8175914b2b31191b","modified":1527086732386},{"_id":"themes/yilia/.git/objects/2e/8fa31da32fdd41978aedc0b8538d61b2fc9a87","hash":"ac2c4bb8cdc2b7175018408042fce8ce35b219af","modified":1527086732415},{"_id":"themes/yilia/.git/objects/39/da2221f037e3a8eefa2a893013ad3b5930adf6","hash":"9ef89ce7793fe6687970738fb0f4da7f02f59b3c","modified":1527086732540},{"_id":"themes/yilia/.git/objects/45/44b178661f37fbe896fad630904f8f1b5af3c4","hash":"7e794b73ad58bf24d0c6c726494a0af738d29469","modified":1527086732600},{"_id":"themes/yilia/.git/objects/4f/c07b1e31d3eb3f00e1005f0a53ff8080d17645","hash":"c110d8bff550dd11c1a3eb90f7c166c9eb4d6cd2","modified":1527086732658},{"_id":"themes/yilia/.git/objects/56/786a6d393cd6fe928aa78de68f38a65554623d","hash":"da6c7181d02c54967d5ec9b18fc8e3638f21924a","modified":1527086732716},{"_id":"themes/yilia/.git/objects/5d/c3cb64dacb0e4f399d11f795b789666afa3f3b","hash":"3a6185c629190e710600d450dac6d25f6ad88805","modified":1527086732777},{"_id":"themes/yilia/.git/objects/60/22dbb46b1d6aa187150c5e96e55b1ef624c057","hash":"ef2301418909d938f79e80b84197114c7a2640fb","modified":1527086732838},{"_id":"themes/yilia/.git/objects/66/22291ed684dea4bd24d17f981b57a856fc675e","hash":"ad699b23bac8cae264ddc60b94b1284b493bf083","modified":1527086732903},{"_id":"themes/yilia/.git/objects/80/c444ca89a569345e15677130c0d7ef57538c4b","hash":"1631368d522933b032be61b4757191bdc98e82f1","modified":1527086732963},{"_id":"themes/yilia/.git/objects/8f/88c3def5466d9e2f4caff04aa185268052e02c","hash":"f3572c74b7860fbceb565c7b43183adcc8d01a45","modified":1527086733025},{"_id":"themes/yilia/.git/objects/ac/0e08b1fd54551b24be5fad336f698fbf6e23fb","hash":"106e6e58b24553a21fb91532fbe4ed74b3af095a","modified":1527086733084},{"_id":"themes/yilia/.git/objects/b3/5b983d049904350e4436707c061009a7994875","hash":"de637bb5b99b1cbd3a8aa595c838a1a368c97965","modified":1527086733143},{"_id":"themes/yilia/.git/objects/b6/53097e6041b78ede7cba88d960c62d0e9fd06d","hash":"c38a8fc9068a5ff2cab1a24c02d5847405fbdad5","modified":1527086733200},{"_id":"themes/yilia/.git/objects/c8/a29c84c4a0b0393962c9ba1de104268cefa03d","hash":"7935ea881fb6741a095e741ee5afc8d97b6b16cd","modified":1527086733260},{"_id":"themes/yilia/.git/objects/ce/6c6380813e483b38d9e05e98af25fb5241cb6b","hash":"a1948a3db418b856fdc8c51c45a16c5a199d000b","modified":1527086733317},{"_id":"themes/yilia/.git/objects/cf/5dc84c951f6fae2be0916c50ee949d34716439","hash":"a24a0cfeee2a680162f627a0b172ffa6385649a2","modified":1527086733375},{"_id":"themes/yilia/.git/objects/f7/5d442d93618927a88bda93e3e4379fa22a21e3","hash":"962efb3fa47cb0a882dc329db4e037811ad79a20","modified":1527086733434},{"_id":"themes/yilia/.git/objects/f8/5052e35655e4e0af0ff8ae8a7f82c8da1a8351","hash":"d5bacc9c2ecd93bb322a95af792cf69e4652bd96","modified":1527086733492},{"_id":"themes/yilia/.git/objects/fd/697465fae8906a08cb229a8e4b18829af7ac8f","hash":"a685c16b05fa74ee8fee994d997f6efec96bcf9a","modified":1527086733549},{"_id":"themes/yilia/.git/objects/pack/pack-d0efa29f48307b1b5e448d031827e91aa784ca84.idx","hash":"460314e6483bbc8f7981acc69fc2d5e6dbe9f2c6","modified":1527086733642},{"_id":"themes/yilia/.git/refs/heads/master","hash":"046b11710768869608193446d5f280dda453c342","modified":1527086737118},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1527086738099},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1527086738127},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1527086738158},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1527086738187},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1527086738216},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1527086738246},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1527086738274},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1527086738304},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1527086738334},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1527086738363},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1527086739739},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1527086739769},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1527086739799},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1527086739833},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1527086739862},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1527086739922},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1527086739952},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1527086739981},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1527086740012},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1527086740219},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1527086740248},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1527086740276},{"_id":"themes/yilia/.git/objects/32/75a53c8c9badbc8e3440f61ab47505479f0f51","hash":"caa60bff913533ed9b4ffc07678bf8c463b8420d","modified":1527086732481},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"725358ef6f18c1662bad15afce9894332b7dcafe","modified":1527086732185},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1527086737190},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"2788fb65a08d57e37ed5896d7415f8dc9042e4f5","modified":1527086732260},{"_id":"themes/yilia/.git/objects/pack/pack-d0efa29f48307b1b5e448d031827e91aa784ca84.pack","hash":"6f02b7f292e9da5759ab8dd10f3c3332944b0b34","modified":1527086736966},{"_id":"public/content.json","hash":"d683ca5f028ae8ba2d0c25de22555b99cc93b880","modified":1547646785480},{"_id":"public/test/2014百度杯 BCTF 游记.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546831161889},{"_id":"public/test/+7的购机指南问题.html","hash":"071507619fea7dc35c18c2fc1e3a42775a90e00a","modified":1548321740456},{"_id":"public/test/2014年，梦想还是要有的。万一实现了呢....html","hash":"6f4cc2edfa6e51c0d75b6adeae214fdb2d8f5066","modified":1548321740458},{"_id":"public/test/2015年，初来乍到，请多指教.html","hash":"0a7b1579eb711d353de8b0b83f8f034e56b94d70","modified":1548321740458},{"_id":"public/test/Azure Advanced Skills with Cases.html","hash":"f0ebec94e8d09dd95bbc2d3e7766bd2e1d392ba8","modified":1548321740459},{"_id":"public/test/Codeforces Round #332 (Div. 2)解题报告.html","hash":"98d278c21a1b93a2a1a1f47644b701c13727241e","modified":1548321740459},{"_id":"public/test/Codeforces Round #378 (Div. 2) 解题报告.html","hash":"67e128b52b8b2b81cec95d893b724e127ce92f08","modified":1548321740459},{"_id":"public/test/ICO.html","hash":"6f5ad12aa52686164b6871ebdd39ea8b1891ffb1","modified":1548321740459},{"_id":"public/test/Leetcode解题报告合集.html","hash":"18c2d26e944fc45efe012cb5f3579d1c546361f3","modified":1548321740459},{"_id":"public/test/Secret解题报告.html","hash":"7a24e2c94712ceb5b32ce9f03991c8329e25fc51","modified":1548321740460},{"_id":"public/test/aboutme.html","hash":"889ed79d826af4752e37cf75ca9f833d86bea4b8","modified":1548321740460},{"_id":"public/test/hello-world.html","hash":"92d4035fe8d90f732a8537c03f6e67542af921b9","modified":1548321740460},{"_id":"public/test/k-近邻分类——机器学习笔记（四）.html","hash":"24e3e5e0da47d7fb559a1ad2e1cc61af6da23d7f","modified":1548321740460},{"_id":"public/test/volatile关键字.html","hash":"5ded9d966f4b16751c74ea1b96f3789b244d40c5","modified":1548321740461},{"_id":"public/test/【总结】2013年，再见 ACM:ICPC.html","hash":"41f8f66afac636ec3c70d3f71f5f9336d0ca5d62","modified":1548321740461},{"_id":"public/test/【星月之旅】15年6月土耳其12天毕业旅行图文游记.html","hash":"b46065da8bed7e203d9d5342e49ce3d4fe811e0a","modified":1548321740461},{"_id":"public/test/一个业余游戏解说的自我修养(一).html","hash":"46631cb410b1334501c33509157cb64c3c4e3c9d","modified":1548321740461},{"_id":"public/test/一个业余游戏解说的自我修养(二).html","hash":"84188e92452ad8d7fceb5092d904cb8f32c17cf4","modified":1548321740461},{"_id":"public/test/储物间.html","hash":"6f66171e1d42aeef535883ffdea36821419f1988","modified":1548321740462},{"_id":"public/test/八数码问题的n种境界.html","hash":"cc517ece78ea7bcf9081d709bd63cabd15595b7f","modified":1548321740462},{"_id":"public/test/博客系统更新日志(2015年09月05日更新).html","hash":"932e44113d4f57de1a1e77548982bf95f7b0dd40","modified":1548321740462},{"_id":"public/test/奥里与迷失之森.html","hash":"0533fe4d9969fa85a1872da5625f6ac02a98062e","modified":1548321740462},{"_id":"public/test/密码学算法学习笔记.html","hash":"285f0c4b9264996298f7b737b3b1b01be5e1bb3a","modified":1548321740463},{"_id":"public/test/局部加权线性回归——机器学习笔记（二）.html","hash":"257dc552f90351e3acabb54c91b2769056f322fb","modified":1548321740463},{"_id":"public/test/工作台.html","hash":"a75647b5599dcfa60fe657657a19db57c7105916","modified":1548321740463},{"_id":"public/test/收集的威尔逊定理证明.html","hash":"2845deac53fd2ee815d358374d4a705774726d97","modified":1548321740463},{"_id":"public/test/放映室主页.html","hash":"90a1fecc67990c26e6d9185b982bf5a93090d493","modified":1548321740463},{"_id":"public/test/普通程序员的日常修行之路.html","hash":"e3d4e3f58ed555065044507b792bed410a0ee516","modified":1548321740464},{"_id":"public/test/梯度下降算法——机器学习笔记（一）.html","hash":"4ff764af972f40a2316bfb871d3f7d402d021609","modified":1548321740464},{"_id":"public/test/求两个随机正整数互质的概率.html","hash":"2c59bacc70c0b2c36927aecea7620223236fd8be","modified":1548321740464},{"_id":"public/test/赞助页面.html","hash":"d5b47a64145787b3ec97e17b7ac50fc90738336b","modified":1548321740464},{"_id":"public/test/跳点寻路算法的学习笔记.html","hash":"31a5c0df537db6bb563b1472244e57988a876adc","modified":1548321740464},{"_id":"public/test/逻辑回归——机器学习笔记（三）.html","hash":"416dcc623654743adc46bff0866041c88b7ebb48","modified":1548321740465},{"_id":"public/2018/05/Undertale/index.html","hash":"2dd97cbd7fa0a78df566d3ec072320d9dd519520","modified":1548321740465},{"_id":"public/2018/02/Adrian_von_Ziegler/index.html","hash":"6e8d4ee8d6429bcaf7569a7be8855f86245d072a","modified":1548321740465},{"_id":"public/2017/09/奥里与迷失之森/index.html","hash":"c6dd89f13eaa3c53a4f6e617b7d60b550a310f76","modified":1548321740466},{"_id":"public/2017/07/Codeforces Round 378 (Div. 2)解题报告/index.html","hash":"2b8ebaf823e3cdc983d9275d0c1f7e1c3236f60a","modified":1548321740466},{"_id":"public/2017/05/跳点寻路算法的学习笔记/index.html","hash":"fec435a706190b106273e53bf3437e572e5deeb1","modified":1548321740466},{"_id":"public/2017/04/Codeforces Round 332 (Div. 2)解题报告/index.html","hash":"11986ba64ba036f4c13fa827311a1cfe47974fce","modified":1548321740466},{"_id":"public/2016/09/Secret解题报告/index.html","hash":"78655e1deb656f8cacee66cdcd5cffecbe9dc60c","modified":1548321740466},{"_id":"public/2016/01/【星月之旅】15年6月土耳其12天毕业旅行图文游记/index.html","hash":"a1c6ee1c75b8280555705906e28139bb2b184761","modified":1548321740467},{"_id":"public/2016/01/一个业余游戏解说的自我修养(二)/index.html","hash":"2312bf87637eab5a8d3bc736f6d2eaca8791b807","modified":1548321740467},{"_id":"public/2015/12/2015年，初来乍到，请多指教/index.html","hash":"c46b6c72de3e1e59b7d8ab3066c97f98566080f4","modified":1548321740467},{"_id":"public/2015/12/ICO/index.html","hash":"52cc86574219680c074d49190ec3ea3416823083","modified":1548321740467},{"_id":"public/2015/09/博客系统更新日志(2015年09月05日更新)/index.html","hash":"8301eaf43a8f28591e442a82ef9436eeefe22f2f","modified":1548321740468},{"_id":"public/2015/07/普通程序员的日常修行之路/index.html","hash":"0f0c1d4e7c69e4636f62b16307b6325cc58cb47d","modified":1548321740468},{"_id":"public/2015/07/Leetcode解题报告合集/index.html","hash":"4f5b4840705afe683c6e4a7402bd10394da75e0e","modified":1548321740468},{"_id":"public/2015/02/一个业余游戏解说的自我修养(一)/index.html","hash":"8f184bdf8dbc44f831617a9df984848c1edd247c","modified":1548321740468},{"_id":"public/2014/12/八数码问题的n种境界/index.html","hash":"14230384f0eb6924a90e011bfe0740f636889bfa","modified":1548321740469},{"_id":"public/2014/09/2014年，梦想还是要有的。万一实现了呢.../index.html","hash":"869f37490fab5586cc83da6ce935e06833c0a296","modified":1548321740469},{"_id":"public/2014/09/求两个随机正整数互质的概率/index.html","hash":"4ca1f616089ef04d7a10024747c8540369da40d9","modified":1548321740469},{"_id":"public/2014/09/梯度下降算法——机器学习笔记（一）/index.html","hash":"b744b31685826d9aa5a1851a67793b61c812b710","modified":1548321740469},{"_id":"public/2014/09/密码学算法学习笔记/index.html","hash":"d5ff11dcce6ef9be3d4b1430d360d401622dc43d","modified":1548321740469},{"_id":"public/2014/08/逻辑回归——机器学习笔记（三）/index.html","hash":"ed2dca569f29fcc73039852ef6688ac25c165e8f","modified":1548321740470},{"_id":"public/2014/03/2014百度杯 BCTF 游记/index.html","hash":"4a152587d3373ee524d89c1d05f43a50efed4742","modified":1548321740470},{"_id":"public/2014/01/volatile关键字/index.html","hash":"802a0e3c027fa3e9e9b2080c4d1ee5f41554c7a9","modified":1548321740470},{"_id":"public/2013/12/【总结】2013年，再见 ACM:ICPC/index.html","hash":"afbd414c60a933dfca04c98978f138d0e6244a44","modified":1548321740470},{"_id":"public/2013/10/k-近邻分类——机器学习笔记（四）/index.html","hash":"6e1341ca94ce78962253962a7f6c495d1f39d953","modified":1548321740471},{"_id":"public/2013/08/局部加权线性回归——机器学习笔记（二）/index.html","hash":"f8965155657e0b0867b2433041ce2958fac3169e","modified":1548321740471},{"_id":"public/2013/05/收集的威尔逊定理证明/index.html","hash":"854dd7e1a1b594a18495287f26c96b4ca5cf518e","modified":1548321740476},{"_id":"public/archives/index.html","hash":"27a7523c09393ea3bca0bd801b41f35996d964ad","modified":1548321740477},{"_id":"public/archives/page/2/index.html","hash":"da55fc5e2c88b3b2f530acf08cdb849c27561fde","modified":1548321740477},{"_id":"public/archives/page/3/index.html","hash":"027019c2e988d4dec4738f646a3d2696f894cba4","modified":1548321740477},{"_id":"public/archives/2013/index.html","hash":"f91aabf4d492476a344ab8a1ca397cc516ed4ff8","modified":1548321740477},{"_id":"public/archives/2013/05/index.html","hash":"8785e44ffb35f136690d150429762311e874d3e2","modified":1548321740478},{"_id":"public/archives/2013/08/index.html","hash":"773902e16123d554fcaab9317bae200004fba561","modified":1548321740478},{"_id":"public/archives/2013/10/index.html","hash":"4e3ebf2253f06d1d156f6da45ff0b0af6b7e3e77","modified":1548321740478},{"_id":"public/archives/2013/12/index.html","hash":"133315a02de87b1e67e1129077049c97b95e855e","modified":1548321740478},{"_id":"public/archives/2014/index.html","hash":"c13585743898ca001e4470a6a0c4076a815680b5","modified":1548321740478},{"_id":"public/archives/2014/01/index.html","hash":"02e35fbf49773ef41d723ec2fe2c6d8c5d3b7061","modified":1548321740479},{"_id":"public/archives/2014/03/index.html","hash":"fb2d79f840ccb6de47a78300a8d1025e3d727047","modified":1548321740479},{"_id":"public/archives/2014/08/index.html","hash":"0240e3d86df3546e705a7795b17675a96b89ca24","modified":1548321740479},{"_id":"public/archives/2014/09/index.html","hash":"5e66974bcbc17839969d37359dbbf1c2507bb61a","modified":1548321740479},{"_id":"public/archives/2014/12/index.html","hash":"06c469851658d5b5a8166703b131679b6c04db52","modified":1548321740480},{"_id":"public/archives/2015/index.html","hash":"7ee338999bbbfc3c8dda0648dfc5bacb1ba89cd1","modified":1548321740480},{"_id":"public/archives/2015/02/index.html","hash":"80efd39c3c5d901a41af3c60fdeaca0f9752817f","modified":1548321740480},{"_id":"public/archives/2015/07/index.html","hash":"b8b85b7857c6011642077f7493b12241ed68e82d","modified":1548321740480},{"_id":"public/archives/2015/09/index.html","hash":"e79731683710b3382858fa0c9637eea82bab200a","modified":1548321740480},{"_id":"public/archives/2015/12/index.html","hash":"846505e4922e3aa82ea0afdc7dbbf679b1386482","modified":1548321740481},{"_id":"public/archives/2016/index.html","hash":"f932201360c6dc4b21cc531c83b0397436923d87","modified":1548321740481},{"_id":"public/archives/2016/01/index.html","hash":"a7ff831f7ce37b40dfa8c14cf5623ef634454095","modified":1548321740481},{"_id":"public/archives/2016/09/index.html","hash":"20914d3d1b350271501cf59f89f28aca0973b6d9","modified":1548321740481},{"_id":"public/archives/2017/index.html","hash":"0f60ce360be116f06cc4fdd86eb08a59f3c94518","modified":1548321740481},{"_id":"public/archives/2017/04/index.html","hash":"378345b8eb7005056cfd79634383d4a3c954800d","modified":1548321740482},{"_id":"public/archives/2017/05/index.html","hash":"4cfb75cd7dc0839809311cdc8bc227a429ebc082","modified":1548321740482},{"_id":"public/archives/2017/07/index.html","hash":"36eb54f7a44995003be8846be8495f65c58b43e1","modified":1548321740482},{"_id":"public/archives/2017/09/index.html","hash":"ca4341c83731025c704ec0cc1c33b4ec8bf4d926","modified":1548321740482},{"_id":"public/archives/2018/index.html","hash":"d3405a70e4118fecd9afb796b7264c8751b3b87c","modified":1548321740482},{"_id":"public/archives/2018/02/index.html","hash":"7fca8934ea50fc93d41b46039d3fec263df025dc","modified":1548321740483},{"_id":"public/archives/2018/05/index.html","hash":"5ca8e5cbd782f81c4e84c5032d40a02fc7dddcc5","modified":1548321740483},{"_id":"public/index.html","hash":"3c250444ab1b5d34e14e526896df39bacc8110de","modified":1548321740483},{"_id":"public/page/2/index.html","hash":"68efaec08042a971da75cd21e5bc792067eb1b3c","modified":1548321740483},{"_id":"public/page/3/index.html","hash":"df867892c5476b059bc1f0a74ebc59caac8455fb","modified":1548321740484},{"_id":"public/tags/Life/index.html","hash":"83e0fb21d9c32c4556ea995e7590249e78821ac8","modified":1548321740484},{"_id":"public/tags/Security/index.html","hash":"7e14ed80f8965b6314c4eba9dc2af89dc1c91e44","modified":1548321740485},{"_id":"public/tags/Music/index.html","hash":"58fccfd6bb739028328bd9b8a76ca55ff92351e9","modified":1548321740485},{"_id":"public/tags/Codeforces/index.html","hash":"5c7980f7232badf1feabb2fe9614e5449f2e9250","modified":1548321740485},{"_id":"public/tags/Games/index.html","hash":"3703d22f9566fcec1d6b66ef4d279c844339b82b","modified":1548321740486},{"_id":"public/tags/Leetcode/index.html","hash":"6c068db8bb5594dfef8fed0d7d05b1979d9e7086","modified":1548321740486},{"_id":"public/tags/Game/index.html","hash":"9e896cfa5648ffd820f2be41c7b7e41443935deb","modified":1548321740486},{"_id":"public/tags/Machine-Learning/index.html","hash":"5214d4d51a2484dcc722d264094a2122eb4a8223","modified":1548321740490},{"_id":"public/tags/Linux/index.html","hash":"6ce14e6f42a256923c3b417dddb6f7cd801a993c","modified":1548321740490},{"_id":"public/tags/Algorithm/index.html","hash":"e80a15875fb6690a8dff5e01a81fec621727034c","modified":1548321740491},{"_id":"public/tags/Blog/index.html","hash":"d2b3d22f4741f48f1266170621eb6273072213e3","modified":1548321740491},{"_id":"public/tags/Math/index.html","hash":"e9c216b297eb5ec506abd65622029ad033236fa8","modified":1548321740492},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1546831161963},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1546831161963},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1546831161963},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1546831161963},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1546831161964},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1546831161964},{"_id":"public/img/alipay-donate.png","hash":"5f553a175e53ae1b215f0dbe092406d0ff6abc50","modified":1546831161964},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1546831161967},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1546831161968},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1546831161968},{"_id":"public/img/weixin-donate.png","hash":"43a796463977aeaa0d068e9d349a8bd3f170f48a","modified":1546831161968},{"_id":"public/img/avatar.jpg","hash":"6881d730afea0da6a8650fe2a3a47a42db75c6e5","modified":1546831161985},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1546831162009},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1546831162010},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1546831162010},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1546831162010},{"_id":"source/_posts/27days.journal.md","hash":"2fd47b65b48f0943b8b173483d3d11329606cb72","modified":1547485762708},{"_id":"public/2018/12/27days.journal/index.html","hash":"ba08f19baadc13cef1a53d76c8180806d3e7b100","modified":1548321740465},{"_id":"public/archives/2018/12/index.html","hash":"6e7b0dc9e221b5e21e016aa6a3b2478639adaad8","modified":1548321740483},{"_id":"public/tags/Live/index.html","hash":"820e45030b27e60a9c8f426b5ba55fdba5926d9a","modified":1548321740492},{"_id":"source/images/rss_icon.png","hash":"1b8d28ac05f98d9cef3410325ed931361f975b4c","modified":1508152487000},{"_id":"public/atom.xml","hash":"5cd17589b09a46876ba12de2a184f06f8778e34a","modified":1548321548567},{"_id":"public/images/rss_icon.png","hash":"1b8d28ac05f98d9cef3410325ed931361f975b4c","modified":1548321549355},{"_id":"source/._posts.swp","hash":"1465dcb7dbcde71962946cb919dc311edf4f52db","modified":1548322687965}],"Category":[],"Data":[],"Page":[{"_content":"# +7的购机指南问题\n\n各位同学买电脑之前，不妨先确定一下自己买电脑的目的～\n这里总结了买电脑的同学需要关注的几个问题。\n先回答前4个必答题，后面的问题可以选答。记得先想好自己的答案，然后再来qq私信+7哟～谢谢～\n\n1. 预算是多少？\n2. 要小巧一点的还是普通的？\n3. 打不打游戏？\n4. 追求性价比还是希望要大品牌？\n\n5. 抵不抵制日货，对国产是否有偏见？\n6. 有没有使用经常使用CAD等制图软件的工作学习需求？\n7. 会经常用笔记本看电影吗？","source":"test/+7的购机指南问题.md","raw":"# +7的购机指南问题\n\n各位同学买电脑之前，不妨先确定一下自己买电脑的目的～\n这里总结了买电脑的同学需要关注的几个问题。\n先回答前4个必答题，后面的问题可以选答。记得先想好自己的答案，然后再来qq私信+7哟～谢谢～\n\n1. 预算是多少？\n2. 要小巧一点的还是普通的？\n3. 打不打游戏？\n4. 追求性价比还是希望要大品牌？\n\n5. 抵不抵制日货，对国产是否有偏见？\n6. 有没有使用经常使用CAD等制图软件的工作学习需求？\n7. 会经常用笔记本看电影吗？","date":"2018-05-23T14:45:27.560Z","updated":"2018-05-23T14:45:27.560Z","path":"test/+7的购机指南问题.html","title":"","comments":1,"layout":"page","_id":"cjhj92bj50001e0vf9zi66yoc","content":"<h1 id=\"7的购机指南问题\"><a href=\"#7的购机指南问题\" class=\"headerlink\" title=\"+7的购机指南问题\"></a>+7的购机指南问题</h1><p>各位同学买电脑之前，不妨先确定一下自己买电脑的目的～<br>这里总结了买电脑的同学需要关注的几个问题。<br>先回答前4个必答题，后面的问题可以选答。记得先想好自己的答案，然后再来qq私信+7哟～谢谢～</p>\n<ol>\n<li>预算是多少？</li>\n<li>要小巧一点的还是普通的？</li>\n<li>打不打游戏？</li>\n<li><p>追求性价比还是希望要大品牌？</p>\n</li>\n<li><p>抵不抵制日货，对国产是否有偏见？</p>\n</li>\n<li>有没有使用经常使用CAD等制图软件的工作学习需求？</li>\n<li>会经常用笔记本看电影吗？</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"7的购机指南问题\"><a href=\"#7的购机指南问题\" class=\"headerlink\" title=\"+7的购机指南问题\"></a>+7的购机指南问题</h1><p>各位同学买电脑之前，不妨先确定一下自己买电脑的目的～<br>这里总结了买电脑的同学需要关注的几个问题。<br>先回答前4个必答题，后面的问题可以选答。记得先想好自己的答案，然后再来qq私信+7哟～谢谢～</p>\n<ol>\n<li>预算是多少？</li>\n<li>要小巧一点的还是普通的？</li>\n<li>打不打游戏？</li>\n<li><p>追求性价比还是希望要大品牌？</p>\n</li>\n<li><p>抵不抵制日货，对国产是否有偏见？</p>\n</li>\n<li>有没有使用经常使用CAD等制图软件的工作学习需求？</li>\n<li>会经常用笔记本看电影吗？</li>\n</ol>\n"},{"_content":"#欢迎来到我的博客\n------\n#我是plusplus7，一名软件工程专业大学生\n\n####爱好是玩玩Linux，写写程序，看看动漫，打打游戏，读读西方神话故事，弄弄天文望远镜\n\n####我喜欢研究数学，搞搞算法。\n####曾参加过noip和acm，均已退役。如果你想找ACM/ICPC的解题报告，请移步我的[旧博客][1]\n\n####我喜欢玩游戏，做做游戏视频。在我眼里，电子游戏是一门艺术。偶尔我也会活动十指来做点小程序玩玩，不过仅是偶尔罢了。\n\n####在这里，有学习过程中一些技术总结的文字，有在阅读神话故事时看到的精彩故事，也有学习数学时遇到的巧妙证明，还有摆弄天文望远镜拍到的照片......\n\n####欢迎与我交流E-mail: JackieDeng.cn@gmail.com\n\n\n###© 2013 [plusplus7][2] All rights reserved\n[1]:http://blog.csdn.net/sssogs\n[2]:http://plusplus7.duapp.com\n","source":"test/aboutme.md","raw":"#欢迎来到我的博客\n------\n#我是plusplus7，一名软件工程专业大学生\n\n####爱好是玩玩Linux，写写程序，看看动漫，打打游戏，读读西方神话故事，弄弄天文望远镜\n\n####我喜欢研究数学，搞搞算法。\n####曾参加过noip和acm，均已退役。如果你想找ACM/ICPC的解题报告，请移步我的[旧博客][1]\n\n####我喜欢玩游戏，做做游戏视频。在我眼里，电子游戏是一门艺术。偶尔我也会活动十指来做点小程序玩玩，不过仅是偶尔罢了。\n\n####在这里，有学习过程中一些技术总结的文字，有在阅读神话故事时看到的精彩故事，也有学习数学时遇到的巧妙证明，还有摆弄天文望远镜拍到的照片......\n\n####欢迎与我交流E-mail: JackieDeng.cn@gmail.com\n\n\n###© 2013 [plusplus7][2] All rights reserved\n[1]:http://blog.csdn.net/sssogs\n[2]:http://plusplus7.duapp.com\n","date":"2018-05-23T14:45:27.681Z","updated":"2018-05-23T14:45:27.681Z","path":"test/aboutme.html","title":"","comments":1,"layout":"page","_id":"cjhj92blz000te0vfyizeuc8h","content":"<h2 id=\"欢迎来到我的博客\"><a href=\"#欢迎来到我的博客\" class=\"headerlink\" title=\"#欢迎来到我的博客\"></a>#欢迎来到我的博客</h2><p>#我是plusplus7，一名软件工程专业大学生</p>\n<p>####爱好是玩玩Linux，写写程序，看看动漫，打打游戏，读读西方神话故事，弄弄天文望远镜</p>\n<p>####我喜欢研究数学，搞搞算法。</p>\n<p>####曾参加过noip和acm，均已退役。如果你想找ACM/ICPC的解题报告，请移步我的<a href=\"http://blog.csdn.net/sssogs\" target=\"_blank\" rel=\"noopener\">旧博客</a></p>\n<p>####我喜欢玩游戏，做做游戏视频。在我眼里，电子游戏是一门艺术。偶尔我也会活动十指来做点小程序玩玩，不过仅是偶尔罢了。</p>\n<p>####在这里，有学习过程中一些技术总结的文字，有在阅读神话故事时看到的精彩故事，也有学习数学时遇到的巧妙证明，还有摆弄天文望远镜拍到的照片……</p>\n<p>####欢迎与我交流E-mail: JackieDeng.cn@gmail.com</p>\n<p>###© 2013 <a href=\"http://plusplus7.duapp.com\" target=\"_blank\" rel=\"noopener\">plusplus7</a> All rights reserved</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"欢迎来到我的博客\"><a href=\"#欢迎来到我的博客\" class=\"headerlink\" title=\"#欢迎来到我的博客\"></a>#欢迎来到我的博客</h2><p>#我是plusplus7，一名软件工程专业大学生</p>\n<p>####爱好是玩玩Linux，写写程序，看看动漫，打打游戏，读读西方神话故事，弄弄天文望远镜</p>\n<p>####我喜欢研究数学，搞搞算法。</p>\n<p>####曾参加过noip和acm，均已退役。如果你想找ACM/ICPC的解题报告，请移步我的<a href=\"http://blog.csdn.net/sssogs\" target=\"_blank\" rel=\"noopener\">旧博客</a></p>\n<p>####我喜欢玩游戏，做做游戏视频。在我眼里，电子游戏是一门艺术。偶尔我也会活动十指来做点小程序玩玩，不过仅是偶尔罢了。</p>\n<p>####在这里，有学习过程中一些技术总结的文字，有在阅读神话故事时看到的精彩故事，也有学习数学时遇到的巧妙证明，还有摆弄天文望远镜拍到的照片……</p>\n<p>####欢迎与我交流E-mail: JackieDeng.cn@gmail.com</p>\n<p>###© 2013 <a href=\"http://plusplus7.duapp.com\" target=\"_blank\" rel=\"noopener\">plusplus7</a> All rights reserved</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"test/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","date":"2018-05-23T14:45:27.798Z","updated":"2018-05-23T14:45:27.798Z","path":"test/hello-world.html","comments":1,"layout":"page","_id":"cjhj92bm5000we0vf3pfx3k60","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"_content":"# 储物间\n\n储物间，主要是用来放一些实用又好玩的东西~~\n具体来说呢，这里会有一些我，或者别人开发的一些简单好玩的小东西。\n\n* ##迷宫游戏，神秘空间Mysterious Space。\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是大一时参加学校的C语言比赛时开发的一个3D迷宫动作游戏。原版是C语言写的，这个是Web移植版...包含一个简单的6$*$7的迷宫，以及一个较难的50$*$50的迷宫。\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;传送门 [迷宫游戏][2]\n\n* ##远程控制中心，rCtrl系统\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;作为一个非专业娱乐向游戏解说，我时不时会用家里的电脑上传视频。有时我可能人去上班了，家里的电脑还在上传视频，我希望电脑传完视频自动关机。由于B站传视频不支持完成自动关机，优酷客户端的完成自动关机有个很严重的bug...所以我这个需求基本不能被满足。\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;同时，我也作为一个程序员，只好自己动手丰衣足食了，所以就开始做一个远程控制的服务，名叫rCtrl。\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实一开始我只是简单地希望rCtrl这个系统能让我在公司电脑看到家里电脑的状态，然后向其发送指令，控制家里电脑关机。不过由于某前端狗一直在给我安利，一直给我推销，什么WebSocket还有jQuery，我特么实在受不了于是便去简单学了下，然后这个远程控制系统就变得有点奇怪了...\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;系统是单线程的，用WebSocket、HTTP API与用户在一个很像聊天室的环境里通信。这里的用户，不仅是操作浏览器的人，还有机器人Bot，比如家里电脑，手机什么的终端...家里电脑通过HTTP API访问系统，接受并执行系统对其发出的指令，浏览器用户通过WebSocket与系统交互。在聊天室中，用户可以对任何在线用户发消息。机器人会周期性地向系统发出HTTP请求命令，如果用户向机器人发送事先约定的某种格式的消息，系统会自动识别，并在下一次机器人请求命令地时候返回这条命令。是否执行这条命令，取决于机器人端的逻辑。\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;总的来说，这就是一个很奇怪的远程控制系统还有一些很奇怪的机器在说话，你可以简单地把它当成个匿名聊天室...\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rCtrl远程控制 [传送门][1]\n\n* ##数据安全存储系统，KirinBox\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我的毕业设计是一个数据安全型分布式存储系统。通过某种机制来提供安全的数据存储和安全的数据传输，我想用这个系统来存放一些经常会用到而又敏感的，不便于随身携带的数据，比较典型的例子如天凤ID...\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不过既然是文件存储系统，当然也可以存一些普通文件供大家分享。\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是，因为那个系统是去年实习的时候写的，只有周末的时间来开发，自然写得很挫，而且设计得也很有问题。所以这个东西暂时不放出来，等有时间我把那个破轮子重构一把，在放出来用...\n[1]: http://rctrl.plusplus7.com\n[2]: http://plusplus7.com/static/mysterious_space/index.html","source":"test/储物间.md","raw":"# 储物间\n\n储物间，主要是用来放一些实用又好玩的东西~~\n具体来说呢，这里会有一些我，或者别人开发的一些简单好玩的小东西。\n\n* ##迷宫游戏，神秘空间Mysterious Space。\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是大一时参加学校的C语言比赛时开发的一个3D迷宫动作游戏。原版是C语言写的，这个是Web移植版...包含一个简单的6$*$7的迷宫，以及一个较难的50$*$50的迷宫。\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;传送门 [迷宫游戏][2]\n\n* ##远程控制中心，rCtrl系统\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;作为一个非专业娱乐向游戏解说，我时不时会用家里的电脑上传视频。有时我可能人去上班了，家里的电脑还在上传视频，我希望电脑传完视频自动关机。由于B站传视频不支持完成自动关机，优酷客户端的完成自动关机有个很严重的bug...所以我这个需求基本不能被满足。\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;同时，我也作为一个程序员，只好自己动手丰衣足食了，所以就开始做一个远程控制的服务，名叫rCtrl。\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实一开始我只是简单地希望rCtrl这个系统能让我在公司电脑看到家里电脑的状态，然后向其发送指令，控制家里电脑关机。不过由于某前端狗一直在给我安利，一直给我推销，什么WebSocket还有jQuery，我特么实在受不了于是便去简单学了下，然后这个远程控制系统就变得有点奇怪了...\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;系统是单线程的，用WebSocket、HTTP API与用户在一个很像聊天室的环境里通信。这里的用户，不仅是操作浏览器的人，还有机器人Bot，比如家里电脑，手机什么的终端...家里电脑通过HTTP API访问系统，接受并执行系统对其发出的指令，浏览器用户通过WebSocket与系统交互。在聊天室中，用户可以对任何在线用户发消息。机器人会周期性地向系统发出HTTP请求命令，如果用户向机器人发送事先约定的某种格式的消息，系统会自动识别，并在下一次机器人请求命令地时候返回这条命令。是否执行这条命令，取决于机器人端的逻辑。\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;总的来说，这就是一个很奇怪的远程控制系统还有一些很奇怪的机器在说话，你可以简单地把它当成个匿名聊天室...\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rCtrl远程控制 [传送门][1]\n\n* ##数据安全存储系统，KirinBox\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我的毕业设计是一个数据安全型分布式存储系统。通过某种机制来提供安全的数据存储和安全的数据传输，我想用这个系统来存放一些经常会用到而又敏感的，不便于随身携带的数据，比较典型的例子如天凤ID...\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不过既然是文件存储系统，当然也可以存一些普通文件供大家分享。\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是，因为那个系统是去年实习的时候写的，只有周末的时间来开发，自然写得很挫，而且设计得也很有问题。所以这个东西暂时不放出来，等有时间我把那个破轮子重构一把，在放出来用...\n[1]: http://rctrl.plusplus7.com\n[2]: http://plusplus7.com/static/mysterious_space/index.html","date":"2018-05-23T14:45:28.096Z","updated":"2018-05-23T14:45:28.096Z","path":"test/储物间.html","title":"","comments":1,"layout":"page","_id":"cjhj92bno001je0vf7t024fta","content":"<h1 id=\"储物间\"><a href=\"#储物间\" class=\"headerlink\" title=\"储物间\"></a>储物间</h1><p>储物间，主要是用来放一些实用又好玩的东西~~<br>具体来说呢，这里会有一些我，或者别人开发的一些简单好玩的小东西。</p>\n<ul>\n<li><p>##迷宫游戏，神秘空间Mysterious Space。<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是大一时参加学校的C语言比赛时开发的一个3D迷宫动作游戏。原版是C语言写的，这个是Web移植版…包含一个简单的6$<em>$7的迷宫，以及一个较难的50$</em>$50的迷宫。<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;传送门 <a href=\"http://plusplus7.com/static/mysterious_space/index.html\">迷宫游戏</a></p>\n</li>\n<li><p>##远程控制中心，rCtrl系统<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;作为一个非专业娱乐向游戏解说，我时不时会用家里的电脑上传视频。有时我可能人去上班了，家里的电脑还在上传视频，我希望电脑传完视频自动关机。由于B站传视频不支持完成自动关机，优酷客户端的完成自动关机有个很严重的bug…所以我这个需求基本不能被满足。<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;同时，我也作为一个程序员，只好自己动手丰衣足食了，所以就开始做一个远程控制的服务，名叫rCtrl。<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实一开始我只是简单地希望rCtrl这个系统能让我在公司电脑看到家里电脑的状态，然后向其发送指令，控制家里电脑关机。不过由于某前端狗一直在给我安利，一直给我推销，什么WebSocket还有jQuery，我特么实在受不了于是便去简单学了下，然后这个远程控制系统就变得有点奇怪了…<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;系统是单线程的，用WebSocket、HTTP API与用户在一个很像聊天室的环境里通信。这里的用户，不仅是操作浏览器的人，还有机器人Bot，比如家里电脑，手机什么的终端…家里电脑通过HTTP API访问系统，接受并执行系统对其发出的指令，浏览器用户通过WebSocket与系统交互。在聊天室中，用户可以对任何在线用户发消息。机器人会周期性地向系统发出HTTP请求命令，如果用户向机器人发送事先约定的某种格式的消息，系统会自动识别，并在下一次机器人请求命令地时候返回这条命令。是否执行这条命令，取决于机器人端的逻辑。<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;总的来说，这就是一个很奇怪的远程控制系统还有一些很奇怪的机器在说话，你可以简单地把它当成个匿名聊天室…<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rCtrl远程控制 <a href=\"http://rctrl.plusplus7.com\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n</li>\n<li><p>##数据安全存储系统，KirinBox<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我的毕业设计是一个数据安全型分布式存储系统。通过某种机制来提供安全的数据存储和安全的数据传输，我想用这个系统来存放一些经常会用到而又敏感的，不便于随身携带的数据，比较典型的例子如天凤ID…<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不过既然是文件存储系统，当然也可以存一些普通文件供大家分享。<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是，因为那个系统是去年实习的时候写的，只有周末的时间来开发，自然写得很挫，而且设计得也很有问题。所以这个东西暂时不放出来，等有时间我把那个破轮子重构一把，在放出来用…</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"储物间\"><a href=\"#储物间\" class=\"headerlink\" title=\"储物间\"></a>储物间</h1><p>储物间，主要是用来放一些实用又好玩的东西~~<br>具体来说呢，这里会有一些我，或者别人开发的一些简单好玩的小东西。</p>\n<ul>\n<li><p>##迷宫游戏，神秘空间Mysterious Space。<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是大一时参加学校的C语言比赛时开发的一个3D迷宫动作游戏。原版是C语言写的，这个是Web移植版…包含一个简单的6$<em>$7的迷宫，以及一个较难的50$</em>$50的迷宫。<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;传送门 <a href=\"http://plusplus7.com/static/mysterious_space/index.html\">迷宫游戏</a></p>\n</li>\n<li><p>##远程控制中心，rCtrl系统<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;作为一个非专业娱乐向游戏解说，我时不时会用家里的电脑上传视频。有时我可能人去上班了，家里的电脑还在上传视频，我希望电脑传完视频自动关机。由于B站传视频不支持完成自动关机，优酷客户端的完成自动关机有个很严重的bug…所以我这个需求基本不能被满足。<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;同时，我也作为一个程序员，只好自己动手丰衣足食了，所以就开始做一个远程控制的服务，名叫rCtrl。<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实一开始我只是简单地希望rCtrl这个系统能让我在公司电脑看到家里电脑的状态，然后向其发送指令，控制家里电脑关机。不过由于某前端狗一直在给我安利，一直给我推销，什么WebSocket还有jQuery，我特么实在受不了于是便去简单学了下，然后这个远程控制系统就变得有点奇怪了…<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;系统是单线程的，用WebSocket、HTTP API与用户在一个很像聊天室的环境里通信。这里的用户，不仅是操作浏览器的人，还有机器人Bot，比如家里电脑，手机什么的终端…家里电脑通过HTTP API访问系统，接受并执行系统对其发出的指令，浏览器用户通过WebSocket与系统交互。在聊天室中，用户可以对任何在线用户发消息。机器人会周期性地向系统发出HTTP请求命令，如果用户向机器人发送事先约定的某种格式的消息，系统会自动识别，并在下一次机器人请求命令地时候返回这条命令。是否执行这条命令，取决于机器人端的逻辑。<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;总的来说，这就是一个很奇怪的远程控制系统还有一些很奇怪的机器在说话，你可以简单地把它当成个匿名聊天室…<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rCtrl远程控制 <a href=\"http://rctrl.plusplus7.com\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n</li>\n<li><p>##数据安全存储系统，KirinBox<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我的毕业设计是一个数据安全型分布式存储系统。通过某种机制来提供安全的数据存储和安全的数据传输，我想用这个系统来存放一些经常会用到而又敏感的，不便于随身携带的数据，比较典型的例子如天凤ID…<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不过既然是文件存储系统，当然也可以存一些普通文件供大家分享。<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是，因为那个系统是去年实习的时候写的，只有周末的时间来开发，自然写得很挫，而且设计得也很有问题。所以这个东西暂时不放出来，等有时间我把那个破轮子重构一把，在放出来用…</p>\n</li>\n</ul>\n"},{"_content":"# 工作台\n\n这里是+7的视频工作台，所有和视频有关的东西都汇总在这里，这里可以看见每件事情的状态。\n\n今天开始写这个工作台了，目的在于把视频制作有关事情的状态给汇总起来...\n\n原因是，有时候工作的事情比较多，忙起来就没有时间做视频。等忙完了之后，想回过头来继续做视频时，就发现不知道应该从哪里开始......所以这个地方算是一个“存档”，方便下次回来“读档”而准备的~\n\n# 项目状态表\n<table>\n <tr>\n  <td>【加七解说】奥里与迷失森林 一命通关攻略</td> <td>攻略</td> <td>完结</td> <td>4</td> <td>2016.06.06</td> <td>一命通关，攻略向（晒触...误..）</td>\n </tr>\n <tr>\n  <td>【+7实况】To The Moon</td> <td>实况</td> <td>完结</td> <td>4</td> <td>2016.03.14</td> <td>BGM美~剧本超赞</td>\n </tr>\n  <tr>\n  <td>【+7实况】生化危机0 HDm</td> <td>实况</td> <td>弃坑</td> <td>3</td> <td>2016.01.27</td> <td>玩不动...</td>\n </tr>\n  <tr>\n  <td>【+7实况】A Bird Story</td> <td>实况</td> <td>完结</td> <td>1</td> <td>2016.01.09</td> <td>BGM美~剧本很赞</td>\n </tr>\n <tr>\n  <td>【加七实况】数码暴龙世界3</td> <td>实况</td> <td>完结</td> <td>18</td> <td>2015.11.20</td> <td>追忆童年系列</td>\n </tr>\n <tr>\n  <td>【毕业旅行】“色情”解说的土耳其游记</td> <td>游记</td> <td>完结</td> <td>11</td> <td>2015.07.18</td> <td>毕业旅行游记~</td>\n </tr>\n <tr>\n  <td>【加七实况】超级马里奥兄弟2日版</td> <td>实况</td> <td>更新中...</td> <td>1</td> <td>2015.04.12</td> <td>娱乐搞笑向...</td>\n </tr>\n <tr>\n  <td>【实况解说】Ori与迷失之森</td> <td>实况</td> <td>完结</td> <td>9</td> <td>2015.04.07</td> <td>神作</td>\n </tr>\n <tr>\n  <td>【加七解说】最终幻想3重制版 暗之大陆篇</td> <td>实况</td> <td>完结</td> <td>9</td> <td>2015.03.12</td> <td>经典重置</td>\n </tr>\n <tr>\n  <td>【加七解说】最终幻想3重制版 光之大陆篇</td> <td>实况</td> <td>完结</td> <td>8</td> <td>2015.02.27</td> <td>经典重置</td>\n </tr>\n <tr>\n  <td>【恐怖小游戏实况】一路少年忌谭 </td> <td>实况</td> <td>完结</td> <td>3</td> <td>2015.01.31</td> <td>剧情不错</td>\n </tr>\n <tr>\n  <td>【加七实况】猫里奥通关</td> <td>实况</td> <td>完结</td> <td>1</td> <td>2015.01.25</td> <td>腹黑学弟的游戏推荐</td>\n </tr>\n <tr>\n  <td>【神剑伏魔录】葛天雷-武林大会</td> <td>攻略</td> <td>完结</td> <td>1</td> <td>2015.01.23</td> <td>街机经典</td>\n </tr>\n <tr>\n  <td>【加七解说】史丹利的寓言</td> <td>实况</td> <td>完结</td> <td>1</td> <td>2015.01.14</td> <td> 哲♂学向的游戏 </td>\n </tr>\n <tr>\n  <td>【加七解说】随便打打之黄帽</td> <td>实况</td> <td>完结</td> <td>1</td> <td>\t2015.01.11</td> <td>无聊随便玩玩</td>\n </tr>\n <tr>\n  <td>【东方红魔乡】灵梦A Normal混关</td> <td>实况</td> <td>完结</td> <td>1</td> <td>\t2015.01.03</td> <td>混关...</td>\n </tr>\n</table>\n\n# 工作日志\n\n### 2016年10月09日\n\n好吧，过了大半年，终于把这个想起来了...\n\n不过6-9月确实比较忙没有做什么视频，今天准备开一个巨坑《最终幻想9》的实况！非常经典的FF系RPG游戏，我心目中的最高神作，没有之一。流程比较长，而且搜集元素相当多，预计是年番...\n\n### 2016年5月3日\n\n今天开始写这个工作台了，目的在于把视频制作的状态给汇总起来...\n\n原因是，有时候工作的事情比较多，忙起来就没有时间做视频。等忙完了之后，想回过头来继续做视频时，就发现不知道应该从哪里开始......所以这个地方算是一个“存档”，方便下次回来“读档”而准备的~","source":"test/工作台.md","raw":"# 工作台\n\n这里是+7的视频工作台，所有和视频有关的东西都汇总在这里，这里可以看见每件事情的状态。\n\n今天开始写这个工作台了，目的在于把视频制作有关事情的状态给汇总起来...\n\n原因是，有时候工作的事情比较多，忙起来就没有时间做视频。等忙完了之后，想回过头来继续做视频时，就发现不知道应该从哪里开始......所以这个地方算是一个“存档”，方便下次回来“读档”而准备的~\n\n# 项目状态表\n<table>\n <tr>\n  <td>【加七解说】奥里与迷失森林 一命通关攻略</td> <td>攻略</td> <td>完结</td> <td>4</td> <td>2016.06.06</td> <td>一命通关，攻略向（晒触...误..）</td>\n </tr>\n <tr>\n  <td>【+7实况】To The Moon</td> <td>实况</td> <td>完结</td> <td>4</td> <td>2016.03.14</td> <td>BGM美~剧本超赞</td>\n </tr>\n  <tr>\n  <td>【+7实况】生化危机0 HDm</td> <td>实况</td> <td>弃坑</td> <td>3</td> <td>2016.01.27</td> <td>玩不动...</td>\n </tr>\n  <tr>\n  <td>【+7实况】A Bird Story</td> <td>实况</td> <td>完结</td> <td>1</td> <td>2016.01.09</td> <td>BGM美~剧本很赞</td>\n </tr>\n <tr>\n  <td>【加七实况】数码暴龙世界3</td> <td>实况</td> <td>完结</td> <td>18</td> <td>2015.11.20</td> <td>追忆童年系列</td>\n </tr>\n <tr>\n  <td>【毕业旅行】“色情”解说的土耳其游记</td> <td>游记</td> <td>完结</td> <td>11</td> <td>2015.07.18</td> <td>毕业旅行游记~</td>\n </tr>\n <tr>\n  <td>【加七实况】超级马里奥兄弟2日版</td> <td>实况</td> <td>更新中...</td> <td>1</td> <td>2015.04.12</td> <td>娱乐搞笑向...</td>\n </tr>\n <tr>\n  <td>【实况解说】Ori与迷失之森</td> <td>实况</td> <td>完结</td> <td>9</td> <td>2015.04.07</td> <td>神作</td>\n </tr>\n <tr>\n  <td>【加七解说】最终幻想3重制版 暗之大陆篇</td> <td>实况</td> <td>完结</td> <td>9</td> <td>2015.03.12</td> <td>经典重置</td>\n </tr>\n <tr>\n  <td>【加七解说】最终幻想3重制版 光之大陆篇</td> <td>实况</td> <td>完结</td> <td>8</td> <td>2015.02.27</td> <td>经典重置</td>\n </tr>\n <tr>\n  <td>【恐怖小游戏实况】一路少年忌谭 </td> <td>实况</td> <td>完结</td> <td>3</td> <td>2015.01.31</td> <td>剧情不错</td>\n </tr>\n <tr>\n  <td>【加七实况】猫里奥通关</td> <td>实况</td> <td>完结</td> <td>1</td> <td>2015.01.25</td> <td>腹黑学弟的游戏推荐</td>\n </tr>\n <tr>\n  <td>【神剑伏魔录】葛天雷-武林大会</td> <td>攻略</td> <td>完结</td> <td>1</td> <td>2015.01.23</td> <td>街机经典</td>\n </tr>\n <tr>\n  <td>【加七解说】史丹利的寓言</td> <td>实况</td> <td>完结</td> <td>1</td> <td>2015.01.14</td> <td> 哲♂学向的游戏 </td>\n </tr>\n <tr>\n  <td>【加七解说】随便打打之黄帽</td> <td>实况</td> <td>完结</td> <td>1</td> <td>\t2015.01.11</td> <td>无聊随便玩玩</td>\n </tr>\n <tr>\n  <td>【东方红魔乡】灵梦A Normal混关</td> <td>实况</td> <td>完结</td> <td>1</td> <td>\t2015.01.03</td> <td>混关...</td>\n </tr>\n</table>\n\n# 工作日志\n\n### 2016年10月09日\n\n好吧，过了大半年，终于把这个想起来了...\n\n不过6-9月确实比较忙没有做什么视频，今天准备开一个巨坑《最终幻想9》的实况！非常经典的FF系RPG游戏，我心目中的最高神作，没有之一。流程比较长，而且搜集元素相当多，预计是年番...\n\n### 2016年5月3日\n\n今天开始写这个工作台了，目的在于把视频制作的状态给汇总起来...\n\n原因是，有时候工作的事情比较多，忙起来就没有时间做视频。等忙完了之后，想回过头来继续做视频时，就发现不知道应该从哪里开始......所以这个地方算是一个“存档”，方便下次回来“读档”而准备的~","date":"2018-05-23T14:45:28.271Z","updated":"2018-05-23T14:45:28.271Z","path":"test/工作台.html","title":"","comments":1,"layout":"page","_id":"cjhj92bom0023e0vfh0pddatm","content":"<h1 id=\"工作台\"><a href=\"#工作台\" class=\"headerlink\" title=\"工作台\"></a>工作台</h1><p>这里是+7的视频工作台，所有和视频有关的东西都汇总在这里，这里可以看见每件事情的状态。</p>\n<p>今天开始写这个工作台了，目的在于把视频制作有关事情的状态给汇总起来…</p>\n<p>原因是，有时候工作的事情比较多，忙起来就没有时间做视频。等忙完了之后，想回过头来继续做视频时，就发现不知道应该从哪里开始……所以这个地方算是一个“存档”，方便下次回来“读档”而准备的~</p>\n<h1 id=\"项目状态表\"><a href=\"#项目状态表\" class=\"headerlink\" title=\"项目状态表\"></a>项目状态表</h1><table><br> <tr><br>  <td>【加七解说】奥里与迷失森林 一命通关攻略</td> <td>攻略</td> <td>完结</td> <td>4</td> <td>2016.06.06</td> <td>一命通关，攻略向（晒触…误..）</td><br> </tr><br> <tr><br>  <td>【+7实况】To The Moon</td> <td>实况</td> <td>完结</td> <td>4</td> <td>2016.03.14</td> <td>BGM美~剧本超赞</td><br> </tr><br>  <tr><br>  <td>【+7实况】生化危机0 HDm</td> <td>实况</td> <td>弃坑</td> <td>3</td> <td>2016.01.27</td> <td>玩不动…</td><br> </tr><br>  <tr><br>  <td>【+7实况】A Bird Story</td> <td>实况</td> <td>完结</td> <td>1</td> <td>2016.01.09</td> <td>BGM美~剧本很赞</td><br> </tr><br> <tr><br>  <td>【加七实况】数码暴龙世界3</td> <td>实况</td> <td>完结</td> <td>18</td> <td>2015.11.20</td> <td>追忆童年系列</td><br> </tr><br> <tr><br>  <td>【毕业旅行】“色情”解说的土耳其游记</td> <td>游记</td> <td>完结</td> <td>11</td> <td>2015.07.18</td> <td>毕业旅行游记~</td><br> </tr><br> <tr><br>  <td>【加七实况】超级马里奥兄弟2日版</td> <td>实况</td> <td>更新中…</td> <td>1</td> <td>2015.04.12</td> <td>娱乐搞笑向…</td><br> </tr><br> <tr><br>  <td>【实况解说】Ori与迷失之森</td> <td>实况</td> <td>完结</td> <td>9</td> <td>2015.04.07</td> <td>神作</td><br> </tr><br> <tr><br>  <td>【加七解说】最终幻想3重制版 暗之大陆篇</td> <td>实况</td> <td>完结</td> <td>9</td> <td>2015.03.12</td> <td>经典重置</td><br> </tr><br> <tr><br>  <td>【加七解说】最终幻想3重制版 光之大陆篇</td> <td>实况</td> <td>完结</td> <td>8</td> <td>2015.02.27</td> <td>经典重置</td><br> </tr><br> <tr><br>  <td>【恐怖小游戏实况】一路少年忌谭 </td> <td>实况</td> <td>完结</td> <td>3</td> <td>2015.01.31</td> <td>剧情不错</td><br> </tr><br> <tr><br>  <td>【加七实况】猫里奥通关</td> <td>实况</td> <td>完结</td> <td>1</td> <td>2015.01.25</td> <td>腹黑学弟的游戏推荐</td><br> </tr><br> <tr><br>  <td>【神剑伏魔录】葛天雷-武林大会</td> <td>攻略</td> <td>完结</td> <td>1</td> <td>2015.01.23</td> <td>街机经典</td><br> </tr><br> <tr><br>  <td>【加七解说】史丹利的寓言</td> <td>实况</td> <td>完结</td> <td>1</td> <td>2015.01.14</td> <td> 哲♂学向的游戏 </td><br> </tr><br> <tr><br>  <td>【加七解说】随便打打之黄帽</td> <td>实况</td> <td>完结</td> <td>1</td> <td>    2015.01.11</td> <td>无聊随便玩玩</td><br> </tr><br> <tr><br>  <td>【东方红魔乡】灵梦A Normal混关</td> <td>实况</td> <td>完结</td> <td>1</td> <td>    2015.01.03</td> <td>混关…</td><br> </tr><br></table>\n\n<h1 id=\"工作日志\"><a href=\"#工作日志\" class=\"headerlink\" title=\"工作日志\"></a>工作日志</h1><h3 id=\"2016年10月09日\"><a href=\"#2016年10月09日\" class=\"headerlink\" title=\"2016年10月09日\"></a>2016年10月09日</h3><p>好吧，过了大半年，终于把这个想起来了…</p>\n<p>不过6-9月确实比较忙没有做什么视频，今天准备开一个巨坑《最终幻想9》的实况！非常经典的FF系RPG游戏，我心目中的最高神作，没有之一。流程比较长，而且搜集元素相当多，预计是年番…</p>\n<h3 id=\"2016年5月3日\"><a href=\"#2016年5月3日\" class=\"headerlink\" title=\"2016年5月3日\"></a>2016年5月3日</h3><p>今天开始写这个工作台了，目的在于把视频制作的状态给汇总起来…</p>\n<p>原因是，有时候工作的事情比较多，忙起来就没有时间做视频。等忙完了之后，想回过头来继续做视频时，就发现不知道应该从哪里开始……所以这个地方算是一个“存档”，方便下次回来“读档”而准备的~</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"工作台\"><a href=\"#工作台\" class=\"headerlink\" title=\"工作台\"></a>工作台</h1><p>这里是+7的视频工作台，所有和视频有关的东西都汇总在这里，这里可以看见每件事情的状态。</p>\n<p>今天开始写这个工作台了，目的在于把视频制作有关事情的状态给汇总起来…</p>\n<p>原因是，有时候工作的事情比较多，忙起来就没有时间做视频。等忙完了之后，想回过头来继续做视频时，就发现不知道应该从哪里开始……所以这个地方算是一个“存档”，方便下次回来“读档”而准备的~</p>\n<h1 id=\"项目状态表\"><a href=\"#项目状态表\" class=\"headerlink\" title=\"项目状态表\"></a>项目状态表</h1><table><br> <tr><br>  <td>【加七解说】奥里与迷失森林 一命通关攻略</td> <td>攻略</td> <td>完结</td> <td>4</td> <td>2016.06.06</td> <td>一命通关，攻略向（晒触…误..）</td><br> </tr><br> <tr><br>  <td>【+7实况】To The Moon</td> <td>实况</td> <td>完结</td> <td>4</td> <td>2016.03.14</td> <td>BGM美~剧本超赞</td><br> </tr><br>  <tr><br>  <td>【+7实况】生化危机0 HDm</td> <td>实况</td> <td>弃坑</td> <td>3</td> <td>2016.01.27</td> <td>玩不动…</td><br> </tr><br>  <tr><br>  <td>【+7实况】A Bird Story</td> <td>实况</td> <td>完结</td> <td>1</td> <td>2016.01.09</td> <td>BGM美~剧本很赞</td><br> </tr><br> <tr><br>  <td>【加七实况】数码暴龙世界3</td> <td>实况</td> <td>完结</td> <td>18</td> <td>2015.11.20</td> <td>追忆童年系列</td><br> </tr><br> <tr><br>  <td>【毕业旅行】“色情”解说的土耳其游记</td> <td>游记</td> <td>完结</td> <td>11</td> <td>2015.07.18</td> <td>毕业旅行游记~</td><br> </tr><br> <tr><br>  <td>【加七实况】超级马里奥兄弟2日版</td> <td>实况</td> <td>更新中…</td> <td>1</td> <td>2015.04.12</td> <td>娱乐搞笑向…</td><br> </tr><br> <tr><br>  <td>【实况解说】Ori与迷失之森</td> <td>实况</td> <td>完结</td> <td>9</td> <td>2015.04.07</td> <td>神作</td><br> </tr><br> <tr><br>  <td>【加七解说】最终幻想3重制版 暗之大陆篇</td> <td>实况</td> <td>完结</td> <td>9</td> <td>2015.03.12</td> <td>经典重置</td><br> </tr><br> <tr><br>  <td>【加七解说】最终幻想3重制版 光之大陆篇</td> <td>实况</td> <td>完结</td> <td>8</td> <td>2015.02.27</td> <td>经典重置</td><br> </tr><br> <tr><br>  <td>【恐怖小游戏实况】一路少年忌谭 </td> <td>实况</td> <td>完结</td> <td>3</td> <td>2015.01.31</td> <td>剧情不错</td><br> </tr><br> <tr><br>  <td>【加七实况】猫里奥通关</td> <td>实况</td> <td>完结</td> <td>1</td> <td>2015.01.25</td> <td>腹黑学弟的游戏推荐</td><br> </tr><br> <tr><br>  <td>【神剑伏魔录】葛天雷-武林大会</td> <td>攻略</td> <td>完结</td> <td>1</td> <td>2015.01.23</td> <td>街机经典</td><br> </tr><br> <tr><br>  <td>【加七解说】史丹利的寓言</td> <td>实况</td> <td>完结</td> <td>1</td> <td>2015.01.14</td> <td> 哲♂学向的游戏 </td><br> </tr><br> <tr><br>  <td>【加七解说】随便打打之黄帽</td> <td>实况</td> <td>完结</td> <td>1</td> <td>    2015.01.11</td> <td>无聊随便玩玩</td><br> </tr><br> <tr><br>  <td>【东方红魔乡】灵梦A Normal混关</td> <td>实况</td> <td>完结</td> <td>1</td> <td>    2015.01.03</td> <td>混关…</td><br> </tr><br></table>\n\n<h1 id=\"工作日志\"><a href=\"#工作日志\" class=\"headerlink\" title=\"工作日志\"></a>工作日志</h1><h3 id=\"2016年10月09日\"><a href=\"#2016年10月09日\" class=\"headerlink\" title=\"2016年10月09日\"></a>2016年10月09日</h3><p>好吧，过了大半年，终于把这个想起来了…</p>\n<p>不过6-9月确实比较忙没有做什么视频，今天准备开一个巨坑《最终幻想9》的实况！非常经典的FF系RPG游戏，我心目中的最高神作，没有之一。流程比较长，而且搜集元素相当多，预计是年番…</p>\n<h3 id=\"2016年5月3日\"><a href=\"#2016年5月3日\" class=\"headerlink\" title=\"2016年5月3日\"></a>2016年5月3日</h3><p>今天开始写这个工作台了，目的在于把视频制作的状态给汇总起来…</p>\n<p>原因是，有时候工作的事情比较多，忙起来就没有时间做视频。等忙完了之后，想回过头来继续做视频时，就发现不知道应该从哪里开始……所以这个地方算是一个“存档”，方便下次回来“读档”而准备的~</p>\n"},{"_content":"# 放映室主页\n\n### Hi, 朋友~欢迎来到放映室~\n\n我是+7, 是一名业余的游戏解说。\n\n工作之余，我会通过打电子游戏来放松自己，把高速转动的大脑切换到轻松欢乐的频道。我很乐意把这些欢乐的时光录制下来，配上解说，发布到网上和大家一起分享我的快乐。\n\n发布视频的地方主要有两个：[Bilibili视频空间][bili]和[Youku优酷网空间][youku]，欢迎来订阅关注我的视频哟~\n\n两个发视频的地方，视频更新速度通常是一样的，Bilibili看视频没广告，Youku的视频清晰度更高一点~\n\n[bili]: http://space.bilibili.com/1438242\n[youku]: http://i.youku.com/u/UMTQ0MjcxMzI=","source":"test/放映室主页.md","raw":"# 放映室主页\n\n### Hi, 朋友~欢迎来到放映室~\n\n我是+7, 是一名业余的游戏解说。\n\n工作之余，我会通过打电子游戏来放松自己，把高速转动的大脑切换到轻松欢乐的频道。我很乐意把这些欢乐的时光录制下来，配上解说，发布到网上和大家一起分享我的快乐。\n\n发布视频的地方主要有两个：[Bilibili视频空间][bili]和[Youku优酷网空间][youku]，欢迎来订阅关注我的视频哟~\n\n两个发视频的地方，视频更新速度通常是一样的，Bilibili看视频没广告，Youku的视频清晰度更高一点~\n\n[bili]: http://space.bilibili.com/1438242\n[youku]: http://i.youku.com/u/UMTQ0MjcxMzI=","date":"2018-05-23T14:45:28.328Z","updated":"2018-05-23T14:45:28.328Z","path":"test/放映室主页.html","title":"","comments":1,"layout":"page","_id":"cjhj92box002ae0vf1v9g7ekf","content":"<h1 id=\"放映室主页\"><a href=\"#放映室主页\" class=\"headerlink\" title=\"放映室主页\"></a>放映室主页</h1><h3 id=\"Hi-朋友-欢迎来到放映室\"><a href=\"#Hi-朋友-欢迎来到放映室\" class=\"headerlink\" title=\"Hi, 朋友~欢迎来到放映室~\"></a>Hi, 朋友~欢迎来到放映室~</h3><p>我是+7, 是一名业余的游戏解说。</p>\n<p>工作之余，我会通过打电子游戏来放松自己，把高速转动的大脑切换到轻松欢乐的频道。我很乐意把这些欢乐的时光录制下来，配上解说，发布到网上和大家一起分享我的快乐。</p>\n<p>发布视频的地方主要有两个：<a href=\"http://space.bilibili.com/1438242\" target=\"_blank\" rel=\"noopener\">Bilibili视频空间</a>和<a href=\"http://i.youku.com/u/UMTQ0MjcxMzI=\" target=\"_blank\" rel=\"noopener\">Youku优酷网空间</a>，欢迎来订阅关注我的视频哟~</p>\n<p>两个发视频的地方，视频更新速度通常是一样的，Bilibili看视频没广告，Youku的视频清晰度更高一点~</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"放映室主页\"><a href=\"#放映室主页\" class=\"headerlink\" title=\"放映室主页\"></a>放映室主页</h1><h3 id=\"Hi-朋友-欢迎来到放映室\"><a href=\"#Hi-朋友-欢迎来到放映室\" class=\"headerlink\" title=\"Hi, 朋友~欢迎来到放映室~\"></a>Hi, 朋友~欢迎来到放映室~</h3><p>我是+7, 是一名业余的游戏解说。</p>\n<p>工作之余，我会通过打电子游戏来放松自己，把高速转动的大脑切换到轻松欢乐的频道。我很乐意把这些欢乐的时光录制下来，配上解说，发布到网上和大家一起分享我的快乐。</p>\n<p>发布视频的地方主要有两个：<a href=\"http://space.bilibili.com/1438242\" target=\"_blank\" rel=\"noopener\">Bilibili视频空间</a>和<a href=\"http://i.youku.com/u/UMTQ0MjcxMzI=\" target=\"_blank\" rel=\"noopener\">Youku优酷网空间</a>，欢迎来订阅关注我的视频哟~</p>\n<p>两个发视频的地方，视频更新速度通常是一样的，Bilibili看视频没广告，Youku的视频清晰度更高一点~</p>\n"},{"_content":"赞助页面\n\n好吧，不得不承认，目前我的博客内容不是很丰富，但是我还是厚颜无耻地做了这个页面=。=\n\n如果我的文字与你引起了共鸣，或者读了之后感觉有所收获，不妨小额赞助我一下，以后来日方长，我会精心维护这个博客，努力写出更多高质量的文字。\n\n<img src=\"http://7xlt42.com1.z0.glb.clouddn.com/thx.png-60percent\"/>\n感激不尽~\n\n支付宝\n\n<table><tr><td><img src=\"http://7xlt42.com1.z0.glb.clouddn.com/zfb1.png-60percent\"/></td><td><img src=\"http://7xlt42.com1.z0.glb.clouddn.com/zfb7.png-60percent\"/></td><td>\n<img src=\"http://7xlt42.com1.z0.glb.clouddn.com/zfb0.png-60percent\"/></td></tr></table>\n\n微信\n\n<table><tr><td><img src=\"http://7xlt42.com1.z0.glb.clouddn.com/wx1.png-60percent\"/></td><td><img src=\"http://7xlt42.com1.z0.glb.clouddn.com/wx7.png-60percent\"/></td><td>\n<img src=\"http://7xlt42.com1.z0.glb.clouddn.com/wx0.png-60percent\"/></td></tr></table>","source":"test/赞助页面.md","raw":"赞助页面\n\n好吧，不得不承认，目前我的博客内容不是很丰富，但是我还是厚颜无耻地做了这个页面=。=\n\n如果我的文字与你引起了共鸣，或者读了之后感觉有所收获，不妨小额赞助我一下，以后来日方长，我会精心维护这个博客，努力写出更多高质量的文字。\n\n<img src=\"http://7xlt42.com1.z0.glb.clouddn.com/thx.png-60percent\"/>\n感激不尽~\n\n支付宝\n\n<table><tr><td><img src=\"http://7xlt42.com1.z0.glb.clouddn.com/zfb1.png-60percent\"/></td><td><img src=\"http://7xlt42.com1.z0.glb.clouddn.com/zfb7.png-60percent\"/></td><td>\n<img src=\"http://7xlt42.com1.z0.glb.clouddn.com/zfb0.png-60percent\"/></td></tr></table>\n\n微信\n\n<table><tr><td><img src=\"http://7xlt42.com1.z0.glb.clouddn.com/wx1.png-60percent\"/></td><td><img src=\"http://7xlt42.com1.z0.glb.clouddn.com/wx7.png-60percent\"/></td><td>\n<img src=\"http://7xlt42.com1.z0.glb.clouddn.com/wx0.png-60percent\"/></td></tr></table>","date":"2018-05-23T14:45:28.445Z","updated":"2018-05-23T14:45:28.445Z","path":"test/赞助页面.html","title":"","comments":1,"layout":"page","_id":"cjhj92bpa002ke0vfk5jdnb99","content":"<p>赞助页面</p>\n<p>好吧，不得不承认，目前我的博客内容不是很丰富，但是我还是厚颜无耻地做了这个页面=。=</p>\n<p>如果我的文字与你引起了共鸣，或者读了之后感觉有所收获，不妨小额赞助我一下，以后来日方长，我会精心维护这个博客，努力写出更多高质量的文字。</p>\n<p><img src=\"http://7xlt42.com1.z0.glb.clouddn.com/thx.png-60percent\"><br>感激不尽~</p>\n<p>支付宝</p>\n<table><tr><td><img src=\"http://7xlt42.com1.z0.glb.clouddn.com/zfb1.png-60percent\"></td><td><img src=\"http://7xlt42.com1.z0.glb.clouddn.com/zfb7.png-60percent\"></td><td><br><img src=\"http://7xlt42.com1.z0.glb.clouddn.com/zfb0.png-60percent\"></td></tr></table>\n\n<p>微信</p>\n<table><tr><td><img src=\"http://7xlt42.com1.z0.glb.clouddn.com/wx1.png-60percent\"></td><td><img src=\"http://7xlt42.com1.z0.glb.clouddn.com/wx7.png-60percent\"></td><td><br><img src=\"http://7xlt42.com1.z0.glb.clouddn.com/wx0.png-60percent\"></td></tr></table>","site":{"data":{}},"excerpt":"","more":"<p>赞助页面</p>\n<p>好吧，不得不承认，目前我的博客内容不是很丰富，但是我还是厚颜无耻地做了这个页面=。=</p>\n<p>如果我的文字与你引起了共鸣，或者读了之后感觉有所收获，不妨小额赞助我一下，以后来日方长，我会精心维护这个博客，努力写出更多高质量的文字。</p>\n<p><img src=\"http://7xlt42.com1.z0.glb.clouddn.com/thx.png-60percent\"><br>感激不尽~</p>\n<p>支付宝</p>\n<table><tr><td><img src=\"http://7xlt42.com1.z0.glb.clouddn.com/zfb1.png-60percent\"></td><td><img src=\"http://7xlt42.com1.z0.glb.clouddn.com/zfb7.png-60percent\"></td><td><br><img src=\"http://7xlt42.com1.z0.glb.clouddn.com/zfb0.png-60percent\"></td></tr></table>\n\n<p>微信</p>\n<table><tr><td><img src=\"http://7xlt42.com1.z0.glb.clouddn.com/wx1.png-60percent\"></td><td><img src=\"http://7xlt42.com1.z0.glb.clouddn.com/wx7.png-60percent\"></td><td><br><img src=\"http://7xlt42.com1.z0.glb.clouddn.com/wx0.png-60percent\"></td></tr></table>"}],"Post":[{"layout":"post","title":"2014年，梦想还是要有的。万一实现了呢...","date":"2014-09-16T17:21:00.000Z","comments":1,"reward":true,"_content":"\n今天是2014年9月17日，杭州秋天的夜晚很是清静。\n   \n忙了一天，骑着自行车，回到家，简单地冲洗掉一天的疲惫，坐在阳台的椅子上，吹着微风，2014年所发生的事，就像幻灯片一样徐徐浮现在我脑海。\n\n<!-- more -->      \n\n昨天是我21岁生日，而后天则是公司的IPO日。15年前，马老板带着一伙人创业，而15年后，这家公司将创造史上最大IPO。今天中午吃过饭，收到了公司给每个人发了IPO纪念版T恤，正面写着“梦想还是要有的”，背面写着“万一实现了呢”，感慨万千，于是就拿这两句话作为今年总结的标题了…\n       \n在13年的最后一天，我很幸运地拿到了驾照，过春节跑到云南和我妈过年顺便练练车。那时的我刚刚退出ACM校队，我是个很懒很贪玩的人，打ACM忙了两年，想好好休息一下，找工作什么的想放到下个学期开学再说。\n       \n开学之后，不做比赛了，事情少了很多，我突然不知道该做什么了......尝试着去做很多事，比如想学日语，最后坚持不下去；想好好打日麻，结果被裱到不想玩了；开始打dota2，还是菜成狗（说得好像以前比狗厉害似的(╥﹏╥) ）......也做成了很多事，比如每晚的跑步坚持了下来，让我瘦了50斤左右；读了一些以前买来却没动过的书；学了一点点Andrew Ng的课程，让我对ML有了浅显的认识；学了学Google Code Style，努力把ACM的编码坏习惯改掉。啊！原来没有ACM的大学是这样的......\n       \n后来，做BCTF的时候，yyy学姐给了我和一些syc小伙伴内推阿里实习的机会。对这次面试，我并没有抱太大希望，原因非常明显：我一小本科，二本学校出身，学渣一个，除了c语言之外其他课程几乎都是60分过的，acm最高成绩不过区域赛铜牌。我拿什么和一本名校的金牌银牌大神比...为了不辜负yyy学姐的期望，我还是精心地为这次机会准备简历。为了让我的简历更有吸引力，我照着CK大牛的一篇关于简历筛选的博文认真修改自己的简历；每晚跑步的时候，脑海中不断地想自己面试时该说的话，怎么措辞，怎么在短短的几分钟内展现自己的优点。没过多久我便接到了面试。\n       \n通过几轮面试，我进入了一个等待的尴尬期。这段时间，无比纠结，因为不知道到底能不能拿到offer。再后来，便是腾讯的实习生招聘了。\n       \n最开始在网上看到腾讯也招实习生，也是抱着试试看的心理参加了笔试。TX笔试在UESTC，TX笔试比阿里的简单些，但是考察面很广，心里各种不安。每次到UESTC总是留下不美好的记忆...后来便是在天府软件园布衣酒店的技术一面二面和HR三面。一面问题很具体，还写了段代码，面试官很亲切。二面面试官的问题难度变得很大，面完我直接觉得要二面滚粗了...结果没想到在凌晨1点，我在微信上刷了一下面试状态，居然显示我二面通过。最后三面hr，扯了20分钟家常。没过多久就拿到offer了，深圳MIG开发。\n       \noffer来的同时，也带来了问题。阿里面试完了，没有拒信也没给offer，在等待中。而TX则要求我到软件园马上签offer。TX是一家伟大的公司，能去实习让我感到很开心。毕竟实习机会是很重要的，可能会影响后来的工作，为了保险我决定先签了这份offer，再慢慢等阿里的。后来我有了TX给我的实习生导师的手机号，也和他在微信上有了一些交流。非常感谢他给了指出了我一些学习发展的方向，虽然我最终没有去深圳.....\n       \n等到5月底，我实在有点等不下去了。找各种途径联系之前的面试官，最终联系到了二面的面试官，也是我现在的大主管。我直接向他说明了来意，结果他说，我在一次XX部门面试中没通过…可是事实上我根本没有接受到过XX部门的面试啊…我感觉是hr搞错了，但是为了不表现得很annoy，我只是提了一句，也没有太过于纠结这件事，因为毕竟我还有TX offer嘛，而且九月还有校招嘛。\n       \n我和他的交流是在旺旺上的，那时我基本不用旺旺，但是从得知我被拒了之后，我便天天上旺旺，仿佛还在期待着什么......果然，最戏剧性的一幕出现了。事隔了两天，他主动找到我，告诉我确实是hr搞错了，我通过了所有面试，正在入职邀约阶段。心情自然是非常激动，于是我打算拒掉TX的offer。对于拒TX，我也考量了很久，想到了一些好处和坏处。TX是一家非常有实力，拥有海量用户的公司。我去的部门是QQ浏览器部门，说实话我感觉不太适合做这个。好吧，事实上还有个隐藏原因，也是直接原因......\n       \n后来，我便背井离乡，来到了杭州，开始了新一轮的生活。\n       \n来到杭州，最开始遇到的是租房子的问题。在30+度的烈日下，我背着mac，在城西找了一圈，没有找到合适的房子。最终在接近傍晚的时候，以加价而且一次付清的条件，才勉强租到一件小的不能再小的房子。\n       \n入职以后，我便开始了我的实习。到了一个新环境，新事物，一切都觉得很新鲜，身边的牛人很多，而且很热心很谦逊，在这里一个星期学到的东西，比在学校一个月学到的东西都多。实习生活，很有趣也很精彩。\n       \n2014年，遇到了很多人，很多事。不知道这个每年一篇流水账的习惯能持续到多久，好像今年的流水账有点长。。。\n       \n厂区内充满了庆祝IPO的欢声笑语，比过春节还热闹。马总带领着阿里巴巴从草根创业到成功上市，这期间吹了不少牛逼，走过15年风风雨雨，到如今，他把这些都一一实现了。\n       \n“梦想还是要有的。万一实现了呢？”，对于我来说，梦想才刚刚开始。\n","source":"_posts/2014年，梦想还是要有的。万一实现了呢....md","raw":"---\nlayout: post\ntitle: 2014年，梦想还是要有的。万一实现了呢...\ndate: 2014-9-17 01:21\ncomments: true\nreward: true\ntags:\n    - Life\n---\n\n今天是2014年9月17日，杭州秋天的夜晚很是清静。\n   \n忙了一天，骑着自行车，回到家，简单地冲洗掉一天的疲惫，坐在阳台的椅子上，吹着微风，2014年所发生的事，就像幻灯片一样徐徐浮现在我脑海。\n\n<!-- more -->      \n\n昨天是我21岁生日，而后天则是公司的IPO日。15年前，马老板带着一伙人创业，而15年后，这家公司将创造史上最大IPO。今天中午吃过饭，收到了公司给每个人发了IPO纪念版T恤，正面写着“梦想还是要有的”，背面写着“万一实现了呢”，感慨万千，于是就拿这两句话作为今年总结的标题了…\n       \n在13年的最后一天，我很幸运地拿到了驾照，过春节跑到云南和我妈过年顺便练练车。那时的我刚刚退出ACM校队，我是个很懒很贪玩的人，打ACM忙了两年，想好好休息一下，找工作什么的想放到下个学期开学再说。\n       \n开学之后，不做比赛了，事情少了很多，我突然不知道该做什么了......尝试着去做很多事，比如想学日语，最后坚持不下去；想好好打日麻，结果被裱到不想玩了；开始打dota2，还是菜成狗（说得好像以前比狗厉害似的(╥﹏╥) ）......也做成了很多事，比如每晚的跑步坚持了下来，让我瘦了50斤左右；读了一些以前买来却没动过的书；学了一点点Andrew Ng的课程，让我对ML有了浅显的认识；学了学Google Code Style，努力把ACM的编码坏习惯改掉。啊！原来没有ACM的大学是这样的......\n       \n后来，做BCTF的时候，yyy学姐给了我和一些syc小伙伴内推阿里实习的机会。对这次面试，我并没有抱太大希望，原因非常明显：我一小本科，二本学校出身，学渣一个，除了c语言之外其他课程几乎都是60分过的，acm最高成绩不过区域赛铜牌。我拿什么和一本名校的金牌银牌大神比...为了不辜负yyy学姐的期望，我还是精心地为这次机会准备简历。为了让我的简历更有吸引力，我照着CK大牛的一篇关于简历筛选的博文认真修改自己的简历；每晚跑步的时候，脑海中不断地想自己面试时该说的话，怎么措辞，怎么在短短的几分钟内展现自己的优点。没过多久我便接到了面试。\n       \n通过几轮面试，我进入了一个等待的尴尬期。这段时间，无比纠结，因为不知道到底能不能拿到offer。再后来，便是腾讯的实习生招聘了。\n       \n最开始在网上看到腾讯也招实习生，也是抱着试试看的心理参加了笔试。TX笔试在UESTC，TX笔试比阿里的简单些，但是考察面很广，心里各种不安。每次到UESTC总是留下不美好的记忆...后来便是在天府软件园布衣酒店的技术一面二面和HR三面。一面问题很具体，还写了段代码，面试官很亲切。二面面试官的问题难度变得很大，面完我直接觉得要二面滚粗了...结果没想到在凌晨1点，我在微信上刷了一下面试状态，居然显示我二面通过。最后三面hr，扯了20分钟家常。没过多久就拿到offer了，深圳MIG开发。\n       \noffer来的同时，也带来了问题。阿里面试完了，没有拒信也没给offer，在等待中。而TX则要求我到软件园马上签offer。TX是一家伟大的公司，能去实习让我感到很开心。毕竟实习机会是很重要的，可能会影响后来的工作，为了保险我决定先签了这份offer，再慢慢等阿里的。后来我有了TX给我的实习生导师的手机号，也和他在微信上有了一些交流。非常感谢他给了指出了我一些学习发展的方向，虽然我最终没有去深圳.....\n       \n等到5月底，我实在有点等不下去了。找各种途径联系之前的面试官，最终联系到了二面的面试官，也是我现在的大主管。我直接向他说明了来意，结果他说，我在一次XX部门面试中没通过…可是事实上我根本没有接受到过XX部门的面试啊…我感觉是hr搞错了，但是为了不表现得很annoy，我只是提了一句，也没有太过于纠结这件事，因为毕竟我还有TX offer嘛，而且九月还有校招嘛。\n       \n我和他的交流是在旺旺上的，那时我基本不用旺旺，但是从得知我被拒了之后，我便天天上旺旺，仿佛还在期待着什么......果然，最戏剧性的一幕出现了。事隔了两天，他主动找到我，告诉我确实是hr搞错了，我通过了所有面试，正在入职邀约阶段。心情自然是非常激动，于是我打算拒掉TX的offer。对于拒TX，我也考量了很久，想到了一些好处和坏处。TX是一家非常有实力，拥有海量用户的公司。我去的部门是QQ浏览器部门，说实话我感觉不太适合做这个。好吧，事实上还有个隐藏原因，也是直接原因......\n       \n后来，我便背井离乡，来到了杭州，开始了新一轮的生活。\n       \n来到杭州，最开始遇到的是租房子的问题。在30+度的烈日下，我背着mac，在城西找了一圈，没有找到合适的房子。最终在接近傍晚的时候，以加价而且一次付清的条件，才勉强租到一件小的不能再小的房子。\n       \n入职以后，我便开始了我的实习。到了一个新环境，新事物，一切都觉得很新鲜，身边的牛人很多，而且很热心很谦逊，在这里一个星期学到的东西，比在学校一个月学到的东西都多。实习生活，很有趣也很精彩。\n       \n2014年，遇到了很多人，很多事。不知道这个每年一篇流水账的习惯能持续到多久，好像今年的流水账有点长。。。\n       \n厂区内充满了庆祝IPO的欢声笑语，比过春节还热闹。马总带领着阿里巴巴从草根创业到成功上市，这期间吹了不少牛逼，走过15年风风雨雨，到如今，他把这些都一一实现了。\n       \n“梦想还是要有的。万一实现了呢？”，对于我来说，梦想才刚刚开始。\n","slug":"2014年，梦想还是要有的。万一实现了呢...","published":1,"updated":"2018-05-23T14:45:26.714Z","photos":[],"link":"","_id":"cjhj92bip0000e0vf6f464elc","content":"<p>今天是2014年9月17日，杭州秋天的夜晚很是清静。</p>\n<p>忙了一天，骑着自行车，回到家，简单地冲洗掉一天的疲惫，坐在阳台的椅子上，吹着微风，2014年所发生的事，就像幻灯片一样徐徐浮现在我脑海。</p>\n<a id=\"more\"></a>      \n<p>昨天是我21岁生日，而后天则是公司的IPO日。15年前，马老板带着一伙人创业，而15年后，这家公司将创造史上最大IPO。今天中午吃过饭，收到了公司给每个人发了IPO纪念版T恤，正面写着“梦想还是要有的”，背面写着“万一实现了呢”，感慨万千，于是就拿这两句话作为今年总结的标题了…</p>\n<p>在13年的最后一天，我很幸运地拿到了驾照，过春节跑到云南和我妈过年顺便练练车。那时的我刚刚退出ACM校队，我是个很懒很贪玩的人，打ACM忙了两年，想好好休息一下，找工作什么的想放到下个学期开学再说。</p>\n<p>开学之后，不做比赛了，事情少了很多，我突然不知道该做什么了……尝试着去做很多事，比如想学日语，最后坚持不下去；想好好打日麻，结果被裱到不想玩了；开始打dota2，还是菜成狗（说得好像以前比狗厉害似的(╥﹏╥) ）……也做成了很多事，比如每晚的跑步坚持了下来，让我瘦了50斤左右；读了一些以前买来却没动过的书；学了一点点Andrew Ng的课程，让我对ML有了浅显的认识；学了学Google Code Style，努力把ACM的编码坏习惯改掉。啊！原来没有ACM的大学是这样的……</p>\n<p>后来，做BCTF的时候，yyy学姐给了我和一些syc小伙伴内推阿里实习的机会。对这次面试，我并没有抱太大希望，原因非常明显：我一小本科，二本学校出身，学渣一个，除了c语言之外其他课程几乎都是60分过的，acm最高成绩不过区域赛铜牌。我拿什么和一本名校的金牌银牌大神比…为了不辜负yyy学姐的期望，我还是精心地为这次机会准备简历。为了让我的简历更有吸引力，我照着CK大牛的一篇关于简历筛选的博文认真修改自己的简历；每晚跑步的时候，脑海中不断地想自己面试时该说的话，怎么措辞，怎么在短短的几分钟内展现自己的优点。没过多久我便接到了面试。</p>\n<p>通过几轮面试，我进入了一个等待的尴尬期。这段时间，无比纠结，因为不知道到底能不能拿到offer。再后来，便是腾讯的实习生招聘了。</p>\n<p>最开始在网上看到腾讯也招实习生，也是抱着试试看的心理参加了笔试。TX笔试在UESTC，TX笔试比阿里的简单些，但是考察面很广，心里各种不安。每次到UESTC总是留下不美好的记忆…后来便是在天府软件园布衣酒店的技术一面二面和HR三面。一面问题很具体，还写了段代码，面试官很亲切。二面面试官的问题难度变得很大，面完我直接觉得要二面滚粗了…结果没想到在凌晨1点，我在微信上刷了一下面试状态，居然显示我二面通过。最后三面hr，扯了20分钟家常。没过多久就拿到offer了，深圳MIG开发。</p>\n<p>offer来的同时，也带来了问题。阿里面试完了，没有拒信也没给offer，在等待中。而TX则要求我到软件园马上签offer。TX是一家伟大的公司，能去实习让我感到很开心。毕竟实习机会是很重要的，可能会影响后来的工作，为了保险我决定先签了这份offer，再慢慢等阿里的。后来我有了TX给我的实习生导师的手机号，也和他在微信上有了一些交流。非常感谢他给了指出了我一些学习发展的方向，虽然我最终没有去深圳…..</p>\n<p>等到5月底，我实在有点等不下去了。找各种途径联系之前的面试官，最终联系到了二面的面试官，也是我现在的大主管。我直接向他说明了来意，结果他说，我在一次XX部门面试中没通过…可是事实上我根本没有接受到过XX部门的面试啊…我感觉是hr搞错了，但是为了不表现得很annoy，我只是提了一句，也没有太过于纠结这件事，因为毕竟我还有TX offer嘛，而且九月还有校招嘛。</p>\n<p>我和他的交流是在旺旺上的，那时我基本不用旺旺，但是从得知我被拒了之后，我便天天上旺旺，仿佛还在期待着什么……果然，最戏剧性的一幕出现了。事隔了两天，他主动找到我，告诉我确实是hr搞错了，我通过了所有面试，正在入职邀约阶段。心情自然是非常激动，于是我打算拒掉TX的offer。对于拒TX，我也考量了很久，想到了一些好处和坏处。TX是一家非常有实力，拥有海量用户的公司。我去的部门是QQ浏览器部门，说实话我感觉不太适合做这个。好吧，事实上还有个隐藏原因，也是直接原因……</p>\n<p>后来，我便背井离乡，来到了杭州，开始了新一轮的生活。</p>\n<p>来到杭州，最开始遇到的是租房子的问题。在30+度的烈日下，我背着mac，在城西找了一圈，没有找到合适的房子。最终在接近傍晚的时候，以加价而且一次付清的条件，才勉强租到一件小的不能再小的房子。</p>\n<p>入职以后，我便开始了我的实习。到了一个新环境，新事物，一切都觉得很新鲜，身边的牛人很多，而且很热心很谦逊，在这里一个星期学到的东西，比在学校一个月学到的东西都多。实习生活，很有趣也很精彩。</p>\n<p>2014年，遇到了很多人，很多事。不知道这个每年一篇流水账的习惯能持续到多久，好像今年的流水账有点长。。。</p>\n<p>厂区内充满了庆祝IPO的欢声笑语，比过春节还热闹。马总带领着阿里巴巴从草根创业到成功上市，这期间吹了不少牛逼，走过15年风风雨雨，到如今，他把这些都一一实现了。</p>\n<p>“梦想还是要有的。万一实现了呢？”，对于我来说，梦想才刚刚开始。</p>\n","site":{"data":{}},"excerpt":"<p>今天是2014年9月17日，杭州秋天的夜晚很是清静。</p>\n<p>忙了一天，骑着自行车，回到家，简单地冲洗掉一天的疲惫，坐在阳台的椅子上，吹着微风，2014年所发生的事，就像幻灯片一样徐徐浮现在我脑海。</p>","more":"<p>昨天是我21岁生日，而后天则是公司的IPO日。15年前，马老板带着一伙人创业，而15年后，这家公司将创造史上最大IPO。今天中午吃过饭，收到了公司给每个人发了IPO纪念版T恤，正面写着“梦想还是要有的”，背面写着“万一实现了呢”，感慨万千，于是就拿这两句话作为今年总结的标题了…</p>\n<p>在13年的最后一天，我很幸运地拿到了驾照，过春节跑到云南和我妈过年顺便练练车。那时的我刚刚退出ACM校队，我是个很懒很贪玩的人，打ACM忙了两年，想好好休息一下，找工作什么的想放到下个学期开学再说。</p>\n<p>开学之后，不做比赛了，事情少了很多，我突然不知道该做什么了……尝试着去做很多事，比如想学日语，最后坚持不下去；想好好打日麻，结果被裱到不想玩了；开始打dota2，还是菜成狗（说得好像以前比狗厉害似的(╥﹏╥) ）……也做成了很多事，比如每晚的跑步坚持了下来，让我瘦了50斤左右；读了一些以前买来却没动过的书；学了一点点Andrew Ng的课程，让我对ML有了浅显的认识；学了学Google Code Style，努力把ACM的编码坏习惯改掉。啊！原来没有ACM的大学是这样的……</p>\n<p>后来，做BCTF的时候，yyy学姐给了我和一些syc小伙伴内推阿里实习的机会。对这次面试，我并没有抱太大希望，原因非常明显：我一小本科，二本学校出身，学渣一个，除了c语言之外其他课程几乎都是60分过的，acm最高成绩不过区域赛铜牌。我拿什么和一本名校的金牌银牌大神比…为了不辜负yyy学姐的期望，我还是精心地为这次机会准备简历。为了让我的简历更有吸引力，我照着CK大牛的一篇关于简历筛选的博文认真修改自己的简历；每晚跑步的时候，脑海中不断地想自己面试时该说的话，怎么措辞，怎么在短短的几分钟内展现自己的优点。没过多久我便接到了面试。</p>\n<p>通过几轮面试，我进入了一个等待的尴尬期。这段时间，无比纠结，因为不知道到底能不能拿到offer。再后来，便是腾讯的实习生招聘了。</p>\n<p>最开始在网上看到腾讯也招实习生，也是抱着试试看的心理参加了笔试。TX笔试在UESTC，TX笔试比阿里的简单些，但是考察面很广，心里各种不安。每次到UESTC总是留下不美好的记忆…后来便是在天府软件园布衣酒店的技术一面二面和HR三面。一面问题很具体，还写了段代码，面试官很亲切。二面面试官的问题难度变得很大，面完我直接觉得要二面滚粗了…结果没想到在凌晨1点，我在微信上刷了一下面试状态，居然显示我二面通过。最后三面hr，扯了20分钟家常。没过多久就拿到offer了，深圳MIG开发。</p>\n<p>offer来的同时，也带来了问题。阿里面试完了，没有拒信也没给offer，在等待中。而TX则要求我到软件园马上签offer。TX是一家伟大的公司，能去实习让我感到很开心。毕竟实习机会是很重要的，可能会影响后来的工作，为了保险我决定先签了这份offer，再慢慢等阿里的。后来我有了TX给我的实习生导师的手机号，也和他在微信上有了一些交流。非常感谢他给了指出了我一些学习发展的方向，虽然我最终没有去深圳…..</p>\n<p>等到5月底，我实在有点等不下去了。找各种途径联系之前的面试官，最终联系到了二面的面试官，也是我现在的大主管。我直接向他说明了来意，结果他说，我在一次XX部门面试中没通过…可是事实上我根本没有接受到过XX部门的面试啊…我感觉是hr搞错了，但是为了不表现得很annoy，我只是提了一句，也没有太过于纠结这件事，因为毕竟我还有TX offer嘛，而且九月还有校招嘛。</p>\n<p>我和他的交流是在旺旺上的，那时我基本不用旺旺，但是从得知我被拒了之后，我便天天上旺旺，仿佛还在期待着什么……果然，最戏剧性的一幕出现了。事隔了两天，他主动找到我，告诉我确实是hr搞错了，我通过了所有面试，正在入职邀约阶段。心情自然是非常激动，于是我打算拒掉TX的offer。对于拒TX，我也考量了很久，想到了一些好处和坏处。TX是一家非常有实力，拥有海量用户的公司。我去的部门是QQ浏览器部门，说实话我感觉不太适合做这个。好吧，事实上还有个隐藏原因，也是直接原因……</p>\n<p>后来，我便背井离乡，来到了杭州，开始了新一轮的生活。</p>\n<p>来到杭州，最开始遇到的是租房子的问题。在30+度的烈日下，我背着mac，在城西找了一圈，没有找到合适的房子。最终在接近傍晚的时候，以加价而且一次付清的条件，才勉强租到一件小的不能再小的房子。</p>\n<p>入职以后，我便开始了我的实习。到了一个新环境，新事物，一切都觉得很新鲜，身边的牛人很多，而且很热心很谦逊，在这里一个星期学到的东西，比在学校一个月学到的东西都多。实习生活，很有趣也很精彩。</p>\n<p>2014年，遇到了很多人，很多事。不知道这个每年一篇流水账的习惯能持续到多久，好像今年的流水账有点长。。。</p>\n<p>厂区内充满了庆祝IPO的欢声笑语，比过春节还热闹。马总带领着阿里巴巴从草根创业到成功上市，这期间吹了不少牛逼，走过15年风风雨雨，到如今，他把这些都一一实现了。</p>\n<p>“梦想还是要有的。万一实现了呢？”，对于我来说，梦想才刚刚开始。</p>"},{"layout":"post","title":"2014「百度杯」BCTF 游记","date":"2014-03-13T20:11:00.000Z","comments":1,"reward":true,"_content":"\n今年3月的9号和10号是bctf资格赛。\n\n在游玩了两天之后，来分享一下比赛中遇到的两道好玩的题目~\n\n##0x01 他乡遇故知\n[题目链接][8]\n\n这题非常有意思。\n\n<!-- more -->\n\n点击链接进去后是个[txt][7]，文本是Tupper和Mitnick的对话。\n\n开头几句话还挺正常，后来就变成了一串串数字，让人摸不清头脑。\n\n然而，在正常的话中，Tupper提到了他的paper（论文）。于是google搜，”tupper 论文“，居然找到了一篇Matrix67大神一篇07年的[博文][1]。\n\n博文内容大致意思是一个函数的图象里显示这个函数本身。其中，有个变量n引起了我的注意。思考：如果把txt对话中的数字替换为n，那函数的图像是什么样的呢？\n\n随后就是上wiki，google学术等搜这玩意儿。\n\n先是找到了一个javascript版的[实现方案][3]，于是下载到本地，改了改变量，把n替换成了txt中的数字串。居然显示出了字母！\n\n<img src=\"http://bcs.duapp.com/blogbuk/tupper1.jpg\"/>\n\n这个发现让我眼前一亮！\n\n于是尝试吧所有的数字都放进去看看结果，但是。。。\n\n<img src=\"http://bcs.duapp.com/blogbuk/tupper2.jpg\"/>\n\n后面比较关键的信息，被人动了手脚！\n\n后来，我才发现前面的数字串显示出的图像中的字母，并不能正确地释义，读不懂啊！\n\n所以我猜测估计这后面还有些信息没显示完。无奈这个javascript写得太乱。。我改了好久都改不出什么所以然。\n\n最后，终于wiki上找到了个“[塔珀自指公式][2]”，正好就是这个。\n\n在wiki页面的底部外部链接中，有一个这个公式的python版本实现。经过一番研究，发现这个python脚本可以把函数图像以字符形式输出到控制台！\n\n又是让我兴奋不已，在几番调试后终于显示出了完整的信息。\n\n以下是解读后的信息：\n\n    Tupper: LOL, I think they bastard hacks nothing about math.\n    Mitnick: It's not safe! You should use 61. 17 is too weak.\n    Tupper: Fine, then , here is your flag in 61.\n\n这之后的对话又是让人看不懂的了。\n\n不过结合他们对话的信息，以及wiki上的内容，可以想到Tupper是把函数中的17换成了61加密了Flag.\n\n于是改一下Python代码，把输出重定向到文件，再运行就能看到Flag了！\n\n（图比较长，就截取开头一点点好了。。）\n\n<img src=\"http://bcs.duapp.com/blogbuk/tupper3.jpg\"/>\n\n[点此查看本题代码][4]\n\n####0x02 地铁难挤\n\n[题目链接][9]\n\n这个题吸引我的原因是 题目描述中的那句充满信息学竞赛味道的“设计一个尽量少移动次数的方案”。\n\n此题分为两个部分。\n\n我先是nc了题目给出的 ip:port 之后，发现一来就要我求出一个X值，使得这个等式成立。\n\n<img src=\"http://bcs.duapp.com/blogbuk/Subway1.jpg\"/>\n\n等式中的两个字符串都是随机的，而且经过了SHA-1加密。\n\n然而X输出错误一次便会断开连接。\n\n显然不能对SHA-1下手，于是考虑爆破。\n\n于是我就写了个py脚本。由于没什么经验，我写了个单线程爆破的脚本，所以一开始成功率挺低的，大概是20次中有1次能够成功突破。\n\n[脚本点此可见][5]\n\n随后就是第二部分，出来了一个意义不明的游戏。。\n\n一来就是让你输入数字。\n\n习惯了ACM比赛题，所以遇到这种只有输入和输出，没有题目描述的题，而且每次尝试还有95%的高概率不能突破第一部分，我觉得很是蛋疼。。\n\n然而在经过了大量的尝试过后，加上主办方给出的提示，我终于搞懂了此题的意思。\n\n转换成ACM的题目风格大概是这样的：\n\n    字符串s 长度小于20，只包含'R' 'L' 和1个空格\n    如：RLRLR LLRLRL\n    求最少多少次操作使得R全部在空格左边，L全部在空格右边\n    如：RRRRR LLLLL\n    可以执行两种操作\n    1. 把空格左/右移一位\n    RLRLRL LRLRLL 左移一位==> RLRLRLL RLRLL\n    2. 把空格与 空格下标+2/空格下标-2 位置的字母交换\n    RLRLRL LRLRLL 与+2位的交换==> RLRLRLLR LRLL\n\n好嘛，搞懂题目之后，算法自然我最擅长的。\n\n分析一下，字符串长度小于20，于是字符串的种类很显然有$2^{20}*20$种，大概是$10^7$左右。\n\n如果使用bfs+记忆化判重，算法时间复杂度是O($10^7$)，不会超时（...至少在acm中不会）。\n\n于是我开始用python写。\n\n另外感到诧异的是，python写出来后，运行效率特别低。表现为一组数据跑很久都跑不出来（10秒以上），而只要在几秒之内没有输入，连接就会断开，于是只能重新来过。\n\n纠结了非常久，最后甚至想到什么多线程，什么分布式...\n\n后来，我才想到可能是python的执行效率导致得这个原因。于是我换成了ACM比赛中常用的java，又敲了一份。果然，这次运行则非常顺利，每组数据都跑得非常快！\n\n最后，调整了一下链接的输入输出，用java执行爆破，然后再用java来执行bfs记忆化，顺利拿到Flag。\n\n（由于赛后主办方关闭了链接，所以此题没有截图）\n\n[查看代码点击此处][6]\n\n\n[1]:http://www.matrix67.com/blog/archives/301\n[2]:http://zh.wikipedia.org/wiki/%E5%A1%94%E7%8F%80%E8%87%AA%E6%8C%87%E5%85%AC%E5%BC%8F\n[3]:http://web.aanet.com.au/superseed/ajmcrae/TupperPlot/TupperPlot.html\n[4]:https://github.com/plusplus7/BCTF/blob/master/Tupper.py\n[5]:https://github.com/plusplus7/BCTF/blob/master/Subway.py\n[6]:https://github.com/plusplus7/BCTF/blob/master/Subway.java\n[7]:http://bctf.cn/files/downloads/meeting-tupper_baaa58809f2a0435cb5f282ce4249fdf.txt\n[8]:http://bctf.cn/problems/6\n[9]:http://bctf.cn/problems/14\n","source":"_posts/2014百度杯 BCTF 游记.md","raw":"---\nlayout: post\ntitle: 2014「百度杯」BCTF 游记\ndate: 2014-3-14 04:11\ncomments: true\nreward: true\ntags:\n    - Security\n---\n\n今年3月的9号和10号是bctf资格赛。\n\n在游玩了两天之后，来分享一下比赛中遇到的两道好玩的题目~\n\n##0x01 他乡遇故知\n[题目链接][8]\n\n这题非常有意思。\n\n<!-- more -->\n\n点击链接进去后是个[txt][7]，文本是Tupper和Mitnick的对话。\n\n开头几句话还挺正常，后来就变成了一串串数字，让人摸不清头脑。\n\n然而，在正常的话中，Tupper提到了他的paper（论文）。于是google搜，”tupper 论文“，居然找到了一篇Matrix67大神一篇07年的[博文][1]。\n\n博文内容大致意思是一个函数的图象里显示这个函数本身。其中，有个变量n引起了我的注意。思考：如果把txt对话中的数字替换为n，那函数的图像是什么样的呢？\n\n随后就是上wiki，google学术等搜这玩意儿。\n\n先是找到了一个javascript版的[实现方案][3]，于是下载到本地，改了改变量，把n替换成了txt中的数字串。居然显示出了字母！\n\n<img src=\"http://bcs.duapp.com/blogbuk/tupper1.jpg\"/>\n\n这个发现让我眼前一亮！\n\n于是尝试吧所有的数字都放进去看看结果，但是。。。\n\n<img src=\"http://bcs.duapp.com/blogbuk/tupper2.jpg\"/>\n\n后面比较关键的信息，被人动了手脚！\n\n后来，我才发现前面的数字串显示出的图像中的字母，并不能正确地释义，读不懂啊！\n\n所以我猜测估计这后面还有些信息没显示完。无奈这个javascript写得太乱。。我改了好久都改不出什么所以然。\n\n最后，终于wiki上找到了个“[塔珀自指公式][2]”，正好就是这个。\n\n在wiki页面的底部外部链接中，有一个这个公式的python版本实现。经过一番研究，发现这个python脚本可以把函数图像以字符形式输出到控制台！\n\n又是让我兴奋不已，在几番调试后终于显示出了完整的信息。\n\n以下是解读后的信息：\n\n    Tupper: LOL, I think they bastard hacks nothing about math.\n    Mitnick: It's not safe! You should use 61. 17 is too weak.\n    Tupper: Fine, then , here is your flag in 61.\n\n这之后的对话又是让人看不懂的了。\n\n不过结合他们对话的信息，以及wiki上的内容，可以想到Tupper是把函数中的17换成了61加密了Flag.\n\n于是改一下Python代码，把输出重定向到文件，再运行就能看到Flag了！\n\n（图比较长，就截取开头一点点好了。。）\n\n<img src=\"http://bcs.duapp.com/blogbuk/tupper3.jpg\"/>\n\n[点此查看本题代码][4]\n\n####0x02 地铁难挤\n\n[题目链接][9]\n\n这个题吸引我的原因是 题目描述中的那句充满信息学竞赛味道的“设计一个尽量少移动次数的方案”。\n\n此题分为两个部分。\n\n我先是nc了题目给出的 ip:port 之后，发现一来就要我求出一个X值，使得这个等式成立。\n\n<img src=\"http://bcs.duapp.com/blogbuk/Subway1.jpg\"/>\n\n等式中的两个字符串都是随机的，而且经过了SHA-1加密。\n\n然而X输出错误一次便会断开连接。\n\n显然不能对SHA-1下手，于是考虑爆破。\n\n于是我就写了个py脚本。由于没什么经验，我写了个单线程爆破的脚本，所以一开始成功率挺低的，大概是20次中有1次能够成功突破。\n\n[脚本点此可见][5]\n\n随后就是第二部分，出来了一个意义不明的游戏。。\n\n一来就是让你输入数字。\n\n习惯了ACM比赛题，所以遇到这种只有输入和输出，没有题目描述的题，而且每次尝试还有95%的高概率不能突破第一部分，我觉得很是蛋疼。。\n\n然而在经过了大量的尝试过后，加上主办方给出的提示，我终于搞懂了此题的意思。\n\n转换成ACM的题目风格大概是这样的：\n\n    字符串s 长度小于20，只包含'R' 'L' 和1个空格\n    如：RLRLR LLRLRL\n    求最少多少次操作使得R全部在空格左边，L全部在空格右边\n    如：RRRRR LLLLL\n    可以执行两种操作\n    1. 把空格左/右移一位\n    RLRLRL LRLRLL 左移一位==> RLRLRLL RLRLL\n    2. 把空格与 空格下标+2/空格下标-2 位置的字母交换\n    RLRLRL LRLRLL 与+2位的交换==> RLRLRLLR LRLL\n\n好嘛，搞懂题目之后，算法自然我最擅长的。\n\n分析一下，字符串长度小于20，于是字符串的种类很显然有$2^{20}*20$种，大概是$10^7$左右。\n\n如果使用bfs+记忆化判重，算法时间复杂度是O($10^7$)，不会超时（...至少在acm中不会）。\n\n于是我开始用python写。\n\n另外感到诧异的是，python写出来后，运行效率特别低。表现为一组数据跑很久都跑不出来（10秒以上），而只要在几秒之内没有输入，连接就会断开，于是只能重新来过。\n\n纠结了非常久，最后甚至想到什么多线程，什么分布式...\n\n后来，我才想到可能是python的执行效率导致得这个原因。于是我换成了ACM比赛中常用的java，又敲了一份。果然，这次运行则非常顺利，每组数据都跑得非常快！\n\n最后，调整了一下链接的输入输出，用java执行爆破，然后再用java来执行bfs记忆化，顺利拿到Flag。\n\n（由于赛后主办方关闭了链接，所以此题没有截图）\n\n[查看代码点击此处][6]\n\n\n[1]:http://www.matrix67.com/blog/archives/301\n[2]:http://zh.wikipedia.org/wiki/%E5%A1%94%E7%8F%80%E8%87%AA%E6%8C%87%E5%85%AC%E5%BC%8F\n[3]:http://web.aanet.com.au/superseed/ajmcrae/TupperPlot/TupperPlot.html\n[4]:https://github.com/plusplus7/BCTF/blob/master/Tupper.py\n[5]:https://github.com/plusplus7/BCTF/blob/master/Subway.py\n[6]:https://github.com/plusplus7/BCTF/blob/master/Subway.java\n[7]:http://bctf.cn/files/downloads/meeting-tupper_baaa58809f2a0435cb5f282ce4249fdf.txt\n[8]:http://bctf.cn/problems/6\n[9]:http://bctf.cn/problems/14\n","slug":"2014百度杯 BCTF 游记","published":1,"updated":"2018-05-23T14:45:26.745Z","photos":[],"link":"","_id":"cjhj92bjo0002e0vfhdyek3q5","content":"<p>今年3月的9号和10号是bctf资格赛。</p>\n<p>在游玩了两天之后，来分享一下比赛中遇到的两道好玩的题目~</p>\n<p>##0x01 他乡遇故知<br><a href=\"http://bctf.cn/problems/6\" target=\"_blank\" rel=\"noopener\">题目链接</a></p>\n<p>这题非常有意思。</p>\n<a id=\"more\"></a>\n<p>点击链接进去后是个<a href=\"http://bctf.cn/files/downloads/meeting-tupper_baaa58809f2a0435cb5f282ce4249fdf.txt\" target=\"_blank\" rel=\"noopener\">txt</a>，文本是Tupper和Mitnick的对话。</p>\n<p>开头几句话还挺正常，后来就变成了一串串数字，让人摸不清头脑。</p>\n<p>然而，在正常的话中，Tupper提到了他的paper（论文）。于是google搜，”tupper 论文“，居然找到了一篇Matrix67大神一篇07年的<a href=\"http://www.matrix67.com/blog/archives/301\" target=\"_blank\" rel=\"noopener\">博文</a>。</p>\n<p>博文内容大致意思是一个函数的图象里显示这个函数本身。其中，有个变量n引起了我的注意。思考：如果把txt对话中的数字替换为n，那函数的图像是什么样的呢？</p>\n<p>随后就是上wiki，google学术等搜这玩意儿。</p>\n<p>先是找到了一个javascript版的<a href=\"http://web.aanet.com.au/superseed/ajmcrae/TupperPlot/TupperPlot.html\" target=\"_blank\" rel=\"noopener\">实现方案</a>，于是下载到本地，改了改变量，把n替换成了txt中的数字串。居然显示出了字母！</p>\n<p><img src=\"http://bcs.duapp.com/blogbuk/tupper1.jpg\"></p>\n<p>这个发现让我眼前一亮！</p>\n<p>于是尝试吧所有的数字都放进去看看结果，但是。。。</p>\n<p><img src=\"http://bcs.duapp.com/blogbuk/tupper2.jpg\"></p>\n<p>后面比较关键的信息，被人动了手脚！</p>\n<p>后来，我才发现前面的数字串显示出的图像中的字母，并不能正确地释义，读不懂啊！</p>\n<p>所以我猜测估计这后面还有些信息没显示完。无奈这个javascript写得太乱。。我改了好久都改不出什么所以然。</p>\n<p>最后，终于wiki上找到了个“<a href=\"http://zh.wikipedia.org/wiki/%E5%A1%94%E7%8F%80%E8%87%AA%E6%8C%87%E5%85%AC%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">塔珀自指公式</a>”，正好就是这个。</p>\n<p>在wiki页面的底部外部链接中，有一个这个公式的python版本实现。经过一番研究，发现这个python脚本可以把函数图像以字符形式输出到控制台！</p>\n<p>又是让我兴奋不已，在几番调试后终于显示出了完整的信息。</p>\n<p>以下是解读后的信息：</p>\n<pre><code>Tupper: LOL, I think they bastard hacks nothing about math.\nMitnick: It&apos;s not safe! You should use 61. 17 is too weak.\nTupper: Fine, then , here is your flag in 61.\n</code></pre><p>这之后的对话又是让人看不懂的了。</p>\n<p>不过结合他们对话的信息，以及wiki上的内容，可以想到Tupper是把函数中的17换成了61加密了Flag.</p>\n<p>于是改一下Python代码，把输出重定向到文件，再运行就能看到Flag了！</p>\n<p>（图比较长，就截取开头一点点好了。。）</p>\n<p><img src=\"http://bcs.duapp.com/blogbuk/tupper3.jpg\"></p>\n<p><a href=\"https://github.com/plusplus7/BCTF/blob/master/Tupper.py\" target=\"_blank\" rel=\"noopener\">点此查看本题代码</a></p>\n<p>####0x02 地铁难挤</p>\n<p><a href=\"http://bctf.cn/problems/14\" target=\"_blank\" rel=\"noopener\">题目链接</a></p>\n<p>这个题吸引我的原因是 题目描述中的那句充满信息学竞赛味道的“设计一个尽量少移动次数的方案”。</p>\n<p>此题分为两个部分。</p>\n<p>我先是nc了题目给出的 ip:port 之后，发现一来就要我求出一个X值，使得这个等式成立。</p>\n<p><img src=\"http://bcs.duapp.com/blogbuk/Subway1.jpg\"></p>\n<p>等式中的两个字符串都是随机的，而且经过了SHA-1加密。</p>\n<p>然而X输出错误一次便会断开连接。</p>\n<p>显然不能对SHA-1下手，于是考虑爆破。</p>\n<p>于是我就写了个py脚本。由于没什么经验，我写了个单线程爆破的脚本，所以一开始成功率挺低的，大概是20次中有1次能够成功突破。</p>\n<p><a href=\"https://github.com/plusplus7/BCTF/blob/master/Subway.py\" target=\"_blank\" rel=\"noopener\">脚本点此可见</a></p>\n<p>随后就是第二部分，出来了一个意义不明的游戏。。</p>\n<p>一来就是让你输入数字。</p>\n<p>习惯了ACM比赛题，所以遇到这种只有输入和输出，没有题目描述的题，而且每次尝试还有95%的高概率不能突破第一部分，我觉得很是蛋疼。。</p>\n<p>然而在经过了大量的尝试过后，加上主办方给出的提示，我终于搞懂了此题的意思。</p>\n<p>转换成ACM的题目风格大概是这样的：</p>\n<pre><code>字符串s 长度小于20，只包含&apos;R&apos; &apos;L&apos; 和1个空格\n如：RLRLR LLRLRL\n求最少多少次操作使得R全部在空格左边，L全部在空格右边\n如：RRRRR LLLLL\n可以执行两种操作\n1. 把空格左/右移一位\nRLRLRL LRLRLL 左移一位==&gt; RLRLRLL RLRLL\n2. 把空格与 空格下标+2/空格下标-2 位置的字母交换\nRLRLRL LRLRLL 与+2位的交换==&gt; RLRLRLLR LRLL\n</code></pre><p>好嘛，搞懂题目之后，算法自然我最擅长的。</p>\n<p>分析一下，字符串长度小于20，于是字符串的种类很显然有$2^{20}*20$种，大概是$10^7$左右。</p>\n<p>如果使用bfs+记忆化判重，算法时间复杂度是O($10^7$)，不会超时（…至少在acm中不会）。</p>\n<p>于是我开始用python写。</p>\n<p>另外感到诧异的是，python写出来后，运行效率特别低。表现为一组数据跑很久都跑不出来（10秒以上），而只要在几秒之内没有输入，连接就会断开，于是只能重新来过。</p>\n<p>纠结了非常久，最后甚至想到什么多线程，什么分布式…</p>\n<p>后来，我才想到可能是python的执行效率导致得这个原因。于是我换成了ACM比赛中常用的java，又敲了一份。果然，这次运行则非常顺利，每组数据都跑得非常快！</p>\n<p>最后，调整了一下链接的输入输出，用java执行爆破，然后再用java来执行bfs记忆化，顺利拿到Flag。</p>\n<p>（由于赛后主办方关闭了链接，所以此题没有截图）</p>\n<p><a href=\"https://github.com/plusplus7/BCTF/blob/master/Subway.java\" target=\"_blank\" rel=\"noopener\">查看代码点击此处</a></p>\n","site":{"data":{}},"excerpt":"<p>今年3月的9号和10号是bctf资格赛。</p>\n<p>在游玩了两天之后，来分享一下比赛中遇到的两道好玩的题目~</p>\n<p>##0x01 他乡遇故知<br><a href=\"http://bctf.cn/problems/6\" target=\"_blank\" rel=\"noopener\">题目链接</a></p>\n<p>这题非常有意思。</p>","more":"<p>点击链接进去后是个<a href=\"http://bctf.cn/files/downloads/meeting-tupper_baaa58809f2a0435cb5f282ce4249fdf.txt\" target=\"_blank\" rel=\"noopener\">txt</a>，文本是Tupper和Mitnick的对话。</p>\n<p>开头几句话还挺正常，后来就变成了一串串数字，让人摸不清头脑。</p>\n<p>然而，在正常的话中，Tupper提到了他的paper（论文）。于是google搜，”tupper 论文“，居然找到了一篇Matrix67大神一篇07年的<a href=\"http://www.matrix67.com/blog/archives/301\" target=\"_blank\" rel=\"noopener\">博文</a>。</p>\n<p>博文内容大致意思是一个函数的图象里显示这个函数本身。其中，有个变量n引起了我的注意。思考：如果把txt对话中的数字替换为n，那函数的图像是什么样的呢？</p>\n<p>随后就是上wiki，google学术等搜这玩意儿。</p>\n<p>先是找到了一个javascript版的<a href=\"http://web.aanet.com.au/superseed/ajmcrae/TupperPlot/TupperPlot.html\" target=\"_blank\" rel=\"noopener\">实现方案</a>，于是下载到本地，改了改变量，把n替换成了txt中的数字串。居然显示出了字母！</p>\n<p><img src=\"http://bcs.duapp.com/blogbuk/tupper1.jpg\"></p>\n<p>这个发现让我眼前一亮！</p>\n<p>于是尝试吧所有的数字都放进去看看结果，但是。。。</p>\n<p><img src=\"http://bcs.duapp.com/blogbuk/tupper2.jpg\"></p>\n<p>后面比较关键的信息，被人动了手脚！</p>\n<p>后来，我才发现前面的数字串显示出的图像中的字母，并不能正确地释义，读不懂啊！</p>\n<p>所以我猜测估计这后面还有些信息没显示完。无奈这个javascript写得太乱。。我改了好久都改不出什么所以然。</p>\n<p>最后，终于wiki上找到了个“<a href=\"http://zh.wikipedia.org/wiki/%E5%A1%94%E7%8F%80%E8%87%AA%E6%8C%87%E5%85%AC%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">塔珀自指公式</a>”，正好就是这个。</p>\n<p>在wiki页面的底部外部链接中，有一个这个公式的python版本实现。经过一番研究，发现这个python脚本可以把函数图像以字符形式输出到控制台！</p>\n<p>又是让我兴奋不已，在几番调试后终于显示出了完整的信息。</p>\n<p>以下是解读后的信息：</p>\n<pre><code>Tupper: LOL, I think they bastard hacks nothing about math.\nMitnick: It&apos;s not safe! You should use 61. 17 is too weak.\nTupper: Fine, then , here is your flag in 61.\n</code></pre><p>这之后的对话又是让人看不懂的了。</p>\n<p>不过结合他们对话的信息，以及wiki上的内容，可以想到Tupper是把函数中的17换成了61加密了Flag.</p>\n<p>于是改一下Python代码，把输出重定向到文件，再运行就能看到Flag了！</p>\n<p>（图比较长，就截取开头一点点好了。。）</p>\n<p><img src=\"http://bcs.duapp.com/blogbuk/tupper3.jpg\"></p>\n<p><a href=\"https://github.com/plusplus7/BCTF/blob/master/Tupper.py\" target=\"_blank\" rel=\"noopener\">点此查看本题代码</a></p>\n<p>####0x02 地铁难挤</p>\n<p><a href=\"http://bctf.cn/problems/14\" target=\"_blank\" rel=\"noopener\">题目链接</a></p>\n<p>这个题吸引我的原因是 题目描述中的那句充满信息学竞赛味道的“设计一个尽量少移动次数的方案”。</p>\n<p>此题分为两个部分。</p>\n<p>我先是nc了题目给出的 ip:port 之后，发现一来就要我求出一个X值，使得这个等式成立。</p>\n<p><img src=\"http://bcs.duapp.com/blogbuk/Subway1.jpg\"></p>\n<p>等式中的两个字符串都是随机的，而且经过了SHA-1加密。</p>\n<p>然而X输出错误一次便会断开连接。</p>\n<p>显然不能对SHA-1下手，于是考虑爆破。</p>\n<p>于是我就写了个py脚本。由于没什么经验，我写了个单线程爆破的脚本，所以一开始成功率挺低的，大概是20次中有1次能够成功突破。</p>\n<p><a href=\"https://github.com/plusplus7/BCTF/blob/master/Subway.py\" target=\"_blank\" rel=\"noopener\">脚本点此可见</a></p>\n<p>随后就是第二部分，出来了一个意义不明的游戏。。</p>\n<p>一来就是让你输入数字。</p>\n<p>习惯了ACM比赛题，所以遇到这种只有输入和输出，没有题目描述的题，而且每次尝试还有95%的高概率不能突破第一部分，我觉得很是蛋疼。。</p>\n<p>然而在经过了大量的尝试过后，加上主办方给出的提示，我终于搞懂了此题的意思。</p>\n<p>转换成ACM的题目风格大概是这样的：</p>\n<pre><code>字符串s 长度小于20，只包含&apos;R&apos; &apos;L&apos; 和1个空格\n如：RLRLR LLRLRL\n求最少多少次操作使得R全部在空格左边，L全部在空格右边\n如：RRRRR LLLLL\n可以执行两种操作\n1. 把空格左/右移一位\nRLRLRL LRLRLL 左移一位==&gt; RLRLRLL RLRLL\n2. 把空格与 空格下标+2/空格下标-2 位置的字母交换\nRLRLRL LRLRLL 与+2位的交换==&gt; RLRLRLLR LRLL\n</code></pre><p>好嘛，搞懂题目之后，算法自然我最擅长的。</p>\n<p>分析一下，字符串长度小于20，于是字符串的种类很显然有$2^{20}*20$种，大概是$10^7$左右。</p>\n<p>如果使用bfs+记忆化判重，算法时间复杂度是O($10^7$)，不会超时（…至少在acm中不会）。</p>\n<p>于是我开始用python写。</p>\n<p>另外感到诧异的是，python写出来后，运行效率特别低。表现为一组数据跑很久都跑不出来（10秒以上），而只要在几秒之内没有输入，连接就会断开，于是只能重新来过。</p>\n<p>纠结了非常久，最后甚至想到什么多线程，什么分布式…</p>\n<p>后来，我才想到可能是python的执行效率导致得这个原因。于是我换成了ACM比赛中常用的java，又敲了一份。果然，这次运行则非常顺利，每组数据都跑得非常快！</p>\n<p>最后，调整了一下链接的输入输出，用java执行爆破，然后再用java来执行bfs记忆化，顺利拿到Flag。</p>\n<p>（由于赛后主办方关闭了链接，所以此题没有截图）</p>\n<p><a href=\"https://github.com/plusplus7/BCTF/blob/master/Subway.java\" target=\"_blank\" rel=\"noopener\">查看代码点击此处</a></p>"},{"layout":"post","title":"2015年，初来乍到，请多指教","date":"2015-12-31T15:22:00.000Z","comments":1,"reward":true,"_content":"\n今天是2015年12月31日，赶在这辞旧迎新之际，总结一下今年发生的种种小事。\n\n先从去年的总结说起吧。去年的总结题目叫《[2014年，梦想还是要有的。万一实现了呢...](http://plusplus7.com/blog/post/summary2014)》，而今年发生的事情和当时想的基本差不多。2015年是我走出校园，走进社会的第一年，所以对于我来说的话，去掉了在学校里所获得的各种光环，和大多数普通的应届生一样，梦想真的是刚刚开始。\n\n<!-- more -->\n\n记得在知乎看过一篇问答，问题是《离开学校，参加工作是什么样的体验》。有个答主洋洋洒洒写了一篇回答，表达参加工作有多么多么好，blablabla...“这感觉是太特么爽了”，这句话给我印象特别深刻。看完这个回答之后，我便默默地给他点了赞。在学校和在工作，其实对于个人的生活习惯来说可能改变并不大。在学校，正常朝八晚六，偶尔深夜复习准备考试，可能会熬一下夜；在工作，朝九晚七，偶尔加个班调个bug。而周末都是会有大片的业余时间用来做自己想做的事情。于是，2015年年初我给自己订了许多目标，希望在业余时间里完成他们，到现在刚好是2015年的年末，回顾起来这些目标来，大体上都完成了。所以，这篇2015年的总结大体上就是回顾这些目标的完成状态，以及后续的新目标。\n\n首先第一个应该就是《[一个业余游戏解说的自我修养(一)](http://plusplus7.com/game/post/video_game_anchor_self_promotion_one)》里面提到过的做视频了吧。目前看起来，一个星期做一部视频的目标基本上算是完成指标了。和别人一起分享游戏的乐趣，推荐好玩的游戏，是我做游戏视频的初衷。目前看起来，一个星期做一部视频的目标基本上算是完成指标了。和别人一起分享游戏的乐趣，推荐好玩的游戏，是我做游戏视频的初衷。然而除了做视频之外，我还开通了斗鱼TV的直播房间。周末会不定期直播一些游戏实况，这个姑且算是游戏解说这个目标的bonus吧。我给自己贴的标签是Old-school RPG fan，其实就是想表达我最喜欢的游戏类型是中世纪魔幻风格，老式传统的那种的角色扮演游戏。当然除此之外，我也很喜欢玩动作游戏，虽然操作不咋地...我做的视频呢，也基本是跟着我的喜好来的，于是看起来我做的游戏视频都是偏冷门的，无人问津的那种......之前也有朋友跟我提过让我做一些比较火的游戏视频来拉一拉人气，但是我觉得这个和我做视频的初衷有点不一样了。新的一年，我希望我能继续坚持每周出视频，能够把游戏直播的时间稳定下来。\n\n第二件比较重要的事情，应该就是毕业了吧。大学四年，其实说短不短，说长不长。本来以为会无比复杂的毕业过程，结果也并没有耽误太多事儿，我甚至在还没毕业的情况下跑到土耳其玩了一趟，中途还让同学帮我办毕业手续囧...这里也要特别感谢一下森帅，大志，赞赞三个靠谱的小伙伴。土耳其的毕业旅行，算是见识了一下外国的月亮，达成了单人出国旅游的成就～最后回国在机场还意外地遇到目前在香港念书的高中同学，真是巧。\n\n唉，本来准备把毕业和毕业旅行拆成两段来写的...但是我有点不知道该写啥了，于是就合成一段了哈。最后用现在比较火的新年愿望体来结尾吧。\n\n新的一年，我希望能制作更多有趣的高质量的解说视频，这个算是去年目标的后续；希望能坚持参加CodeForces，TopCoder等编程竞赛，理由和我的GitHub项目[solutions](https://github.com/plusplus7/solutions)的立项目标是一致的，坚持学习，不进则退；希望能坚持锻炼，能够再瘦10斤，理由不解释...\n\n好，那么今天就先写到这儿吧，新的一年也希望大家过得开心，平平安安。\n","source":"_posts/2015年，初来乍到，请多指教.md","raw":"---\nlayout: post\ntitle: 2015年，初来乍到，请多指教\ndate: 2015-12-31 23:22\ncomments: true\nreward: true\ntags:\n    - Life\n---\n\n今天是2015年12月31日，赶在这辞旧迎新之际，总结一下今年发生的种种小事。\n\n先从去年的总结说起吧。去年的总结题目叫《[2014年，梦想还是要有的。万一实现了呢...](http://plusplus7.com/blog/post/summary2014)》，而今年发生的事情和当时想的基本差不多。2015年是我走出校园，走进社会的第一年，所以对于我来说的话，去掉了在学校里所获得的各种光环，和大多数普通的应届生一样，梦想真的是刚刚开始。\n\n<!-- more -->\n\n记得在知乎看过一篇问答，问题是《离开学校，参加工作是什么样的体验》。有个答主洋洋洒洒写了一篇回答，表达参加工作有多么多么好，blablabla...“这感觉是太特么爽了”，这句话给我印象特别深刻。看完这个回答之后，我便默默地给他点了赞。在学校和在工作，其实对于个人的生活习惯来说可能改变并不大。在学校，正常朝八晚六，偶尔深夜复习准备考试，可能会熬一下夜；在工作，朝九晚七，偶尔加个班调个bug。而周末都是会有大片的业余时间用来做自己想做的事情。于是，2015年年初我给自己订了许多目标，希望在业余时间里完成他们，到现在刚好是2015年的年末，回顾起来这些目标来，大体上都完成了。所以，这篇2015年的总结大体上就是回顾这些目标的完成状态，以及后续的新目标。\n\n首先第一个应该就是《[一个业余游戏解说的自我修养(一)](http://plusplus7.com/game/post/video_game_anchor_self_promotion_one)》里面提到过的做视频了吧。目前看起来，一个星期做一部视频的目标基本上算是完成指标了。和别人一起分享游戏的乐趣，推荐好玩的游戏，是我做游戏视频的初衷。目前看起来，一个星期做一部视频的目标基本上算是完成指标了。和别人一起分享游戏的乐趣，推荐好玩的游戏，是我做游戏视频的初衷。然而除了做视频之外，我还开通了斗鱼TV的直播房间。周末会不定期直播一些游戏实况，这个姑且算是游戏解说这个目标的bonus吧。我给自己贴的标签是Old-school RPG fan，其实就是想表达我最喜欢的游戏类型是中世纪魔幻风格，老式传统的那种的角色扮演游戏。当然除此之外，我也很喜欢玩动作游戏，虽然操作不咋地...我做的视频呢，也基本是跟着我的喜好来的，于是看起来我做的游戏视频都是偏冷门的，无人问津的那种......之前也有朋友跟我提过让我做一些比较火的游戏视频来拉一拉人气，但是我觉得这个和我做视频的初衷有点不一样了。新的一年，我希望我能继续坚持每周出视频，能够把游戏直播的时间稳定下来。\n\n第二件比较重要的事情，应该就是毕业了吧。大学四年，其实说短不短，说长不长。本来以为会无比复杂的毕业过程，结果也并没有耽误太多事儿，我甚至在还没毕业的情况下跑到土耳其玩了一趟，中途还让同学帮我办毕业手续囧...这里也要特别感谢一下森帅，大志，赞赞三个靠谱的小伙伴。土耳其的毕业旅行，算是见识了一下外国的月亮，达成了单人出国旅游的成就～最后回国在机场还意外地遇到目前在香港念书的高中同学，真是巧。\n\n唉，本来准备把毕业和毕业旅行拆成两段来写的...但是我有点不知道该写啥了，于是就合成一段了哈。最后用现在比较火的新年愿望体来结尾吧。\n\n新的一年，我希望能制作更多有趣的高质量的解说视频，这个算是去年目标的后续；希望能坚持参加CodeForces，TopCoder等编程竞赛，理由和我的GitHub项目[solutions](https://github.com/plusplus7/solutions)的立项目标是一致的，坚持学习，不进则退；希望能坚持锻炼，能够再瘦10斤，理由不解释...\n\n好，那么今天就先写到这儿吧，新的一年也希望大家过得开心，平平安安。\n","slug":"2015年，初来乍到，请多指教","published":1,"updated":"2018-05-23T14:45:26.775Z","photos":[],"link":"","_id":"cjhj92bk80005e0vfwxuxanqi","content":"<p>今天是2015年12月31日，赶在这辞旧迎新之际，总结一下今年发生的种种小事。</p>\n<p>先从去年的总结说起吧。去年的总结题目叫《<a href=\"http://plusplus7.com/blog/post/summary2014\">2014年，梦想还是要有的。万一实现了呢…</a>》，而今年发生的事情和当时想的基本差不多。2015年是我走出校园，走进社会的第一年，所以对于我来说的话，去掉了在学校里所获得的各种光环，和大多数普通的应届生一样，梦想真的是刚刚开始。</p>\n<a id=\"more\"></a>\n<p>记得在知乎看过一篇问答，问题是《离开学校，参加工作是什么样的体验》。有个答主洋洋洒洒写了一篇回答，表达参加工作有多么多么好，blablabla…“这感觉是太特么爽了”，这句话给我印象特别深刻。看完这个回答之后，我便默默地给他点了赞。在学校和在工作，其实对于个人的生活习惯来说可能改变并不大。在学校，正常朝八晚六，偶尔深夜复习准备考试，可能会熬一下夜；在工作，朝九晚七，偶尔加个班调个bug。而周末都是会有大片的业余时间用来做自己想做的事情。于是，2015年年初我给自己订了许多目标，希望在业余时间里完成他们，到现在刚好是2015年的年末，回顾起来这些目标来，大体上都完成了。所以，这篇2015年的总结大体上就是回顾这些目标的完成状态，以及后续的新目标。</p>\n<p>首先第一个应该就是《<a href=\"http://plusplus7.com/game/post/video_game_anchor_self_promotion_one\">一个业余游戏解说的自我修养(一)</a>》里面提到过的做视频了吧。目前看起来，一个星期做一部视频的目标基本上算是完成指标了。和别人一起分享游戏的乐趣，推荐好玩的游戏，是我做游戏视频的初衷。目前看起来，一个星期做一部视频的目标基本上算是完成指标了。和别人一起分享游戏的乐趣，推荐好玩的游戏，是我做游戏视频的初衷。然而除了做视频之外，我还开通了斗鱼TV的直播房间。周末会不定期直播一些游戏实况，这个姑且算是游戏解说这个目标的bonus吧。我给自己贴的标签是Old-school RPG fan，其实就是想表达我最喜欢的游戏类型是中世纪魔幻风格，老式传统的那种的角色扮演游戏。当然除此之外，我也很喜欢玩动作游戏，虽然操作不咋地…我做的视频呢，也基本是跟着我的喜好来的，于是看起来我做的游戏视频都是偏冷门的，无人问津的那种……之前也有朋友跟我提过让我做一些比较火的游戏视频来拉一拉人气，但是我觉得这个和我做视频的初衷有点不一样了。新的一年，我希望我能继续坚持每周出视频，能够把游戏直播的时间稳定下来。</p>\n<p>第二件比较重要的事情，应该就是毕业了吧。大学四年，其实说短不短，说长不长。本来以为会无比复杂的毕业过程，结果也并没有耽误太多事儿，我甚至在还没毕业的情况下跑到土耳其玩了一趟，中途还让同学帮我办毕业手续囧…这里也要特别感谢一下森帅，大志，赞赞三个靠谱的小伙伴。土耳其的毕业旅行，算是见识了一下外国的月亮，达成了单人出国旅游的成就～最后回国在机场还意外地遇到目前在香港念书的高中同学，真是巧。</p>\n<p>唉，本来准备把毕业和毕业旅行拆成两段来写的…但是我有点不知道该写啥了，于是就合成一段了哈。最后用现在比较火的新年愿望体来结尾吧。</p>\n<p>新的一年，我希望能制作更多有趣的高质量的解说视频，这个算是去年目标的后续；希望能坚持参加CodeForces，TopCoder等编程竞赛，理由和我的GitHub项目<a href=\"https://github.com/plusplus7/solutions\" target=\"_blank\" rel=\"noopener\">solutions</a>的立项目标是一致的，坚持学习，不进则退；希望能坚持锻炼，能够再瘦10斤，理由不解释…</p>\n<p>好，那么今天就先写到这儿吧，新的一年也希望大家过得开心，平平安安。</p>\n","site":{"data":{}},"excerpt":"<p>今天是2015年12月31日，赶在这辞旧迎新之际，总结一下今年发生的种种小事。</p>\n<p>先从去年的总结说起吧。去年的总结题目叫《<a href=\"http://plusplus7.com/blog/post/summary2014\">2014年，梦想还是要有的。万一实现了呢…</a>》，而今年发生的事情和当时想的基本差不多。2015年是我走出校园，走进社会的第一年，所以对于我来说的话，去掉了在学校里所获得的各种光环，和大多数普通的应届生一样，梦想真的是刚刚开始。</p>","more":"<p>记得在知乎看过一篇问答，问题是《离开学校，参加工作是什么样的体验》。有个答主洋洋洒洒写了一篇回答，表达参加工作有多么多么好，blablabla…“这感觉是太特么爽了”，这句话给我印象特别深刻。看完这个回答之后，我便默默地给他点了赞。在学校和在工作，其实对于个人的生活习惯来说可能改变并不大。在学校，正常朝八晚六，偶尔深夜复习准备考试，可能会熬一下夜；在工作，朝九晚七，偶尔加个班调个bug。而周末都是会有大片的业余时间用来做自己想做的事情。于是，2015年年初我给自己订了许多目标，希望在业余时间里完成他们，到现在刚好是2015年的年末，回顾起来这些目标来，大体上都完成了。所以，这篇2015年的总结大体上就是回顾这些目标的完成状态，以及后续的新目标。</p>\n<p>首先第一个应该就是《<a href=\"http://plusplus7.com/game/post/video_game_anchor_self_promotion_one\">一个业余游戏解说的自我修养(一)</a>》里面提到过的做视频了吧。目前看起来，一个星期做一部视频的目标基本上算是完成指标了。和别人一起分享游戏的乐趣，推荐好玩的游戏，是我做游戏视频的初衷。目前看起来，一个星期做一部视频的目标基本上算是完成指标了。和别人一起分享游戏的乐趣，推荐好玩的游戏，是我做游戏视频的初衷。然而除了做视频之外，我还开通了斗鱼TV的直播房间。周末会不定期直播一些游戏实况，这个姑且算是游戏解说这个目标的bonus吧。我给自己贴的标签是Old-school RPG fan，其实就是想表达我最喜欢的游戏类型是中世纪魔幻风格，老式传统的那种的角色扮演游戏。当然除此之外，我也很喜欢玩动作游戏，虽然操作不咋地…我做的视频呢，也基本是跟着我的喜好来的，于是看起来我做的游戏视频都是偏冷门的，无人问津的那种……之前也有朋友跟我提过让我做一些比较火的游戏视频来拉一拉人气，但是我觉得这个和我做视频的初衷有点不一样了。新的一年，我希望我能继续坚持每周出视频，能够把游戏直播的时间稳定下来。</p>\n<p>第二件比较重要的事情，应该就是毕业了吧。大学四年，其实说短不短，说长不长。本来以为会无比复杂的毕业过程，结果也并没有耽误太多事儿，我甚至在还没毕业的情况下跑到土耳其玩了一趟，中途还让同学帮我办毕业手续囧…这里也要特别感谢一下森帅，大志，赞赞三个靠谱的小伙伴。土耳其的毕业旅行，算是见识了一下外国的月亮，达成了单人出国旅游的成就～最后回国在机场还意外地遇到目前在香港念书的高中同学，真是巧。</p>\n<p>唉，本来准备把毕业和毕业旅行拆成两段来写的…但是我有点不知道该写啥了，于是就合成一段了哈。最后用现在比较火的新年愿望体来结尾吧。</p>\n<p>新的一年，我希望能制作更多有趣的高质量的解说视频，这个算是去年目标的后续；希望能坚持参加CodeForces，TopCoder等编程竞赛，理由和我的GitHub项目<a href=\"https://github.com/plusplus7/solutions\" target=\"_blank\" rel=\"noopener\">solutions</a>的立项目标是一致的，坚持学习，不进则退；希望能坚持锻炼，能够再瘦10斤，理由不解释…</p>\n<p>好，那么今天就先写到这儿吧，新的一年也希望大家过得开心，平平安安。</p>"},{"layout":"post","title":"Adrian von Ziegler","date":"2018-02-25T11:47:00.000Z","comments":1,"reward":true,"_content":"\n哈喽大家新年好！\n\n今天是中国农历戊戌年正月初十，是过年节假日过后的第一个周末。相信大家多多少少有一些节后综合征，想利用这个周末好好调整一下吧。所以呢，今天就给大家带来一篇音乐推荐的博文。\n\n我平时非常喜欢听音乐。做事情的时候，听一些像Yanni，Enya为代表的新世纪（New Age），可以屏蔽掉外界干扰，激发想象力；玩游戏的时候，听听金属（Metal）音乐，让自己处于一个比较兴奋的状态；闲着没事的时候，听听中古民谣，仿佛自己又回到了那个黑暗混沌的时代。\n\n<!-- more -->\n\n大家平时听歌的时候，应该也会时不时遇到歌荒（没有新歌听，旧的歌翻来覆去听腻了）。我也经常遇到过这种时候，所以之后，每次找到一个新的热爱的歌手或者歌曲作者，都会非常地兴奋！\n\n今天的这篇博文，是想要分享一位我最近发现的瑞士作曲家（Composer）-- [Adrian von Ziegler](http://adrianvonziegler.bandcamp.com/) 。我是最近在外网上发现了这位作曲家，翻阅了一些资料，听了很多他创作的音乐，然后迅速变成了他的粉丝。\n\nAdrian von Ziegler是一位来自瑞士苏黎世的年轻作曲家（Composer），截止到2018年2月28日，他的Youtube频道已经获得了超过710,000粉丝（subscribers）。他创作的音乐大多数都是没有歌词的纯音乐，他曾经在一次访谈中说到，作为一个内向而不善于表达的人，音乐是他用来表达内心情感的重要方式。他觉得人们听到一段音乐而产生的联想都是因人而异的，然而歌词总会表达一些具象化的情感，会限制人们的想象。所以到目前为止，他希望他的音乐是没有歌词的纯音乐。他非常内向，在镜头前非常羞涩，想要更多的了解他，可以通过[这几部访谈视频](https://www.youtube.com/watch?v=hH7ietk_pvM) 了解到他的一些想法。\n\n打开他的Youtube频道，可以看到他的作品风格多样。根据他的Facebook主页介绍，他主要集中精力于凯尔特音乐（Celtic music），抒情音乐（Emotional music），黑暗另类音乐（Dark alternative music），世界音乐（World music），金属乐（Metal music）以及电影音乐（Film music）等。\n\n\n\n### 哥特金属《The Sylvans Path》\n\n<img src=\"https://f4.bcbits.com/img/a2762884055_16.jpg\" width=\"400px\" height=\"400px\" />\n\n我作为一个金属迷，第一次听到他的音乐其实应该是几年前，我在网上闲逛时听到的这一首《The Sylvans Path》。\n\n这首歌一开始便吸引住了我，后面的金属部分带来了极大的震撼，仿佛自己置身于一片幽暗的树林，身边的树精调皮地把我导向一条更加幽暗的道路。\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=2184550&auto=0&height=66\"></iframe>\n\n《The Sylvans Path》来自2010年发布的专辑《Requiem》，其中糅合了凯尔特风格，金属以及管弦乐，同时也是Adrian首次尝试此类风格的歌曲。在网易云音乐的热门排行中，这首曲名列第一。\n\n\n\n### 凯尔特灵魂《Wolf Blood》\n\n<img src=\"https://qiniu.plusplus7.com/AZ-wolfblood.png-fullpercent\" width=\"640px\" height=\"420px\" />\n\n狼在凯尔特文化中是月亮与丰收女神Cerridwen的守护者，同时也是守护，礼仪，忠诚和勇气的象征。这首《Wolf Blood》表达了凯尔特文化中对狼的敬仰之情。\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=26466977&auto=0&height=66\"></iframe>\n\n《Wolf Blood》来自2013年发布的专辑《Feather and Skull》，是作者第一次对该题材进行的尝试。\n\n\n\n### 黑暗史诗《The Sealed Kingdom》\n\n<img src=\"https://qiniu.plusplus7.com/AZ-thesealedkindom.jpg-fullpercent\" width=\"640px\" height=\"420px\" />\n\n接下来这首《The Sealed Kingdom》是我个人非常喜欢的一首黑暗系音乐（Dark Music）。开场是阴冷肃穆的主旋律，配上狼的哀嚎，把气氛渲染得淋漓尽致，仿佛自己便是那个拿着火把的冒险者。随着画面的展开，弦乐的进入，高潮部分引领听者进入这座（冰）封住着王国，来到残破的城堡前，感受过去的辉煌以及当下的苍凉。\n\n<embed src=\"http://www.xiami.com/widget/0_1773682711/singlePlayer.swf\" type=\"application/x-shockwave-flash\" width=\"257\" height=\"33\" wmode=\"transparent\"></embed>\n链接：[《The Sealed Kingdom》](http://www.xiami.com/song/1773682711)\n\nAdrian von Ziegler的Dark Music很有特色。每一首曲子都非常好听，非常有韵味，很值得一听。\n\n有兴趣可以试试这个2小时的Dark Music合集: [https://youtu.be/mIrt5MkGpy0](https://youtu.be/mIrt5MkGpy0)。（转自Youtube，需要梯子）\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/mIrt5MkGpy0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n","source":"_posts/Adrian_von_Ziegler.md","raw":"---\nlayout: post\ntitle: Adrian von Ziegler\ndate: 2018-02-25 19:47\ncomments: true\nreward: true\ntags:\n    - Music\n---\n\n哈喽大家新年好！\n\n今天是中国农历戊戌年正月初十，是过年节假日过后的第一个周末。相信大家多多少少有一些节后综合征，想利用这个周末好好调整一下吧。所以呢，今天就给大家带来一篇音乐推荐的博文。\n\n我平时非常喜欢听音乐。做事情的时候，听一些像Yanni，Enya为代表的新世纪（New Age），可以屏蔽掉外界干扰，激发想象力；玩游戏的时候，听听金属（Metal）音乐，让自己处于一个比较兴奋的状态；闲着没事的时候，听听中古民谣，仿佛自己又回到了那个黑暗混沌的时代。\n\n<!-- more -->\n\n大家平时听歌的时候，应该也会时不时遇到歌荒（没有新歌听，旧的歌翻来覆去听腻了）。我也经常遇到过这种时候，所以之后，每次找到一个新的热爱的歌手或者歌曲作者，都会非常地兴奋！\n\n今天的这篇博文，是想要分享一位我最近发现的瑞士作曲家（Composer）-- [Adrian von Ziegler](http://adrianvonziegler.bandcamp.com/) 。我是最近在外网上发现了这位作曲家，翻阅了一些资料，听了很多他创作的音乐，然后迅速变成了他的粉丝。\n\nAdrian von Ziegler是一位来自瑞士苏黎世的年轻作曲家（Composer），截止到2018年2月28日，他的Youtube频道已经获得了超过710,000粉丝（subscribers）。他创作的音乐大多数都是没有歌词的纯音乐，他曾经在一次访谈中说到，作为一个内向而不善于表达的人，音乐是他用来表达内心情感的重要方式。他觉得人们听到一段音乐而产生的联想都是因人而异的，然而歌词总会表达一些具象化的情感，会限制人们的想象。所以到目前为止，他希望他的音乐是没有歌词的纯音乐。他非常内向，在镜头前非常羞涩，想要更多的了解他，可以通过[这几部访谈视频](https://www.youtube.com/watch?v=hH7ietk_pvM) 了解到他的一些想法。\n\n打开他的Youtube频道，可以看到他的作品风格多样。根据他的Facebook主页介绍，他主要集中精力于凯尔特音乐（Celtic music），抒情音乐（Emotional music），黑暗另类音乐（Dark alternative music），世界音乐（World music），金属乐（Metal music）以及电影音乐（Film music）等。\n\n\n\n### 哥特金属《The Sylvans Path》\n\n<img src=\"https://f4.bcbits.com/img/a2762884055_16.jpg\" width=\"400px\" height=\"400px\" />\n\n我作为一个金属迷，第一次听到他的音乐其实应该是几年前，我在网上闲逛时听到的这一首《The Sylvans Path》。\n\n这首歌一开始便吸引住了我，后面的金属部分带来了极大的震撼，仿佛自己置身于一片幽暗的树林，身边的树精调皮地把我导向一条更加幽暗的道路。\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=2184550&auto=0&height=66\"></iframe>\n\n《The Sylvans Path》来自2010年发布的专辑《Requiem》，其中糅合了凯尔特风格，金属以及管弦乐，同时也是Adrian首次尝试此类风格的歌曲。在网易云音乐的热门排行中，这首曲名列第一。\n\n\n\n### 凯尔特灵魂《Wolf Blood》\n\n<img src=\"https://qiniu.plusplus7.com/AZ-wolfblood.png-fullpercent\" width=\"640px\" height=\"420px\" />\n\n狼在凯尔特文化中是月亮与丰收女神Cerridwen的守护者，同时也是守护，礼仪，忠诚和勇气的象征。这首《Wolf Blood》表达了凯尔特文化中对狼的敬仰之情。\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=26466977&auto=0&height=66\"></iframe>\n\n《Wolf Blood》来自2013年发布的专辑《Feather and Skull》，是作者第一次对该题材进行的尝试。\n\n\n\n### 黑暗史诗《The Sealed Kingdom》\n\n<img src=\"https://qiniu.plusplus7.com/AZ-thesealedkindom.jpg-fullpercent\" width=\"640px\" height=\"420px\" />\n\n接下来这首《The Sealed Kingdom》是我个人非常喜欢的一首黑暗系音乐（Dark Music）。开场是阴冷肃穆的主旋律，配上狼的哀嚎，把气氛渲染得淋漓尽致，仿佛自己便是那个拿着火把的冒险者。随着画面的展开，弦乐的进入，高潮部分引领听者进入这座（冰）封住着王国，来到残破的城堡前，感受过去的辉煌以及当下的苍凉。\n\n<embed src=\"http://www.xiami.com/widget/0_1773682711/singlePlayer.swf\" type=\"application/x-shockwave-flash\" width=\"257\" height=\"33\" wmode=\"transparent\"></embed>\n链接：[《The Sealed Kingdom》](http://www.xiami.com/song/1773682711)\n\nAdrian von Ziegler的Dark Music很有特色。每一首曲子都非常好听，非常有韵味，很值得一听。\n\n有兴趣可以试试这个2小时的Dark Music合集: [https://youtu.be/mIrt5MkGpy0](https://youtu.be/mIrt5MkGpy0)。（转自Youtube，需要梯子）\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/mIrt5MkGpy0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n","slug":"Adrian_von_Ziegler","published":1,"updated":"2019-01-14T17:09:22.709Z","_id":"cjhj92bkj0007e0vf68f234vj","photos":[],"link":"","content":"<p>哈喽大家新年好！</p>\n<p>今天是中国农历戊戌年正月初十，是过年节假日过后的第一个周末。相信大家多多少少有一些节后综合征，想利用这个周末好好调整一下吧。所以呢，今天就给大家带来一篇音乐推荐的博文。</p>\n<p>我平时非常喜欢听音乐。做事情的时候，听一些像Yanni，Enya为代表的新世纪（New Age），可以屏蔽掉外界干扰，激发想象力；玩游戏的时候，听听金属（Metal）音乐，让自己处于一个比较兴奋的状态；闲着没事的时候，听听中古民谣，仿佛自己又回到了那个黑暗混沌的时代。</p>\n<a id=\"more\"></a>\n<p>大家平时听歌的时候，应该也会时不时遇到歌荒（没有新歌听，旧的歌翻来覆去听腻了）。我也经常遇到过这种时候，所以之后，每次找到一个新的热爱的歌手或者歌曲作者，都会非常地兴奋！</p>\n<p>今天的这篇博文，是想要分享一位我最近发现的瑞士作曲家（Composer）– <a href=\"http://adrianvonziegler.bandcamp.com/\" target=\"_blank\" rel=\"noopener\">Adrian von Ziegler</a> 。我是最近在外网上发现了这位作曲家，翻阅了一些资料，听了很多他创作的音乐，然后迅速变成了他的粉丝。</p>\n<p>Adrian von Ziegler是一位来自瑞士苏黎世的年轻作曲家（Composer），截止到2018年2月28日，他的Youtube频道已经获得了超过710,000粉丝（subscribers）。他创作的音乐大多数都是没有歌词的纯音乐，他曾经在一次访谈中说到，作为一个内向而不善于表达的人，音乐是他用来表达内心情感的重要方式。他觉得人们听到一段音乐而产生的联想都是因人而异的，然而歌词总会表达一些具象化的情感，会限制人们的想象。所以到目前为止，他希望他的音乐是没有歌词的纯音乐。他非常内向，在镜头前非常羞涩，想要更多的了解他，可以通过<a href=\"https://www.youtube.com/watch?v=hH7ietk_pvM\" target=\"_blank\" rel=\"noopener\">这几部访谈视频</a> 了解到他的一些想法。</p>\n<p>打开他的Youtube频道，可以看到他的作品风格多样。根据他的Facebook主页介绍，他主要集中精力于凯尔特音乐（Celtic music），抒情音乐（Emotional music），黑暗另类音乐（Dark alternative music），世界音乐（World music），金属乐（Metal music）以及电影音乐（Film music）等。</p>\n<h3 id=\"哥特金属《The-Sylvans-Path》\"><a href=\"#哥特金属《The-Sylvans-Path》\" class=\"headerlink\" title=\"哥特金属《The Sylvans Path》\"></a>哥特金属《The Sylvans Path》</h3><p><img src=\"https://f4.bcbits.com/img/a2762884055_16.jpg\" width=\"400px\" height=\"400px\"></p>\n<p>我作为一个金属迷，第一次听到他的音乐其实应该是几年前，我在网上闲逛时听到的这一首《The Sylvans Path》。</p>\n<p>这首歌一开始便吸引住了我，后面的金属部分带来了极大的震撼，仿佛自己置身于一片幽暗的树林，身边的树精调皮地把我导向一条更加幽暗的道路。</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=2184550&auto=0&height=66\"></iframe>\n\n<p>《The Sylvans Path》来自2010年发布的专辑《Requiem》，其中糅合了凯尔特风格，金属以及管弦乐，同时也是Adrian首次尝试此类风格的歌曲。在网易云音乐的热门排行中，这首曲名列第一。</p>\n<h3 id=\"凯尔特灵魂《Wolf-Blood》\"><a href=\"#凯尔特灵魂《Wolf-Blood》\" class=\"headerlink\" title=\"凯尔特灵魂《Wolf Blood》\"></a>凯尔特灵魂《Wolf Blood》</h3><p><img src=\"https://qiniu.plusplus7.com/AZ-wolfblood.png-fullpercent\" width=\"640px\" height=\"420px\"></p>\n<p>狼在凯尔特文化中是月亮与丰收女神Cerridwen的守护者，同时也是守护，礼仪，忠诚和勇气的象征。这首《Wolf Blood》表达了凯尔特文化中对狼的敬仰之情。</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=26466977&auto=0&height=66\"></iframe>\n\n<p>《Wolf Blood》来自2013年发布的专辑《Feather and Skull》，是作者第一次对该题材进行的尝试。</p>\n<h3 id=\"黑暗史诗《The-Sealed-Kingdom》\"><a href=\"#黑暗史诗《The-Sealed-Kingdom》\" class=\"headerlink\" title=\"黑暗史诗《The Sealed Kingdom》\"></a>黑暗史诗《The Sealed Kingdom》</h3><p><img src=\"https://qiniu.plusplus7.com/AZ-thesealedkindom.jpg-fullpercent\" width=\"640px\" height=\"420px\"></p>\n<p>接下来这首《The Sealed Kingdom》是我个人非常喜欢的一首黑暗系音乐（Dark Music）。开场是阴冷肃穆的主旋律，配上狼的哀嚎，把气氛渲染得淋漓尽致，仿佛自己便是那个拿着火把的冒险者。随着画面的展开，弦乐的进入，高潮部分引领听者进入这座（冰）封住着王国，来到残破的城堡前，感受过去的辉煌以及当下的苍凉。</p>\n<p><embed src=\"http://www.xiami.com/widget/0_1773682711/singlePlayer.swf\" type=\"application/x-shockwave-flash\" width=\"257\" height=\"33\" wmode=\"transparent\"><br>链接：<a href=\"http://www.xiami.com/song/1773682711\" target=\"_blank\" rel=\"noopener\">《The Sealed Kingdom》</a></p>\n<p>Adrian von Ziegler的Dark Music很有特色。每一首曲子都非常好听，非常有韵味，很值得一听。</p>\n<p>有兴趣可以试试这个2小时的Dark Music合集: <a href=\"https://youtu.be/mIrt5MkGpy0\" target=\"_blank\" rel=\"noopener\">https://youtu.be/mIrt5MkGpy0</a>。（转自Youtube，需要梯子）</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/mIrt5MkGpy0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n","site":{"data":{}},"excerpt":"<p>哈喽大家新年好！</p>\n<p>今天是中国农历戊戌年正月初十，是过年节假日过后的第一个周末。相信大家多多少少有一些节后综合征，想利用这个周末好好调整一下吧。所以呢，今天就给大家带来一篇音乐推荐的博文。</p>\n<p>我平时非常喜欢听音乐。做事情的时候，听一些像Yanni，Enya为代表的新世纪（New Age），可以屏蔽掉外界干扰，激发想象力；玩游戏的时候，听听金属（Metal）音乐，让自己处于一个比较兴奋的状态；闲着没事的时候，听听中古民谣，仿佛自己又回到了那个黑暗混沌的时代。</p>","more":"<p>大家平时听歌的时候，应该也会时不时遇到歌荒（没有新歌听，旧的歌翻来覆去听腻了）。我也经常遇到过这种时候，所以之后，每次找到一个新的热爱的歌手或者歌曲作者，都会非常地兴奋！</p>\n<p>今天的这篇博文，是想要分享一位我最近发现的瑞士作曲家（Composer）– <a href=\"http://adrianvonziegler.bandcamp.com/\" target=\"_blank\" rel=\"noopener\">Adrian von Ziegler</a> 。我是最近在外网上发现了这位作曲家，翻阅了一些资料，听了很多他创作的音乐，然后迅速变成了他的粉丝。</p>\n<p>Adrian von Ziegler是一位来自瑞士苏黎世的年轻作曲家（Composer），截止到2018年2月28日，他的Youtube频道已经获得了超过710,000粉丝（subscribers）。他创作的音乐大多数都是没有歌词的纯音乐，他曾经在一次访谈中说到，作为一个内向而不善于表达的人，音乐是他用来表达内心情感的重要方式。他觉得人们听到一段音乐而产生的联想都是因人而异的，然而歌词总会表达一些具象化的情感，会限制人们的想象。所以到目前为止，他希望他的音乐是没有歌词的纯音乐。他非常内向，在镜头前非常羞涩，想要更多的了解他，可以通过<a href=\"https://www.youtube.com/watch?v=hH7ietk_pvM\" target=\"_blank\" rel=\"noopener\">这几部访谈视频</a> 了解到他的一些想法。</p>\n<p>打开他的Youtube频道，可以看到他的作品风格多样。根据他的Facebook主页介绍，他主要集中精力于凯尔特音乐（Celtic music），抒情音乐（Emotional music），黑暗另类音乐（Dark alternative music），世界音乐（World music），金属乐（Metal music）以及电影音乐（Film music）等。</p>\n<h3 id=\"哥特金属《The-Sylvans-Path》\"><a href=\"#哥特金属《The-Sylvans-Path》\" class=\"headerlink\" title=\"哥特金属《The Sylvans Path》\"></a>哥特金属《The Sylvans Path》</h3><p><img src=\"https://f4.bcbits.com/img/a2762884055_16.jpg\" width=\"400px\" height=\"400px\"></p>\n<p>我作为一个金属迷，第一次听到他的音乐其实应该是几年前，我在网上闲逛时听到的这一首《The Sylvans Path》。</p>\n<p>这首歌一开始便吸引住了我，后面的金属部分带来了极大的震撼，仿佛自己置身于一片幽暗的树林，身边的树精调皮地把我导向一条更加幽暗的道路。</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=2184550&auto=0&height=66\"></iframe>\n\n<p>《The Sylvans Path》来自2010年发布的专辑《Requiem》，其中糅合了凯尔特风格，金属以及管弦乐，同时也是Adrian首次尝试此类风格的歌曲。在网易云音乐的热门排行中，这首曲名列第一。</p>\n<h3 id=\"凯尔特灵魂《Wolf-Blood》\"><a href=\"#凯尔特灵魂《Wolf-Blood》\" class=\"headerlink\" title=\"凯尔特灵魂《Wolf Blood》\"></a>凯尔特灵魂《Wolf Blood》</h3><p><img src=\"https://qiniu.plusplus7.com/AZ-wolfblood.png-fullpercent\" width=\"640px\" height=\"420px\"></p>\n<p>狼在凯尔特文化中是月亮与丰收女神Cerridwen的守护者，同时也是守护，礼仪，忠诚和勇气的象征。这首《Wolf Blood》表达了凯尔特文化中对狼的敬仰之情。</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=26466977&auto=0&height=66\"></iframe>\n\n<p>《Wolf Blood》来自2013年发布的专辑《Feather and Skull》，是作者第一次对该题材进行的尝试。</p>\n<h3 id=\"黑暗史诗《The-Sealed-Kingdom》\"><a href=\"#黑暗史诗《The-Sealed-Kingdom》\" class=\"headerlink\" title=\"黑暗史诗《The Sealed Kingdom》\"></a>黑暗史诗《The Sealed Kingdom》</h3><p><img src=\"https://qiniu.plusplus7.com/AZ-thesealedkindom.jpg-fullpercent\" width=\"640px\" height=\"420px\"></p>\n<p>接下来这首《The Sealed Kingdom》是我个人非常喜欢的一首黑暗系音乐（Dark Music）。开场是阴冷肃穆的主旋律，配上狼的哀嚎，把气氛渲染得淋漓尽致，仿佛自己便是那个拿着火把的冒险者。随着画面的展开，弦乐的进入，高潮部分引领听者进入这座（冰）封住着王国，来到残破的城堡前，感受过去的辉煌以及当下的苍凉。</p>\n<p><embed src=\"http://www.xiami.com/widget/0_1773682711/singlePlayer.swf\" type=\"application/x-shockwave-flash\" width=\"257\" height=\"33\" wmode=\"transparent\"><br>链接：<a href=\"http://www.xiami.com/song/1773682711\" target=\"_blank\" rel=\"noopener\">《The Sealed Kingdom》</a></p>\n<p>Adrian von Ziegler的Dark Music很有特色。每一首曲子都非常好听，非常有韵味，很值得一听。</p>\n<p>有兴趣可以试试这个2小时的Dark Music合集: <a href=\"https://youtu.be/mIrt5MkGpy0\" target=\"_blank\" rel=\"noopener\">https://youtu.be/mIrt5MkGpy0</a>。（转自Youtube，需要梯子）</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/mIrt5MkGpy0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>"},{"layout":"post","title":"Codeforces Round 332 (Div. 2)解题报告","date":"2017-04-13T12:11:00.000Z","comments":1,"reward":true,"_content":"\n## A. Patrick and Shopping\n\n### 解题分析\n\n想想就能知道，Patrick只有4种路线。\n\n<!-- more -->\n\n    家  商店1  商店2  家\n    家  商店1  商店2  商店1  家\n    家  商店2  家  商店1  家\n    家  商店2  商店1  商店2  家\n\n直接加一下，然后比较就好了\n\n[SourceCode][1]\n\n[1]:http://codeforces.com/contest/599/submission/14366841\n\n## B. Spongebob and Joke\n\n### 解题分析\n\n如果有f中有两个相同元素并且在b中存在，说明ai可以有两种选择，那么答案就是Ambiguity。\n如果f中不存在某个元素并且这个元素在b中存在，说明ai不可能存在，那么答案就是Impossible。\n\n判断完两种情况，那么答案就一定唯一且存在，顺着推一遍就好了，最后需要注意的一点是Impossible的优先级大于Ambiguity。\n\n[SourceCode][2]\n\n[2]:http://codeforces.com/contest/599/submission/14470333\n\n## C. Day at the Beach\n\n### 解题分析\n\n对h中的每个元素求前缀最大prefmax和\n后缀最小suffmin。\n只有当某个元素的$prefmax_i$ <= $suffmin_i$时，那么就说明能从这里分组\n\n[SourceCode][3]\n\n[3]:http://codeforces.com/contest/599/submission/14473234\n\n## D. Spongebob and Squares\n\n### 解题分析\n\n很容易发现，若n＊m的矩形包含x个不同的正方形，那么当$n < m$, \n有$x = n*m + (n-1)*(m-1)+...+(n-n)*(m-n)$\n可得$x = n^2*m-(n+m)*\\Sigma^{n-1}_{i=0}i+\\Sigma^{n-1}_{i=0}i^2$\n通过运算可以得到\n$6x = 3mn^2+3mn-n^3+n$\n可知n最大不会超过$2\\sqrt[3]{X}$\n所以暴力找一下n就好了。\n[SourceCode][4]\n[4]:http://codeforces.com/contest/599/submission/14474362\n","source":"_posts/Codeforces Round 332 (Div. 2)解题报告.md","raw":"---\nlayout: post\ntitle: Codeforces Round 332 (Div. 2)解题报告\ndate: 2017-4-13 20:11\ncomments: true\nreward: true\ntags:\n    - Codeforces\n---\n\n## A. Patrick and Shopping\n\n### 解题分析\n\n想想就能知道，Patrick只有4种路线。\n\n<!-- more -->\n\n    家  商店1  商店2  家\n    家  商店1  商店2  商店1  家\n    家  商店2  家  商店1  家\n    家  商店2  商店1  商店2  家\n\n直接加一下，然后比较就好了\n\n[SourceCode][1]\n\n[1]:http://codeforces.com/contest/599/submission/14366841\n\n## B. Spongebob and Joke\n\n### 解题分析\n\n如果有f中有两个相同元素并且在b中存在，说明ai可以有两种选择，那么答案就是Ambiguity。\n如果f中不存在某个元素并且这个元素在b中存在，说明ai不可能存在，那么答案就是Impossible。\n\n判断完两种情况，那么答案就一定唯一且存在，顺着推一遍就好了，最后需要注意的一点是Impossible的优先级大于Ambiguity。\n\n[SourceCode][2]\n\n[2]:http://codeforces.com/contest/599/submission/14470333\n\n## C. Day at the Beach\n\n### 解题分析\n\n对h中的每个元素求前缀最大prefmax和\n后缀最小suffmin。\n只有当某个元素的$prefmax_i$ <= $suffmin_i$时，那么就说明能从这里分组\n\n[SourceCode][3]\n\n[3]:http://codeforces.com/contest/599/submission/14473234\n\n## D. Spongebob and Squares\n\n### 解题分析\n\n很容易发现，若n＊m的矩形包含x个不同的正方形，那么当$n < m$, \n有$x = n*m + (n-1)*(m-1)+...+(n-n)*(m-n)$\n可得$x = n^2*m-(n+m)*\\Sigma^{n-1}_{i=0}i+\\Sigma^{n-1}_{i=0}i^2$\n通过运算可以得到\n$6x = 3mn^2+3mn-n^3+n$\n可知n最大不会超过$2\\sqrt[3]{X}$\n所以暴力找一下n就好了。\n[SourceCode][4]\n[4]:http://codeforces.com/contest/599/submission/14474362\n","slug":"Codeforces Round 332 (Div. 2)解题报告","published":1,"updated":"2018-05-23T14:45:26.833Z","photos":[],"link":"","_id":"cjhj92bkr0009e0vf43toks9h","content":"<h2 id=\"A-Patrick-and-Shopping\"><a href=\"#A-Patrick-and-Shopping\" class=\"headerlink\" title=\"A. Patrick and Shopping\"></a>A. Patrick and Shopping</h2><h3 id=\"解题分析\"><a href=\"#解题分析\" class=\"headerlink\" title=\"解题分析\"></a>解题分析</h3><p>想想就能知道，Patrick只有4种路线。</p>\n<a id=\"more\"></a>\n<pre><code>家  商店1  商店2  家\n家  商店1  商店2  商店1  家\n家  商店2  家  商店1  家\n家  商店2  商店1  商店2  家\n</code></pre><p>直接加一下，然后比较就好了</p>\n<p><a href=\"http://codeforces.com/contest/599/submission/14366841\" target=\"_blank\" rel=\"noopener\">SourceCode</a></p>\n<h2 id=\"B-Spongebob-and-Joke\"><a href=\"#B-Spongebob-and-Joke\" class=\"headerlink\" title=\"B. Spongebob and Joke\"></a>B. Spongebob and Joke</h2><h3 id=\"解题分析-1\"><a href=\"#解题分析-1\" class=\"headerlink\" title=\"解题分析\"></a>解题分析</h3><p>如果有f中有两个相同元素并且在b中存在，说明ai可以有两种选择，那么答案就是Ambiguity。<br>如果f中不存在某个元素并且这个元素在b中存在，说明ai不可能存在，那么答案就是Impossible。</p>\n<p>判断完两种情况，那么答案就一定唯一且存在，顺着推一遍就好了，最后需要注意的一点是Impossible的优先级大于Ambiguity。</p>\n<p><a href=\"http://codeforces.com/contest/599/submission/14470333\" target=\"_blank\" rel=\"noopener\">SourceCode</a></p>\n<h2 id=\"C-Day-at-the-Beach\"><a href=\"#C-Day-at-the-Beach\" class=\"headerlink\" title=\"C. Day at the Beach\"></a>C. Day at the Beach</h2><h3 id=\"解题分析-2\"><a href=\"#解题分析-2\" class=\"headerlink\" title=\"解题分析\"></a>解题分析</h3><p>对h中的每个元素求前缀最大prefmax和<br>后缀最小suffmin。<br>只有当某个元素的$prefmax_i$ &lt;= $suffmin_i$时，那么就说明能从这里分组</p>\n<p><a href=\"http://codeforces.com/contest/599/submission/14473234\" target=\"_blank\" rel=\"noopener\">SourceCode</a></p>\n<h2 id=\"D-Spongebob-and-Squares\"><a href=\"#D-Spongebob-and-Squares\" class=\"headerlink\" title=\"D. Spongebob and Squares\"></a>D. Spongebob and Squares</h2><h3 id=\"解题分析-3\"><a href=\"#解题分析-3\" class=\"headerlink\" title=\"解题分析\"></a>解题分析</h3><p>很容易发现，若n＊m的矩形包含x个不同的正方形，那么当$n &lt; m$,<br>有$x = n<em>m + (n-1)</em>(m-1)+…+(n-n)<em>(m-n)$<br>可得$x = n^2</em>m-(n+m)*\\Sigma^{n-1}<em>{i=0}i+\\Sigma^{n-1}</em>{i=0}i^2$<br>通过运算可以得到<br>$6x = 3mn^2+3mn-n^3+n$<br>可知n最大不会超过$2\\sqrt<a href=\"http://codeforces.com/contest/599/submission/14473234\" target=\"_blank\" rel=\"noopener\">3</a>{X}$<br>所以暴力找一下n就好了。<br><a href=\"http://codeforces.com/contest/599/submission/14474362\" target=\"_blank\" rel=\"noopener\">SourceCode</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"A-Patrick-and-Shopping\"><a href=\"#A-Patrick-and-Shopping\" class=\"headerlink\" title=\"A. Patrick and Shopping\"></a>A. Patrick and Shopping</h2><h3 id=\"解题分析\"><a href=\"#解题分析\" class=\"headerlink\" title=\"解题分析\"></a>解题分析</h3><p>想想就能知道，Patrick只有4种路线。</p>","more":"<pre><code>家  商店1  商店2  家\n家  商店1  商店2  商店1  家\n家  商店2  家  商店1  家\n家  商店2  商店1  商店2  家\n</code></pre><p>直接加一下，然后比较就好了</p>\n<p><a href=\"http://codeforces.com/contest/599/submission/14366841\" target=\"_blank\" rel=\"noopener\">SourceCode</a></p>\n<h2 id=\"B-Spongebob-and-Joke\"><a href=\"#B-Spongebob-and-Joke\" class=\"headerlink\" title=\"B. Spongebob and Joke\"></a>B. Spongebob and Joke</h2><h3 id=\"解题分析-1\"><a href=\"#解题分析-1\" class=\"headerlink\" title=\"解题分析\"></a>解题分析</h3><p>如果有f中有两个相同元素并且在b中存在，说明ai可以有两种选择，那么答案就是Ambiguity。<br>如果f中不存在某个元素并且这个元素在b中存在，说明ai不可能存在，那么答案就是Impossible。</p>\n<p>判断完两种情况，那么答案就一定唯一且存在，顺着推一遍就好了，最后需要注意的一点是Impossible的优先级大于Ambiguity。</p>\n<p><a href=\"http://codeforces.com/contest/599/submission/14470333\" target=\"_blank\" rel=\"noopener\">SourceCode</a></p>\n<h2 id=\"C-Day-at-the-Beach\"><a href=\"#C-Day-at-the-Beach\" class=\"headerlink\" title=\"C. Day at the Beach\"></a>C. Day at the Beach</h2><h3 id=\"解题分析-2\"><a href=\"#解题分析-2\" class=\"headerlink\" title=\"解题分析\"></a>解题分析</h3><p>对h中的每个元素求前缀最大prefmax和<br>后缀最小suffmin。<br>只有当某个元素的$prefmax_i$ &lt;= $suffmin_i$时，那么就说明能从这里分组</p>\n<p><a href=\"http://codeforces.com/contest/599/submission/14473234\" target=\"_blank\" rel=\"noopener\">SourceCode</a></p>\n<h2 id=\"D-Spongebob-and-Squares\"><a href=\"#D-Spongebob-and-Squares\" class=\"headerlink\" title=\"D. Spongebob and Squares\"></a>D. Spongebob and Squares</h2><h3 id=\"解题分析-3\"><a href=\"#解题分析-3\" class=\"headerlink\" title=\"解题分析\"></a>解题分析</h3><p>很容易发现，若n＊m的矩形包含x个不同的正方形，那么当$n &lt; m$,<br>有$x = n<em>m + (n-1)</em>(m-1)+…+(n-n)<em>(m-n)$<br>可得$x = n^2</em>m-(n+m)*\\Sigma^{n-1}<em>{i=0}i+\\Sigma^{n-1}</em>{i=0}i^2$<br>通过运算可以得到<br>$6x = 3mn^2+3mn-n^3+n$<br>可知n最大不会超过$2\\sqrt<a href=\"http://codeforces.com/contest/599/submission/14473234\" target=\"_blank\" rel=\"noopener\">3</a>{X}$<br>所以暴力找一下n就好了。<br><a href=\"http://codeforces.com/contest/599/submission/14474362\" target=\"_blank\" rel=\"noopener\">SourceCode</a></p>"},{"layout":"post","title":"Codeforces Round 378 (Div. 2) 解题报告","date":"2017-07-14T04:11:00.000Z","comments":1,"reward":true,"_content":"\n## A. Grasshopper And the String\n\n### 解题分析\n\nO(n)遍历一下就好了\n\n注意要处理最大跨度的端点在终点的情况\n\nTricky case:\n\n<!-- more -->\n\nRERRRRRRR\n\n[Submission](http://codeforces.com/contest/733/submission/21965598)\n\n\n## B. Parade\n\n### 解题分析\n\nO(n)遍历一下，尝试翻转每一对士兵，记录最大值\n\n[Submission](http://codeforces.com/contest/733/submission/21924729)\n\n\n## C. Epidemic in Monstropolis\n\n### 解题分析\n\n因为每个怪兽都只能吃相邻的怪兽，所以在最终形成的局面，每个怪兽都一定是吃掉了队列上的一段怪兽。\n\n由于怪物体重是固定的，所以可以用O(n)来遍历一下，找出最终每个怪兽都吃掉了哪些怪兽。\n\n对于每个最终怪兽，它吃掉了队列上从s到e的怪兽，令dp[i][j]为是否存在方案使得编号i到j被一只怪兽吃掉，mark[i][j]表示i到mark[i][j]被吃成一只怪兽，mark[i][j]+1到j被吃成一只怪兽，最后这两只怪兽互相可以吃掉。\n\ndp[i][j] = dp[i][m] + dp[m+1][j]，i <= m < j，当且仅当dp[i][m] != dp[m+1][j], dp[i][m] 和 dp[m+1][j]均存在方案。\n\n同时记录mark[i][j]的值用于回溯出答案。\n\n最后dfs一下就能回溯出吃怪兽的方案。\n\n[Submission](http://codeforces.com/contest/733/submission/21937835)\n\n## D. Kostya the Sculptor\n\n### 解题分析\n\n对每个方块的长宽高进行排序，排序后的结果用a, b, c表示。\n\n思考一下可以知道，对于两个方块(a1, b1, c1) (a2, b2, c2)，只有当b1 c1面和b2 c2面粘在一起，最终获得的收益最大。\n\n所以对所有的方块进行排序，按照c b a的顺序从大到小排序。对于c 和 b相同的两个方块，把a的值加起来算一下能获取到的球体积最大为多少，取最大值就好。\n\n由于已经排过序了，所以对于同样的c 和 b，只需要把最大的两个a加起来就可以了，其他的结果必然比这个小，可以忽略。\n\n注意，C/C++的sort，qsort函数，重写cmp函数时，注意当两个数相等时不要返回true。有的STL实现，并没有判断边界条件，会导致数组越界Runtime Error。\n\n[Submission](http://codeforces.com/contest/733/submission/21965392)\n","source":"_posts/Codeforces Round 378 (Div. 2)解题报告.md","raw":"---\nlayout: post\ntitle: Codeforces Round 378 (Div. 2) 解题报告\ndate: 2017-7-14 12:11\ncomments: true\nreward: true\ntags:\n    - Codeforces\n---\n\n## A. Grasshopper And the String\n\n### 解题分析\n\nO(n)遍历一下就好了\n\n注意要处理最大跨度的端点在终点的情况\n\nTricky case:\n\n<!-- more -->\n\nRERRRRRRR\n\n[Submission](http://codeforces.com/contest/733/submission/21965598)\n\n\n## B. Parade\n\n### 解题分析\n\nO(n)遍历一下，尝试翻转每一对士兵，记录最大值\n\n[Submission](http://codeforces.com/contest/733/submission/21924729)\n\n\n## C. Epidemic in Monstropolis\n\n### 解题分析\n\n因为每个怪兽都只能吃相邻的怪兽，所以在最终形成的局面，每个怪兽都一定是吃掉了队列上的一段怪兽。\n\n由于怪物体重是固定的，所以可以用O(n)来遍历一下，找出最终每个怪兽都吃掉了哪些怪兽。\n\n对于每个最终怪兽，它吃掉了队列上从s到e的怪兽，令dp[i][j]为是否存在方案使得编号i到j被一只怪兽吃掉，mark[i][j]表示i到mark[i][j]被吃成一只怪兽，mark[i][j]+1到j被吃成一只怪兽，最后这两只怪兽互相可以吃掉。\n\ndp[i][j] = dp[i][m] + dp[m+1][j]，i <= m < j，当且仅当dp[i][m] != dp[m+1][j], dp[i][m] 和 dp[m+1][j]均存在方案。\n\n同时记录mark[i][j]的值用于回溯出答案。\n\n最后dfs一下就能回溯出吃怪兽的方案。\n\n[Submission](http://codeforces.com/contest/733/submission/21937835)\n\n## D. Kostya the Sculptor\n\n### 解题分析\n\n对每个方块的长宽高进行排序，排序后的结果用a, b, c表示。\n\n思考一下可以知道，对于两个方块(a1, b1, c1) (a2, b2, c2)，只有当b1 c1面和b2 c2面粘在一起，最终获得的收益最大。\n\n所以对所有的方块进行排序，按照c b a的顺序从大到小排序。对于c 和 b相同的两个方块，把a的值加起来算一下能获取到的球体积最大为多少，取最大值就好。\n\n由于已经排过序了，所以对于同样的c 和 b，只需要把最大的两个a加起来就可以了，其他的结果必然比这个小，可以忽略。\n\n注意，C/C++的sort，qsort函数，重写cmp函数时，注意当两个数相等时不要返回true。有的STL实现，并没有判断边界条件，会导致数组越界Runtime Error。\n\n[Submission](http://codeforces.com/contest/733/submission/21965392)\n","slug":"Codeforces Round 378 (Div. 2)解题报告","published":1,"updated":"2018-05-23T14:45:26.863Z","photos":[],"link":"","_id":"cjhj92bky000de0vfchhp65rc","content":"<h2 id=\"A-Grasshopper-And-the-String\"><a href=\"#A-Grasshopper-And-the-String\" class=\"headerlink\" title=\"A. Grasshopper And the String\"></a>A. Grasshopper And the String</h2><h3 id=\"解题分析\"><a href=\"#解题分析\" class=\"headerlink\" title=\"解题分析\"></a>解题分析</h3><p>O(n)遍历一下就好了</p>\n<p>注意要处理最大跨度的端点在终点的情况</p>\n<p>Tricky case:</p>\n<a id=\"more\"></a>\n<p>RERRRRRRR</p>\n<p><a href=\"http://codeforces.com/contest/733/submission/21965598\" target=\"_blank\" rel=\"noopener\">Submission</a></p>\n<h2 id=\"B-Parade\"><a href=\"#B-Parade\" class=\"headerlink\" title=\"B. Parade\"></a>B. Parade</h2><h3 id=\"解题分析-1\"><a href=\"#解题分析-1\" class=\"headerlink\" title=\"解题分析\"></a>解题分析</h3><p>O(n)遍历一下，尝试翻转每一对士兵，记录最大值</p>\n<p><a href=\"http://codeforces.com/contest/733/submission/21924729\" target=\"_blank\" rel=\"noopener\">Submission</a></p>\n<h2 id=\"C-Epidemic-in-Monstropolis\"><a href=\"#C-Epidemic-in-Monstropolis\" class=\"headerlink\" title=\"C. Epidemic in Monstropolis\"></a>C. Epidemic in Monstropolis</h2><h3 id=\"解题分析-2\"><a href=\"#解题分析-2\" class=\"headerlink\" title=\"解题分析\"></a>解题分析</h3><p>因为每个怪兽都只能吃相邻的怪兽，所以在最终形成的局面，每个怪兽都一定是吃掉了队列上的一段怪兽。</p>\n<p>由于怪物体重是固定的，所以可以用O(n)来遍历一下，找出最终每个怪兽都吃掉了哪些怪兽。</p>\n<p>对于每个最终怪兽，它吃掉了队列上从s到e的怪兽，令dp[i][j]为是否存在方案使得编号i到j被一只怪兽吃掉，mark[i][j]表示i到mark[i][j]被吃成一只怪兽，mark[i][j]+1到j被吃成一只怪兽，最后这两只怪兽互相可以吃掉。</p>\n<p>dp[i][j] = dp[i][m] + dp[m+1][j]，i &lt;= m &lt; j，当且仅当dp[i][m] != dp[m+1][j], dp[i][m] 和 dp[m+1][j]均存在方案。</p>\n<p>同时记录mark[i][j]的值用于回溯出答案。</p>\n<p>最后dfs一下就能回溯出吃怪兽的方案。</p>\n<p><a href=\"http://codeforces.com/contest/733/submission/21937835\" target=\"_blank\" rel=\"noopener\">Submission</a></p>\n<h2 id=\"D-Kostya-the-Sculptor\"><a href=\"#D-Kostya-the-Sculptor\" class=\"headerlink\" title=\"D. Kostya the Sculptor\"></a>D. Kostya the Sculptor</h2><h3 id=\"解题分析-3\"><a href=\"#解题分析-3\" class=\"headerlink\" title=\"解题分析\"></a>解题分析</h3><p>对每个方块的长宽高进行排序，排序后的结果用a, b, c表示。</p>\n<p>思考一下可以知道，对于两个方块(a1, b1, c1) (a2, b2, c2)，只有当b1 c1面和b2 c2面粘在一起，最终获得的收益最大。</p>\n<p>所以对所有的方块进行排序，按照c b a的顺序从大到小排序。对于c 和 b相同的两个方块，把a的值加起来算一下能获取到的球体积最大为多少，取最大值就好。</p>\n<p>由于已经排过序了，所以对于同样的c 和 b，只需要把最大的两个a加起来就可以了，其他的结果必然比这个小，可以忽略。</p>\n<p>注意，C/C++的sort，qsort函数，重写cmp函数时，注意当两个数相等时不要返回true。有的STL实现，并没有判断边界条件，会导致数组越界Runtime Error。</p>\n<p><a href=\"http://codeforces.com/contest/733/submission/21965392\" target=\"_blank\" rel=\"noopener\">Submission</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"A-Grasshopper-And-the-String\"><a href=\"#A-Grasshopper-And-the-String\" class=\"headerlink\" title=\"A. Grasshopper And the String\"></a>A. Grasshopper And the String</h2><h3 id=\"解题分析\"><a href=\"#解题分析\" class=\"headerlink\" title=\"解题分析\"></a>解题分析</h3><p>O(n)遍历一下就好了</p>\n<p>注意要处理最大跨度的端点在终点的情况</p>\n<p>Tricky case:</p>","more":"<p>RERRRRRRR</p>\n<p><a href=\"http://codeforces.com/contest/733/submission/21965598\" target=\"_blank\" rel=\"noopener\">Submission</a></p>\n<h2 id=\"B-Parade\"><a href=\"#B-Parade\" class=\"headerlink\" title=\"B. Parade\"></a>B. Parade</h2><h3 id=\"解题分析-1\"><a href=\"#解题分析-1\" class=\"headerlink\" title=\"解题分析\"></a>解题分析</h3><p>O(n)遍历一下，尝试翻转每一对士兵，记录最大值</p>\n<p><a href=\"http://codeforces.com/contest/733/submission/21924729\" target=\"_blank\" rel=\"noopener\">Submission</a></p>\n<h2 id=\"C-Epidemic-in-Monstropolis\"><a href=\"#C-Epidemic-in-Monstropolis\" class=\"headerlink\" title=\"C. Epidemic in Monstropolis\"></a>C. Epidemic in Monstropolis</h2><h3 id=\"解题分析-2\"><a href=\"#解题分析-2\" class=\"headerlink\" title=\"解题分析\"></a>解题分析</h3><p>因为每个怪兽都只能吃相邻的怪兽，所以在最终形成的局面，每个怪兽都一定是吃掉了队列上的一段怪兽。</p>\n<p>由于怪物体重是固定的，所以可以用O(n)来遍历一下，找出最终每个怪兽都吃掉了哪些怪兽。</p>\n<p>对于每个最终怪兽，它吃掉了队列上从s到e的怪兽，令dp[i][j]为是否存在方案使得编号i到j被一只怪兽吃掉，mark[i][j]表示i到mark[i][j]被吃成一只怪兽，mark[i][j]+1到j被吃成一只怪兽，最后这两只怪兽互相可以吃掉。</p>\n<p>dp[i][j] = dp[i][m] + dp[m+1][j]，i &lt;= m &lt; j，当且仅当dp[i][m] != dp[m+1][j], dp[i][m] 和 dp[m+1][j]均存在方案。</p>\n<p>同时记录mark[i][j]的值用于回溯出答案。</p>\n<p>最后dfs一下就能回溯出吃怪兽的方案。</p>\n<p><a href=\"http://codeforces.com/contest/733/submission/21937835\" target=\"_blank\" rel=\"noopener\">Submission</a></p>\n<h2 id=\"D-Kostya-the-Sculptor\"><a href=\"#D-Kostya-the-Sculptor\" class=\"headerlink\" title=\"D. Kostya the Sculptor\"></a>D. Kostya the Sculptor</h2><h3 id=\"解题分析-3\"><a href=\"#解题分析-3\" class=\"headerlink\" title=\"解题分析\"></a>解题分析</h3><p>对每个方块的长宽高进行排序，排序后的结果用a, b, c表示。</p>\n<p>思考一下可以知道，对于两个方块(a1, b1, c1) (a2, b2, c2)，只有当b1 c1面和b2 c2面粘在一起，最终获得的收益最大。</p>\n<p>所以对所有的方块进行排序，按照c b a的顺序从大到小排序。对于c 和 b相同的两个方块，把a的值加起来算一下能获取到的球体积最大为多少，取最大值就好。</p>\n<p>由于已经排过序了，所以对于同样的c 和 b，只需要把最大的两个a加起来就可以了，其他的结果必然比这个小，可以忽略。</p>\n<p>注意，C/C++的sort，qsort函数，重写cmp函数时，注意当两个数相等时不要返回true。有的STL实现，并没有判断边界条件，会导致数组越界Runtime Error。</p>\n<p><a href=\"http://codeforces.com/contest/733/submission/21965392\" target=\"_blank\" rel=\"noopener\">Submission</a></p>"},{"layout":"post","title":"ICO","date":"2015-12-13T18:11:00.000Z","comments":1,"reward":true,"_content":"\n15年入冬之际，我弄到了PS3版的《ICO~旺达与巨像HD合集》。我很喜欢玩电子游戏，但是几乎没有写过类似于游玩体验的文字来记录我的真实感受（如果之前录《奥里与迷失之森》实况的最后那段话不算在内的话）。今天突然想写一篇关于《ICO》这个游戏的游玩体验，因为这个游戏给我的体验实在是太...独特了。以至于，我想了快1个小时关于这篇文字应该如何命题，但还是不知道如何用几个简短的词语来描述我的感受，我觉得“独特”这个词也是不太贴切，总觉得少了很多东西。于是，索性就那游戏的名字来起名了，思绪有点乱，容我慢慢理清。\n\n<img src=\"https://qiniu.plusplus7.com/ICO_front.jpg-fullpercent\"/>\n\n<!-- more -->\n\n## 古堡迷踪\n《ICO》，中文译名《古堡迷踪》，SCEJ出品，Team ICO作品。Ico其实是一名小男孩的名字，是游戏的男主角。游戏对于剧情的刻画非常简单。Ico是一个头上长有牛角的少年，部族的大人们认为有牛角的男孩会给他们带来灾难，于是将Ico送到了某个孤岛上一座空无一人的古堡中。然而Ico意外地逃脱了，并且在古堡中他遇到了名叫Yorda的少女，他决心要带Yorda离开这个古堡。于是古堡迷踪的故事就从这里开始了。\n\n游戏中，我们需要解开古堡中的各种谜题，想办法脱离困境。途中会遇到很多黑影，只要Yorda被黑影抓走，游戏就结束了。这是一个无体力槽，无能力槽，无物品栏的RPG游戏，我们只需要保护Yorda，解开机关，摁住R键牵住她的手，带着她离开这座古堡。\n\n除此之外，游戏背景音乐很少。听到最多的是，海上呼啸的海风，烛台燃烧的火苗，瀑布的流水，以及当Ico陷入危险时，Yorda为其担心时的呼叫。并且，游戏中两位主角的交流使用了一种陌生的语言，玩家需要结合上下文才能大概猜测出他们在说什么。\n\n<img src=\"https://qiniu.plusplus7.com/ICO_go.jpg-fullpercent\">\n## 若即若离\n\n根据《ICO~旺达与巨像HD 合集》附带的访谈，游戏制作人正是希望能通过这样陌生的语言为玩家营造一种陌生感。在一周目中，游戏的字幕是一种很奇怪的文字。虽然，对话内容玩家通过猜测也能明白，但是这种若即若离的感觉，也正是我之前所说的那种“独特”的游戏体验的一部分。虚无缥缈的远山，浓雾笼罩的大海，远离世俗的孤岛，空无一人的古堡...作者没有，也并没有打算给玩家更多的信息来描写这些场景下的故事背景。不用考虑古堡背后的故事，不必担心世俗的禁锢，需要做的就是牵着她的手，离开这里。\n\n\n    “决不放开这个人的手，否则就如同放弃了自己的灵魂” —— 上田文人 (游戏制作人)\n\n我觉得这就是作者希望营造出的游戏气氛。\n\n没有无聊的剧情梗概，没有多余的游戏说明。虽然是动作解密游戏，但是动作要素非常简单，爬抓跳滚，挥舞木棍保护手无寸铁的少女。我们只需要思考在通过某个机关时，如何把瘦弱的Yorda也一起带过来；遭遇战斗时，怎么样保护手无寸铁的Yorda；最后，带她一同离开。渲染气氛，营造出极强的代入感，表达纯美的情感。\n\n如果你也是使用主机，而非模拟器来游戏。那么在摁下R键走动时，你可以感受到手柄传来的微微震动。个人认为，这个简单的设计，起到了画龙点睛的效果。\n<img src=\"https://qiniu.plusplus7.com/ICO_outside.jpg-fullpercent\">\n\n## 希望与灵魂\n\n结束了一周目的游戏之后，这种若即若离的感觉非常强烈。游戏营造的气氛总是让人很怀念，而游戏中有太多的东西值得去反复咀嚼了。Yorda到底有什么象征意义？作者这样设计想表达什么想法？...于是我又玩了二周目，希望能再次回到这座遥远却又那么熟悉的古堡，寻找到自己的答案。\n\n远山，大海，古堡，作者没有一点对这个架空背景的赘述，更没有细致地描述两位主角的性格，背景等。但是却准确地抓住他们的性格特点，没有铺垫，没有渲染，通过简单的动作，陌生的语言，传神地勾画出了一个框架，给玩家留下了很多想象的空间。（这算是游戏中的白描手法么哈哈^_^)\n\n有人说，Yorda象征着希望和信念，一旦失去她，那么人生也就随之暗淡（游戏结束），放弃了她就如同放弃了自己的灵魂。\n\n关于游戏的各种象征意义，我查阅了很多资料，到各个论坛上都找到了很多人对这款游戏的感受。我玩了两周目，其中二周目是在斗鱼上直播的，我的心中也有我自己的答案。\n\n正如莎士比亚的名言“一千个人眼里有一千个哈姆雷特”，这个答案也是因人而异的。每个人都会结合自己的经历与思考，来得出不同的答案，这是对艺术进行再造的过程，而这个问题更没有什么标准答案。\n<img src=\"https://qiniu.plusplus7.com/ICO_letgo.jpg-fullpercent\">\n\n## 遥远而真实的梦\n\n现在回想起，游戏中灰朦不清的远山，雾蒙迷离的海上，这一切就像是很久以前做过的一场梦一样，梦里的场景是那么的虚幻；然而又想起古堡里去过一次又一次熟悉得不能再熟悉的走廊，明明就在眼前却无能为力的感觉，不管走到哪儿都要牵着她的手，这些感受却又是那么真实的存在。\n\n游戏结尾曲《[ICO -You were There-](http://v.yinyuetai.com/video/743834)》\n\n    You were there \n    你曾在那里\n    Though forgotten all promises we keep \n    虽已忘记我们的约定\n    The island bathes in the sun’s bright rays \n    岛屿浸在明媚的阳光里\n    Distant hills wear a shroud of grey \n    远山灰朦不清\n    A lonely breeze whispers in the trees \n    孤独的微风在林中低呓\n    Sole key to this mystery \n    诉说着那神秘的谜\n\n## 第九艺术\n\n《ICO》毫无疑问就是一款游戏艺术品。\n\n*以下内容带有强烈个人感情色彩，慎读...*\n\n我对于神作有自己的定义。在《奥里与迷失之森》出现之前，只有《最终幻想9》在我心中算是“神作”级别的作品。\n\n然而，《ICO》在我心中不是“神作”，并不是因为我对于“神作”定义的标准太高，准确的来说，这款游戏的出现，完全颠覆了我之前对于“神作”的定义，我一时无法对这款游戏贴上标签，就像这款游戏给我带来的那种“独特”的感受一摸一样。（或许本身“贴标签”这件事就是非常可笑的）\n","source":"_posts/ICO.md","raw":"---\nlayout: post\ntitle: ICO\ndate: 2015-12-14 02:11\ncomments: true\nreward: true\ntags:\n    - Games\n---\n\n15年入冬之际，我弄到了PS3版的《ICO~旺达与巨像HD合集》。我很喜欢玩电子游戏，但是几乎没有写过类似于游玩体验的文字来记录我的真实感受（如果之前录《奥里与迷失之森》实况的最后那段话不算在内的话）。今天突然想写一篇关于《ICO》这个游戏的游玩体验，因为这个游戏给我的体验实在是太...独特了。以至于，我想了快1个小时关于这篇文字应该如何命题，但还是不知道如何用几个简短的词语来描述我的感受，我觉得“独特”这个词也是不太贴切，总觉得少了很多东西。于是，索性就那游戏的名字来起名了，思绪有点乱，容我慢慢理清。\n\n<img src=\"https://qiniu.plusplus7.com/ICO_front.jpg-fullpercent\"/>\n\n<!-- more -->\n\n## 古堡迷踪\n《ICO》，中文译名《古堡迷踪》，SCEJ出品，Team ICO作品。Ico其实是一名小男孩的名字，是游戏的男主角。游戏对于剧情的刻画非常简单。Ico是一个头上长有牛角的少年，部族的大人们认为有牛角的男孩会给他们带来灾难，于是将Ico送到了某个孤岛上一座空无一人的古堡中。然而Ico意外地逃脱了，并且在古堡中他遇到了名叫Yorda的少女，他决心要带Yorda离开这个古堡。于是古堡迷踪的故事就从这里开始了。\n\n游戏中，我们需要解开古堡中的各种谜题，想办法脱离困境。途中会遇到很多黑影，只要Yorda被黑影抓走，游戏就结束了。这是一个无体力槽，无能力槽，无物品栏的RPG游戏，我们只需要保护Yorda，解开机关，摁住R键牵住她的手，带着她离开这座古堡。\n\n除此之外，游戏背景音乐很少。听到最多的是，海上呼啸的海风，烛台燃烧的火苗，瀑布的流水，以及当Ico陷入危险时，Yorda为其担心时的呼叫。并且，游戏中两位主角的交流使用了一种陌生的语言，玩家需要结合上下文才能大概猜测出他们在说什么。\n\n<img src=\"https://qiniu.plusplus7.com/ICO_go.jpg-fullpercent\">\n## 若即若离\n\n根据《ICO~旺达与巨像HD 合集》附带的访谈，游戏制作人正是希望能通过这样陌生的语言为玩家营造一种陌生感。在一周目中，游戏的字幕是一种很奇怪的文字。虽然，对话内容玩家通过猜测也能明白，但是这种若即若离的感觉，也正是我之前所说的那种“独特”的游戏体验的一部分。虚无缥缈的远山，浓雾笼罩的大海，远离世俗的孤岛，空无一人的古堡...作者没有，也并没有打算给玩家更多的信息来描写这些场景下的故事背景。不用考虑古堡背后的故事，不必担心世俗的禁锢，需要做的就是牵着她的手，离开这里。\n\n\n    “决不放开这个人的手，否则就如同放弃了自己的灵魂” —— 上田文人 (游戏制作人)\n\n我觉得这就是作者希望营造出的游戏气氛。\n\n没有无聊的剧情梗概，没有多余的游戏说明。虽然是动作解密游戏，但是动作要素非常简单，爬抓跳滚，挥舞木棍保护手无寸铁的少女。我们只需要思考在通过某个机关时，如何把瘦弱的Yorda也一起带过来；遭遇战斗时，怎么样保护手无寸铁的Yorda；最后，带她一同离开。渲染气氛，营造出极强的代入感，表达纯美的情感。\n\n如果你也是使用主机，而非模拟器来游戏。那么在摁下R键走动时，你可以感受到手柄传来的微微震动。个人认为，这个简单的设计，起到了画龙点睛的效果。\n<img src=\"https://qiniu.plusplus7.com/ICO_outside.jpg-fullpercent\">\n\n## 希望与灵魂\n\n结束了一周目的游戏之后，这种若即若离的感觉非常强烈。游戏营造的气氛总是让人很怀念，而游戏中有太多的东西值得去反复咀嚼了。Yorda到底有什么象征意义？作者这样设计想表达什么想法？...于是我又玩了二周目，希望能再次回到这座遥远却又那么熟悉的古堡，寻找到自己的答案。\n\n远山，大海，古堡，作者没有一点对这个架空背景的赘述，更没有细致地描述两位主角的性格，背景等。但是却准确地抓住他们的性格特点，没有铺垫，没有渲染，通过简单的动作，陌生的语言，传神地勾画出了一个框架，给玩家留下了很多想象的空间。（这算是游戏中的白描手法么哈哈^_^)\n\n有人说，Yorda象征着希望和信念，一旦失去她，那么人生也就随之暗淡（游戏结束），放弃了她就如同放弃了自己的灵魂。\n\n关于游戏的各种象征意义，我查阅了很多资料，到各个论坛上都找到了很多人对这款游戏的感受。我玩了两周目，其中二周目是在斗鱼上直播的，我的心中也有我自己的答案。\n\n正如莎士比亚的名言“一千个人眼里有一千个哈姆雷特”，这个答案也是因人而异的。每个人都会结合自己的经历与思考，来得出不同的答案，这是对艺术进行再造的过程，而这个问题更没有什么标准答案。\n<img src=\"https://qiniu.plusplus7.com/ICO_letgo.jpg-fullpercent\">\n\n## 遥远而真实的梦\n\n现在回想起，游戏中灰朦不清的远山，雾蒙迷离的海上，这一切就像是很久以前做过的一场梦一样，梦里的场景是那么的虚幻；然而又想起古堡里去过一次又一次熟悉得不能再熟悉的走廊，明明就在眼前却无能为力的感觉，不管走到哪儿都要牵着她的手，这些感受却又是那么真实的存在。\n\n游戏结尾曲《[ICO -You were There-](http://v.yinyuetai.com/video/743834)》\n\n    You were there \n    你曾在那里\n    Though forgotten all promises we keep \n    虽已忘记我们的约定\n    The island bathes in the sun’s bright rays \n    岛屿浸在明媚的阳光里\n    Distant hills wear a shroud of grey \n    远山灰朦不清\n    A lonely breeze whispers in the trees \n    孤独的微风在林中低呓\n    Sole key to this mystery \n    诉说着那神秘的谜\n\n## 第九艺术\n\n《ICO》毫无疑问就是一款游戏艺术品。\n\n*以下内容带有强烈个人感情色彩，慎读...*\n\n我对于神作有自己的定义。在《奥里与迷失之森》出现之前，只有《最终幻想9》在我心中算是“神作”级别的作品。\n\n然而，《ICO》在我心中不是“神作”，并不是因为我对于“神作”定义的标准太高，准确的来说，这款游戏的出现，完全颠覆了我之前对于“神作”的定义，我一时无法对这款游戏贴上标签，就像这款游戏给我带来的那种“独特”的感受一摸一样。（或许本身“贴标签”这件事就是非常可笑的）\n","slug":"ICO","published":1,"updated":"2019-01-14T17:09:22.710Z","_id":"cjhj92bl3000fe0vf9cldl9tv","photos":[],"link":"","content":"<p>15年入冬之际，我弄到了PS3版的《ICO~旺达与巨像HD合集》。我很喜欢玩电子游戏，但是几乎没有写过类似于游玩体验的文字来记录我的真实感受（如果之前录《奥里与迷失之森》实况的最后那段话不算在内的话）。今天突然想写一篇关于《ICO》这个游戏的游玩体验，因为这个游戏给我的体验实在是太…独特了。以至于，我想了快1个小时关于这篇文字应该如何命题，但还是不知道如何用几个简短的词语来描述我的感受，我觉得“独特”这个词也是不太贴切，总觉得少了很多东西。于是，索性就那游戏的名字来起名了，思绪有点乱，容我慢慢理清。</p>\n<p><img src=\"https://qiniu.plusplus7.com/ICO_front.jpg-fullpercent\"></p>\n<a id=\"more\"></a>\n<h2 id=\"古堡迷踪\"><a href=\"#古堡迷踪\" class=\"headerlink\" title=\"古堡迷踪\"></a>古堡迷踪</h2><p>《ICO》，中文译名《古堡迷踪》，SCEJ出品，Team ICO作品。Ico其实是一名小男孩的名字，是游戏的男主角。游戏对于剧情的刻画非常简单。Ico是一个头上长有牛角的少年，部族的大人们认为有牛角的男孩会给他们带来灾难，于是将Ico送到了某个孤岛上一座空无一人的古堡中。然而Ico意外地逃脱了，并且在古堡中他遇到了名叫Yorda的少女，他决心要带Yorda离开这个古堡。于是古堡迷踪的故事就从这里开始了。</p>\n<p>游戏中，我们需要解开古堡中的各种谜题，想办法脱离困境。途中会遇到很多黑影，只要Yorda被黑影抓走，游戏就结束了。这是一个无体力槽，无能力槽，无物品栏的RPG游戏，我们只需要保护Yorda，解开机关，摁住R键牵住她的手，带着她离开这座古堡。</p>\n<p>除此之外，游戏背景音乐很少。听到最多的是，海上呼啸的海风，烛台燃烧的火苗，瀑布的流水，以及当Ico陷入危险时，Yorda为其担心时的呼叫。并且，游戏中两位主角的交流使用了一种陌生的语言，玩家需要结合上下文才能大概猜测出他们在说什么。</p>\n<p><img src=\"https://qiniu.plusplus7.com/ICO_go.jpg-fullpercent\"></p>\n<h2 id=\"若即若离\"><a href=\"#若即若离\" class=\"headerlink\" title=\"若即若离\"></a>若即若离</h2><p>根据《ICO~旺达与巨像HD 合集》附带的访谈，游戏制作人正是希望能通过这样陌生的语言为玩家营造一种陌生感。在一周目中，游戏的字幕是一种很奇怪的文字。虽然，对话内容玩家通过猜测也能明白，但是这种若即若离的感觉，也正是我之前所说的那种“独特”的游戏体验的一部分。虚无缥缈的远山，浓雾笼罩的大海，远离世俗的孤岛，空无一人的古堡…作者没有，也并没有打算给玩家更多的信息来描写这些场景下的故事背景。不用考虑古堡背后的故事，不必担心世俗的禁锢，需要做的就是牵着她的手，离开这里。</p>\n<pre><code>“决不放开这个人的手，否则就如同放弃了自己的灵魂” —— 上田文人 (游戏制作人)\n</code></pre><p>我觉得这就是作者希望营造出的游戏气氛。</p>\n<p>没有无聊的剧情梗概，没有多余的游戏说明。虽然是动作解密游戏，但是动作要素非常简单，爬抓跳滚，挥舞木棍保护手无寸铁的少女。我们只需要思考在通过某个机关时，如何把瘦弱的Yorda也一起带过来；遭遇战斗时，怎么样保护手无寸铁的Yorda；最后，带她一同离开。渲染气氛，营造出极强的代入感，表达纯美的情感。</p>\n<p>如果你也是使用主机，而非模拟器来游戏。那么在摁下R键走动时，你可以感受到手柄传来的微微震动。个人认为，这个简单的设计，起到了画龙点睛的效果。<br><img src=\"https://qiniu.plusplus7.com/ICO_outside.jpg-fullpercent\"></p>\n<h2 id=\"希望与灵魂\"><a href=\"#希望与灵魂\" class=\"headerlink\" title=\"希望与灵魂\"></a>希望与灵魂</h2><p>结束了一周目的游戏之后，这种若即若离的感觉非常强烈。游戏营造的气氛总是让人很怀念，而游戏中有太多的东西值得去反复咀嚼了。Yorda到底有什么象征意义？作者这样设计想表达什么想法？…于是我又玩了二周目，希望能再次回到这座遥远却又那么熟悉的古堡，寻找到自己的答案。</p>\n<p>远山，大海，古堡，作者没有一点对这个架空背景的赘述，更没有细致地描述两位主角的性格，背景等。但是却准确地抓住他们的性格特点，没有铺垫，没有渲染，通过简单的动作，陌生的语言，传神地勾画出了一个框架，给玩家留下了很多想象的空间。（这算是游戏中的白描手法么哈哈^_^)</p>\n<p>有人说，Yorda象征着希望和信念，一旦失去她，那么人生也就随之暗淡（游戏结束），放弃了她就如同放弃了自己的灵魂。</p>\n<p>关于游戏的各种象征意义，我查阅了很多资料，到各个论坛上都找到了很多人对这款游戏的感受。我玩了两周目，其中二周目是在斗鱼上直播的，我的心中也有我自己的答案。</p>\n<p>正如莎士比亚的名言“一千个人眼里有一千个哈姆雷特”，这个答案也是因人而异的。每个人都会结合自己的经历与思考，来得出不同的答案，这是对艺术进行再造的过程，而这个问题更没有什么标准答案。<br><img src=\"https://qiniu.plusplus7.com/ICO_letgo.jpg-fullpercent\"></p>\n<h2 id=\"遥远而真实的梦\"><a href=\"#遥远而真实的梦\" class=\"headerlink\" title=\"遥远而真实的梦\"></a>遥远而真实的梦</h2><p>现在回想起，游戏中灰朦不清的远山，雾蒙迷离的海上，这一切就像是很久以前做过的一场梦一样，梦里的场景是那么的虚幻；然而又想起古堡里去过一次又一次熟悉得不能再熟悉的走廊，明明就在眼前却无能为力的感觉，不管走到哪儿都要牵着她的手，这些感受却又是那么真实的存在。</p>\n<p>游戏结尾曲《<a href=\"http://v.yinyuetai.com/video/743834\" target=\"_blank\" rel=\"noopener\">ICO -You were There-</a>》</p>\n<pre><code>You were there \n你曾在那里\nThough forgotten all promises we keep \n虽已忘记我们的约定\nThe island bathes in the sun’s bright rays \n岛屿浸在明媚的阳光里\nDistant hills wear a shroud of grey \n远山灰朦不清\nA lonely breeze whispers in the trees \n孤独的微风在林中低呓\nSole key to this mystery \n诉说着那神秘的谜\n</code></pre><h2 id=\"第九艺术\"><a href=\"#第九艺术\" class=\"headerlink\" title=\"第九艺术\"></a>第九艺术</h2><p>《ICO》毫无疑问就是一款游戏艺术品。</p>\n<p><em>以下内容带有强烈个人感情色彩，慎读…</em></p>\n<p>我对于神作有自己的定义。在《奥里与迷失之森》出现之前，只有《最终幻想9》在我心中算是“神作”级别的作品。</p>\n<p>然而，《ICO》在我心中不是“神作”，并不是因为我对于“神作”定义的标准太高，准确的来说，这款游戏的出现，完全颠覆了我之前对于“神作”的定义，我一时无法对这款游戏贴上标签，就像这款游戏给我带来的那种“独特”的感受一摸一样。（或许本身“贴标签”这件事就是非常可笑的）</p>\n","site":{"data":{}},"excerpt":"<p>15年入冬之际，我弄到了PS3版的《ICO~旺达与巨像HD合集》。我很喜欢玩电子游戏，但是几乎没有写过类似于游玩体验的文字来记录我的真实感受（如果之前录《奥里与迷失之森》实况的最后那段话不算在内的话）。今天突然想写一篇关于《ICO》这个游戏的游玩体验，因为这个游戏给我的体验实在是太…独特了。以至于，我想了快1个小时关于这篇文字应该如何命题，但还是不知道如何用几个简短的词语来描述我的感受，我觉得“独特”这个词也是不太贴切，总觉得少了很多东西。于是，索性就那游戏的名字来起名了，思绪有点乱，容我慢慢理清。</p>\n<p><img src=\"https://qiniu.plusplus7.com/ICO_front.jpg-fullpercent\"></p>","more":"<h2 id=\"古堡迷踪\"><a href=\"#古堡迷踪\" class=\"headerlink\" title=\"古堡迷踪\"></a>古堡迷踪</h2><p>《ICO》，中文译名《古堡迷踪》，SCEJ出品，Team ICO作品。Ico其实是一名小男孩的名字，是游戏的男主角。游戏对于剧情的刻画非常简单。Ico是一个头上长有牛角的少年，部族的大人们认为有牛角的男孩会给他们带来灾难，于是将Ico送到了某个孤岛上一座空无一人的古堡中。然而Ico意外地逃脱了，并且在古堡中他遇到了名叫Yorda的少女，他决心要带Yorda离开这个古堡。于是古堡迷踪的故事就从这里开始了。</p>\n<p>游戏中，我们需要解开古堡中的各种谜题，想办法脱离困境。途中会遇到很多黑影，只要Yorda被黑影抓走，游戏就结束了。这是一个无体力槽，无能力槽，无物品栏的RPG游戏，我们只需要保护Yorda，解开机关，摁住R键牵住她的手，带着她离开这座古堡。</p>\n<p>除此之外，游戏背景音乐很少。听到最多的是，海上呼啸的海风，烛台燃烧的火苗，瀑布的流水，以及当Ico陷入危险时，Yorda为其担心时的呼叫。并且，游戏中两位主角的交流使用了一种陌生的语言，玩家需要结合上下文才能大概猜测出他们在说什么。</p>\n<p><img src=\"https://qiniu.plusplus7.com/ICO_go.jpg-fullpercent\"></p>\n<h2 id=\"若即若离\"><a href=\"#若即若离\" class=\"headerlink\" title=\"若即若离\"></a>若即若离</h2><p>根据《ICO~旺达与巨像HD 合集》附带的访谈，游戏制作人正是希望能通过这样陌生的语言为玩家营造一种陌生感。在一周目中，游戏的字幕是一种很奇怪的文字。虽然，对话内容玩家通过猜测也能明白，但是这种若即若离的感觉，也正是我之前所说的那种“独特”的游戏体验的一部分。虚无缥缈的远山，浓雾笼罩的大海，远离世俗的孤岛，空无一人的古堡…作者没有，也并没有打算给玩家更多的信息来描写这些场景下的故事背景。不用考虑古堡背后的故事，不必担心世俗的禁锢，需要做的就是牵着她的手，离开这里。</p>\n<pre><code>“决不放开这个人的手，否则就如同放弃了自己的灵魂” —— 上田文人 (游戏制作人)\n</code></pre><p>我觉得这就是作者希望营造出的游戏气氛。</p>\n<p>没有无聊的剧情梗概，没有多余的游戏说明。虽然是动作解密游戏，但是动作要素非常简单，爬抓跳滚，挥舞木棍保护手无寸铁的少女。我们只需要思考在通过某个机关时，如何把瘦弱的Yorda也一起带过来；遭遇战斗时，怎么样保护手无寸铁的Yorda；最后，带她一同离开。渲染气氛，营造出极强的代入感，表达纯美的情感。</p>\n<p>如果你也是使用主机，而非模拟器来游戏。那么在摁下R键走动时，你可以感受到手柄传来的微微震动。个人认为，这个简单的设计，起到了画龙点睛的效果。<br><img src=\"https://qiniu.plusplus7.com/ICO_outside.jpg-fullpercent\"></p>\n<h2 id=\"希望与灵魂\"><a href=\"#希望与灵魂\" class=\"headerlink\" title=\"希望与灵魂\"></a>希望与灵魂</h2><p>结束了一周目的游戏之后，这种若即若离的感觉非常强烈。游戏营造的气氛总是让人很怀念，而游戏中有太多的东西值得去反复咀嚼了。Yorda到底有什么象征意义？作者这样设计想表达什么想法？…于是我又玩了二周目，希望能再次回到这座遥远却又那么熟悉的古堡，寻找到自己的答案。</p>\n<p>远山，大海，古堡，作者没有一点对这个架空背景的赘述，更没有细致地描述两位主角的性格，背景等。但是却准确地抓住他们的性格特点，没有铺垫，没有渲染，通过简单的动作，陌生的语言，传神地勾画出了一个框架，给玩家留下了很多想象的空间。（这算是游戏中的白描手法么哈哈^_^)</p>\n<p>有人说，Yorda象征着希望和信念，一旦失去她，那么人生也就随之暗淡（游戏结束），放弃了她就如同放弃了自己的灵魂。</p>\n<p>关于游戏的各种象征意义，我查阅了很多资料，到各个论坛上都找到了很多人对这款游戏的感受。我玩了两周目，其中二周目是在斗鱼上直播的，我的心中也有我自己的答案。</p>\n<p>正如莎士比亚的名言“一千个人眼里有一千个哈姆雷特”，这个答案也是因人而异的。每个人都会结合自己的经历与思考，来得出不同的答案，这是对艺术进行再造的过程，而这个问题更没有什么标准答案。<br><img src=\"https://qiniu.plusplus7.com/ICO_letgo.jpg-fullpercent\"></p>\n<h2 id=\"遥远而真实的梦\"><a href=\"#遥远而真实的梦\" class=\"headerlink\" title=\"遥远而真实的梦\"></a>遥远而真实的梦</h2><p>现在回想起，游戏中灰朦不清的远山，雾蒙迷离的海上，这一切就像是很久以前做过的一场梦一样，梦里的场景是那么的虚幻；然而又想起古堡里去过一次又一次熟悉得不能再熟悉的走廊，明明就在眼前却无能为力的感觉，不管走到哪儿都要牵着她的手，这些感受却又是那么真实的存在。</p>\n<p>游戏结尾曲《<a href=\"http://v.yinyuetai.com/video/743834\" target=\"_blank\" rel=\"noopener\">ICO -You were There-</a>》</p>\n<pre><code>You were there \n你曾在那里\nThough forgotten all promises we keep \n虽已忘记我们的约定\nThe island bathes in the sun’s bright rays \n岛屿浸在明媚的阳光里\nDistant hills wear a shroud of grey \n远山灰朦不清\nA lonely breeze whispers in the trees \n孤独的微风在林中低呓\nSole key to this mystery \n诉说着那神秘的谜\n</code></pre><h2 id=\"第九艺术\"><a href=\"#第九艺术\" class=\"headerlink\" title=\"第九艺术\"></a>第九艺术</h2><p>《ICO》毫无疑问就是一款游戏艺术品。</p>\n<p><em>以下内容带有强烈个人感情色彩，慎读…</em></p>\n<p>我对于神作有自己的定义。在《奥里与迷失之森》出现之前，只有《最终幻想9》在我心中算是“神作”级别的作品。</p>\n<p>然而，《ICO》在我心中不是“神作”，并不是因为我对于“神作”定义的标准太高，准确的来说，这款游戏的出现，完全颠覆了我之前对于“神作”的定义，我一时无法对这款游戏贴上标签，就像这款游戏给我带来的那种“独特”的感受一摸一样。（或许本身“贴标签”这件事就是非常可笑的）</p>"},{"layout":"post","title":"Leetcode解题报告合集","date":"2015-07-07T04:21:00.000Z","comments":1,"reward":true,"_content":"\n当前进度：100/153\n\n### [Find Minimum in Rotated Sorted Array II][-2]\n\n二分，寻找轮换排序数组的最小元素，可能有相同元素\n\n<!-- more -->\n\n还是对数组进行二分，当左值等于右值时，可以把二分的范围两边同时减1\n\n这样做的话，算法时间复杂度是O(n)，不过OJ还是会给Accepted...\n\n### [Find Minimum in Rotated Sorted Array][-1]\n\n二分，寻找轮换排序数组的最小元素\n\nO(logn)的算法是对数组进行二分，如果中间值大于左值，则说明答案在[mid+1,r]；反之，则答案在[l,mid]\n\n注意特殊处理只有一个元素的情况\n\n### [Maximum Product Subarray][1]\n\n一维递推，空间复杂度可以优化为O(1)\n\ndp_max[i]维护包含第i元素的最大值\n\ndp_min[i]维护包含第i元素的最小值\n\n动态转移方程：\n\n```\n    dp_max[i]=max(dp_max[i-1]\\*A[i], A[i], dp_min[i-1]\\*A[i])\n    dp_min[i]=max(dp_min[i-1]\\*A[i], A[i], dp_max[i-1]\\*A[i])\n```\n### [Reverse Words in a String][2]\n\n字符串处理，简单题\n\n### [Evaluate Reverse Polish Notation][3]\n\n简单题，用stack模拟一下就好了\n\n### [Max Points on a Line][4]\n\n几何题，枚举两个点组成一条直线，遍历其他点，统计在线上点的数量，就好\n\nTrick: 两个点在同一位置需要特殊处理\n\n### [Sort List][5]\n\n单链表排序，要求时间复杂度O(nlogn)，空间复杂度O(1)\n\n用归并排序就ok，后来[biaaib][WEIBO_BIAAIB]告诉我，用快速排序也可以在空间复杂度O(1)的情况下实现\n\n### [Insertion Sort List][6]\n\n单链表排序，要求使用插入排序\n\n### [LRU Cache][7]\n\nLRU调度算法，实现一个基于LRU算法的Cache\n\n用STL的map和list可以很快地实现一个\n\n吐槽：搞不懂为什么这题难度是hard...\n\n### [Binary Tree Postorder Traversal][8]\n\n二叉树的后根序遍历，递归简单实现\n\n### [Binary Tree Preorder Traversal][9]\n\n二叉树的先根序遍历，递归简单实现\n\n### [Reorder List][10]\n\n单链表的重排列\n\n把链表从中间截断，把后半段反序，然后把挨着把后半段的元素，每隔一个插入到前半段中\n\n### [Linked List Cycle II][11]\n\n单链表判环，要求定位到环的起点，要求不使用额外空间，我对此的理解是要求空间复杂度O(1)\n\n使用快慢指针，当两个指针重合时，令一个新的指针从head开始往下遍历，同时快慢指针中的任意一个和新指针一起往下遍历，当和新指针重合时，那么重合的结点便是环的起点。\n\n### [Linked List Cycle][12]\n\n单链表判环，用快慢指针即可。\n\n### [Word Break II][13]\n\n动态规划＋Trie树，和[LA 3942 Remember the Word][LA 3942 Remember the Word]一样差不多，只不过此题还要求所有的方案。\n\ndp[i]表示以第i个字符开始的后缀字符串有多少种拼接方案\n那么有动态转移方程：dp[i] = sum{ dp[i+len(x) | x 为字典中的字符串，并且x是i后缀的前缀] }\n\n用Trie树来加速查找x的过程，不过我写得有点搓...感觉也没快多少...\n\n### [Word Break][14]\n\n动态规划＋Trie树，和[LA 3942 Remember the Word][LA 3942 Remember the Word]一样差不多，但是此题只需要求dp[0]是否不为0即可\n\n解法同上\n\n### [Copy List with Random Pointer][15]\n\n单链表的深拷贝\n\n空间复杂度O(n)的方法很容易想到，我用的是O(1)的方法\n\n分三步，先把链表的每一个结点复制一个，插入到该结点的后面，复制结点的random指针先设为NULL\n然后，遍历单链表，把根据原始结点的random指针来设置复制结点的random指针；因为每个原始结点的下一个就是该结点的复制结点，所以复制结点的random指针应该指向其原始结点的random指针所指向的结点的next指针所指向的结点\n\n```\n    new->random = raw->random->next;\n```\n\n最后，把原始元素和复制元素分开形成两个单链表，复制元素形成的单链表就是深拷贝的结果\n\n### [Single Number II][16]\n\n水题，给一个数组，查找出现次数少于三次的元素\n\n统计一下每一位1的个数，因为只有一个元素出现少于三次，所以每一位1的个数模3就能知道该元素的那一位是否为1\n\n这题好像是某个ACM比赛的签到题\n\n### [Single Number I][17]\n\n水题，给一个数组，查找出现次数少于两次的元素\n\n答案是所有元素的异或和\n\n### [Candy][18]\n\n给定一数列，求一新数列，满足某元素在原数列中大于相邻元素，在新数列中也大于相邻元素，求新数列和最少是多少，新数列最小值是1\n\n从左往右扫一遍，使原本是递增的区间在新数列中也递增；从右往左扫一遍，使递减的也递减\n\n### [Gas Station][19]\n\n给定一个环，给出环上路径的距离和汽油量。求从某点出发，能遍历所有结点，而在遍历的每一时刻，汽油量不为负。\n\n把线路扩展成一个环，从起点出发开始遍历。当走到某点，发现汽油量为负，则能判定，在该点之前的所有点都不能为起点。\n\n### [Clone Graph][20]\n\n深拷贝一个无向图，有环\n\n有空间复杂度为O(1)的解法，就和之前的单链表深拷贝一样，把新复制的结点加到原结点的边的最后面，然后遍历原结点的边，把所有原结点的边连着的结点的新复制结点和之前的新复制的结点连接起来，最后再pop掉原结点的边中最后面的元素，就ok\n\n我用的是一个O(n)的解法，那就是直接DFS，用map记录所有遇到过的结点，把label作为key，新复制的结点作为value存起来。DFS时，如果遇到访问过的结点，就直接返回map中的value，否则新建结点，然后遍历所有边，递归地为新建结点建立边的关系\n\n我之前写了一个[O(1)版本][WA_CLONE_GRAPH]不知道为什么会Wrong Answer，我在本机测试发现结果是正确的。看了下discuss，发现有人和我在同一组case遇到同样的问题\n\n### [Palindrome Partitioning II][21]\n\n将字符串分割为一个个回文串，求最少分多少次\n\n可以先用O(n^2)的预处理，得到is_pal[i][j]表示i到j是否是回文串\n\n再用O(n^2)的dp，求出dp[i]表示包含第i个字符能分割字符串的最小分割数\n\n答案就是dp[n-1]\n\n### [Palindrome Partitioning I][22]\n\n将字符串分割为一个个回文串，求所有分法\n\n可以先用O(n^2)的预处理，得到is_pal[i][j]表示i到j是否是回文串\n\n然后DFS一下，就行了\n\n### [Surrounded Regions][23]\n\n把图中所有被X包围的O置为X，求最终图\n\n从图四个边上所有的O开始DFS，所有遍历到的O在最终图中都不是X\n\n处理完了之后，把所有没有遍历到的O置为X即可\n\n### [Sum Root to Leaf Numbers][24]\n\nDFS，求所有根到叶子结点所产生数之和\n\n### [Longest Consecutive Sequence][25]\n\n用给定数组组成一条最长连续数列，求长度为多少\n\n要求使用O(n)的算法\n\n照着O(n)的尿性，就知道应该使用hash\n\n把所有数字放到一个 set (unordered_set) 中，然后遍历set中的元素\n\n因为unordered_set使用的是hash，所以可以根据当前元素在平均O(1)的时间复杂度下知道是否存在相邻元素\n\n把所有相邻元素都找一次，然后记录最长能达到多少，再把所有找过的元素从set中删掉就ok\n\n### [Word Ladder II][26]\n\n搜索题，从某个单词转换到另一个单词的条件是两个单词最多只有1个字符不同。给出一个字典，从起始单词最少转换几次到目标单词，求所有最少转换的路径\n\n先BFS按层数搜索，搜到目标单词那一层时，停止。纪录所有单词的前驱单词。\n\n根据记录单词的前驱单词，从目标单词开始反向DFS，同时记录答案即可\n\n### [Word Ladder][27]\n\n搜索题，从某个单词转换到另一个单词的条件是两个单词最多只有1个字符不同。给出一个字典，求从起始单词最少转换几次到目标单词\n\nBFS一下就好了\n\n### [Valid Palindrome][28]\n\n除掉特殊字符外的字符串，判断是否是回文串\n\n扫一遍就好了\n\n### [Binary Tree Maximum Path Sum][29]\n\n树形动态规划，求二叉树上两节点之间路径和\n\n其实只是有点树形dp的味道。DFS一下，dp[i]表示以节点i为终点，以节点i的某个儿子节点为起点的最大路径和，dp[i] = max(dp[i->right]+val[i], dp[i->left]+val[i])\n\n实际在求的时候，可以利用递归把dp数组省掉，答案ans = max(dp[i->left]+dp[i->right]+val[i], dp[i->left]+val[i], dp[i->right]+val[i])\n\n### [Best Time to Buy and Sell Stock III][30]\n\n动态规划，给出某股票的n日的价格，能买进卖出最多两次，求最多能赚多少\n\ndp_left[i]表示从0到i，买卖1次最多能赚多少\ndp_right[i]表示从i到n，买卖1次最多能赚多少\n\n答案就是dp_left[i-1]+dp_right[i]\n\n### [Best Time to Buy and Sell Stock II][31]\n\n贪心，扫一遍，求出所有峰值和谷值，把差累加起来就好\n\n需要注意判断谷值时的，>=和<的符号使用问题\n\n### [Best Time to Buy and Sell Stock I][32]\n\n简单题，扫一遍，求出最大和最小，答案是差值\n\n### [Triangle][33]\n\n动态规划入门题\n\ndp[i][j] = min(dp[i-1][j]+val[i][j], dp[i-1][j-1]+val[i][j])\n\n### [Pascal's Triangle II][34]\n\n数论，求杨辉三角的第k行\n\n利用递推求组合数的公式可以直接算出答案\n\n公式的推导见《算法竞赛入门经典》第183页\n\n### [Pascal's Triangle][35]\n\n数论，求杨辉三角的第k行\n\n利用递推求组合数的公式可以直接算出答案\n\n公式的推导见《算法竞赛入门经典》第183页\n\n### [Populating Next Right Pointers in Each Node II][36]\n\n指针处理，把任意二叉树上节点和右边离它最近的节点连接起来\n\n从最高层往下处理，每层的儿子可以借助其父亲的next节点找到右边离它最近的节点\n\n递归往下即可\n\n### [Populating Next Right Pointers in Each Node][37]\n\n指针处理，把完全二叉树上节点和右边离它最近的节点连接起来\n\n从最高层往下处理，每层的右儿子的next指向其父亲的next的left节点\n\n递归往下即可\n\n### [Distinct Subsequences][38]\n\n动态规划，求S的子序列中有多少是T\n\ndp[i][j]表示S[0...i]的子序列有多少是T[0...j]\n\n那么dp[i][j] = dp[i-1][j]+dp[i-1][j-1], 当S[i] == T[j]\n    dp[i][j] = dp[i-1][j]               当S[i] != T[j]\n\n### [Flatten Binary Tree to Linked List][39]\n\n指针处理，把二叉树变成单链表\n\nflatten把每棵子树变成链，递归一下\n\n当左儿子存在时，把左边最下面的节点找到，把它和右儿子接起来就ok\n\n### [Path Sum II][40]\n\n搜索，DFS一下，记录路径就好了\n\n### [Path Sum I][41]\n\n搜索，DFS一下，判断一下就好了\n\n### [Minimum Depth of Binary Tree][42]\n\n搜索，DFS一下，记录最小值就好了\n\n### [Balanced Binary Tree][43]\n\n递归，判断某二叉树是否平衡\n\n纪录左子树和右子树的高度，比较差值\n\n递归往下即可\n\n### [Convert Sorted List to Binary Search Tree][44]\n\n递归，把有序链表转化为二叉树\n\n类似于中序遍历，从左子树开始建树\n\n增加l和r记录递归的范围，便于控制\n\n### [Convert Sorted Array to Binary Search Tree][45]\n\n递归，把有序数组转化为二叉树\n\n类似于中序遍历，从左子树开始建树\n\n增加l和r记录递归的范围，便于控制\n\n### [Binary Tree Level Order Traversal II][46]\n\n二叉树的层次遍历，按层数倒序输出\n\nDFS的时候，记录层数，把值放到相应的vector中，利用reverse函数可以直接反转vector\n\n### [Construct Binary Tree from Inorder and Postorder Traversal][47]\n\n根据中根序和后根序重建二叉树\n\n递归的进行，对两个数组都增加l和r值，便于操作，先建左子树再建右子树\n\n### [Construct Binary Tree from Preorder and Inorder Traversal][48]\n\n根据中根序和先根序重建二叉树\n\n递归的进行，对两个数组都增加l和r值，便于操作，先建左子树再建右子树\n\n### [Maximum Depth of Binary Tree][49]\n\n求二叉树最大层数\n\nDFS一下，记录层数就好\n\n### [Binary Tree Zigzag Level Order Traversal][50]\n\n二叉树的层次遍历，把每隔一层的元素反转后输出\n\nDFS的时候，记录层数，把值放到相应的vector中，利用reverse函数可以直接反转奇数层的vector\n\n### [Binary Tree Level Order Traversal][51]\n\n二叉树的层次遍历，把每隔一层的元素反转后输出\n\nDFS的时候，记录层数，把值放到相应的vector中\n\n### [Symmetric Tree][52]\n\n判断二叉树是否对称\n\n从root的左右儿子分开，一起往下递归即可\n\n### [Same Tree][53]\n\n判断二叉树是否相同\n\n一起从root开始往下递归即可\n\n[1]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/maximum_product_subarray.cc\n[2]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/reverse_words_in_a_string.cc\n[3]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/evaluate_reverse_polish_notation.cc\n[4]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/max_points_on_a_line.cc\n[5]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/sort_list.cc\n[6]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/insertion_sort_list.cc\n[7]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/lru_cache.cc\n[8]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/binary_tree_postorder_traversal.cc\n[9]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/binary_tree_preorder_traversal.cc\n[10]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/reorder_list.cc\n[11]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/linked_list_cycle_ii.cc\n[12]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/linked_list_cycle_i.cc\n[13]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/word_break_ii.cc\n[14]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/word_break_i.cc\n[15]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/copy_list_with_random_pointer.cc\n[16]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/single_number_ii.cc\n[17]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/single_number_i.cc\n[18]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/candy.cc\n[19]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/gas_station.cc\n[-1]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/find_minimum_in_rotated_sorted_array.cc\n[20]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/clone_graph.cc\n[21]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/palindrome_partitioning_ii.cc\n[22]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/palindrome_partitioning_i.cc\n[23]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/surrounded_regions.cc\n[24]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/sum_root_to_leaf_numbers.cc\n[25]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/longest_consecutive_sequence.cc\n[26]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/word_ladder_ii.cc\n[27]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/word_ladder_i.cc\n[28]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/valid_palindrome.cc\n[29]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/binary_tree_maximum_path_sum.cc\n[30]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/best_time_to_buy_and_sell_stock_iii.cc\n[31]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/best_time_to_buy_and_sell_stock_ii.cc\n[32]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/best_time_to_buy_and_sell_stock_i.cc\n[33]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/triangle.cc\n[34]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/pascals_triangle_ii.cc\n[35]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/pascals_triangle_i.cc\n[36]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/populating_next_right_pointers_in_each_node_ii.cc\n[37]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/populating_next_right_pointers_in_each_node_i.cc\n[38]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/distinct_subsequences.cc\n[39]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/flatten_binary_tree_to_linked_list.cc\n[40]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/path_sum_ii.cc\n[41]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/path_sum_i.cc\n[42]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/minimum_depth_of_binary_tree.cc\n[-2]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/find_minimum_in_rotated_sorted_array_ii.cc\n[43]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/balaced_binary_tree.cc\n[44]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/convert_sorted_list_to_binary_search_tree.cc\n[45]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/convert_sorted_array_to_binary_search_tree.cc\n[46]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/binary_tree_level_order_traversal_ii.cc\n[47]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/construct_binary_tree_from_inorder_and_postorder_traversal.cc\n[48]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/construct_binary_tree_from_preorder_and_inorder_traversal.cc\n[49]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/maximum_depth_of_binary_tree.cc\n[50]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/binary_tree_zigzag_level_order_traversal.cc\n[51]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/binary_tree_level_order_traversal.cc\n[52]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/symmetric_tree.cc\n[53]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/same_tree.cc\n\n\n[WA_CLONE_GRAPH]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/wa_clone_graph.cc\n[WEIBO_BIAAIB]: http://weibo.com/biaaib\n[LA 3942 Remember the Word]: http://blog.csdn.net/sssogs/article/details/8789386\n","source":"_posts/Leetcode解题报告合集.md","raw":"---\nlayout: post\ntitle: Leetcode解题报告合集\ndate: 2015-7-7 12:21\ncomments: true\nreward: true\ntags:\n    - Leetcode\n---\n\n当前进度：100/153\n\n### [Find Minimum in Rotated Sorted Array II][-2]\n\n二分，寻找轮换排序数组的最小元素，可能有相同元素\n\n<!-- more -->\n\n还是对数组进行二分，当左值等于右值时，可以把二分的范围两边同时减1\n\n这样做的话，算法时间复杂度是O(n)，不过OJ还是会给Accepted...\n\n### [Find Minimum in Rotated Sorted Array][-1]\n\n二分，寻找轮换排序数组的最小元素\n\nO(logn)的算法是对数组进行二分，如果中间值大于左值，则说明答案在[mid+1,r]；反之，则答案在[l,mid]\n\n注意特殊处理只有一个元素的情况\n\n### [Maximum Product Subarray][1]\n\n一维递推，空间复杂度可以优化为O(1)\n\ndp_max[i]维护包含第i元素的最大值\n\ndp_min[i]维护包含第i元素的最小值\n\n动态转移方程：\n\n```\n    dp_max[i]=max(dp_max[i-1]\\*A[i], A[i], dp_min[i-1]\\*A[i])\n    dp_min[i]=max(dp_min[i-1]\\*A[i], A[i], dp_max[i-1]\\*A[i])\n```\n### [Reverse Words in a String][2]\n\n字符串处理，简单题\n\n### [Evaluate Reverse Polish Notation][3]\n\n简单题，用stack模拟一下就好了\n\n### [Max Points on a Line][4]\n\n几何题，枚举两个点组成一条直线，遍历其他点，统计在线上点的数量，就好\n\nTrick: 两个点在同一位置需要特殊处理\n\n### [Sort List][5]\n\n单链表排序，要求时间复杂度O(nlogn)，空间复杂度O(1)\n\n用归并排序就ok，后来[biaaib][WEIBO_BIAAIB]告诉我，用快速排序也可以在空间复杂度O(1)的情况下实现\n\n### [Insertion Sort List][6]\n\n单链表排序，要求使用插入排序\n\n### [LRU Cache][7]\n\nLRU调度算法，实现一个基于LRU算法的Cache\n\n用STL的map和list可以很快地实现一个\n\n吐槽：搞不懂为什么这题难度是hard...\n\n### [Binary Tree Postorder Traversal][8]\n\n二叉树的后根序遍历，递归简单实现\n\n### [Binary Tree Preorder Traversal][9]\n\n二叉树的先根序遍历，递归简单实现\n\n### [Reorder List][10]\n\n单链表的重排列\n\n把链表从中间截断，把后半段反序，然后把挨着把后半段的元素，每隔一个插入到前半段中\n\n### [Linked List Cycle II][11]\n\n单链表判环，要求定位到环的起点，要求不使用额外空间，我对此的理解是要求空间复杂度O(1)\n\n使用快慢指针，当两个指针重合时，令一个新的指针从head开始往下遍历，同时快慢指针中的任意一个和新指针一起往下遍历，当和新指针重合时，那么重合的结点便是环的起点。\n\n### [Linked List Cycle][12]\n\n单链表判环，用快慢指针即可。\n\n### [Word Break II][13]\n\n动态规划＋Trie树，和[LA 3942 Remember the Word][LA 3942 Remember the Word]一样差不多，只不过此题还要求所有的方案。\n\ndp[i]表示以第i个字符开始的后缀字符串有多少种拼接方案\n那么有动态转移方程：dp[i] = sum{ dp[i+len(x) | x 为字典中的字符串，并且x是i后缀的前缀] }\n\n用Trie树来加速查找x的过程，不过我写得有点搓...感觉也没快多少...\n\n### [Word Break][14]\n\n动态规划＋Trie树，和[LA 3942 Remember the Word][LA 3942 Remember the Word]一样差不多，但是此题只需要求dp[0]是否不为0即可\n\n解法同上\n\n### [Copy List with Random Pointer][15]\n\n单链表的深拷贝\n\n空间复杂度O(n)的方法很容易想到，我用的是O(1)的方法\n\n分三步，先把链表的每一个结点复制一个，插入到该结点的后面，复制结点的random指针先设为NULL\n然后，遍历单链表，把根据原始结点的random指针来设置复制结点的random指针；因为每个原始结点的下一个就是该结点的复制结点，所以复制结点的random指针应该指向其原始结点的random指针所指向的结点的next指针所指向的结点\n\n```\n    new->random = raw->random->next;\n```\n\n最后，把原始元素和复制元素分开形成两个单链表，复制元素形成的单链表就是深拷贝的结果\n\n### [Single Number II][16]\n\n水题，给一个数组，查找出现次数少于三次的元素\n\n统计一下每一位1的个数，因为只有一个元素出现少于三次，所以每一位1的个数模3就能知道该元素的那一位是否为1\n\n这题好像是某个ACM比赛的签到题\n\n### [Single Number I][17]\n\n水题，给一个数组，查找出现次数少于两次的元素\n\n答案是所有元素的异或和\n\n### [Candy][18]\n\n给定一数列，求一新数列，满足某元素在原数列中大于相邻元素，在新数列中也大于相邻元素，求新数列和最少是多少，新数列最小值是1\n\n从左往右扫一遍，使原本是递增的区间在新数列中也递增；从右往左扫一遍，使递减的也递减\n\n### [Gas Station][19]\n\n给定一个环，给出环上路径的距离和汽油量。求从某点出发，能遍历所有结点，而在遍历的每一时刻，汽油量不为负。\n\n把线路扩展成一个环，从起点出发开始遍历。当走到某点，发现汽油量为负，则能判定，在该点之前的所有点都不能为起点。\n\n### [Clone Graph][20]\n\n深拷贝一个无向图，有环\n\n有空间复杂度为O(1)的解法，就和之前的单链表深拷贝一样，把新复制的结点加到原结点的边的最后面，然后遍历原结点的边，把所有原结点的边连着的结点的新复制结点和之前的新复制的结点连接起来，最后再pop掉原结点的边中最后面的元素，就ok\n\n我用的是一个O(n)的解法，那就是直接DFS，用map记录所有遇到过的结点，把label作为key，新复制的结点作为value存起来。DFS时，如果遇到访问过的结点，就直接返回map中的value，否则新建结点，然后遍历所有边，递归地为新建结点建立边的关系\n\n我之前写了一个[O(1)版本][WA_CLONE_GRAPH]不知道为什么会Wrong Answer，我在本机测试发现结果是正确的。看了下discuss，发现有人和我在同一组case遇到同样的问题\n\n### [Palindrome Partitioning II][21]\n\n将字符串分割为一个个回文串，求最少分多少次\n\n可以先用O(n^2)的预处理，得到is_pal[i][j]表示i到j是否是回文串\n\n再用O(n^2)的dp，求出dp[i]表示包含第i个字符能分割字符串的最小分割数\n\n答案就是dp[n-1]\n\n### [Palindrome Partitioning I][22]\n\n将字符串分割为一个个回文串，求所有分法\n\n可以先用O(n^2)的预处理，得到is_pal[i][j]表示i到j是否是回文串\n\n然后DFS一下，就行了\n\n### [Surrounded Regions][23]\n\n把图中所有被X包围的O置为X，求最终图\n\n从图四个边上所有的O开始DFS，所有遍历到的O在最终图中都不是X\n\n处理完了之后，把所有没有遍历到的O置为X即可\n\n### [Sum Root to Leaf Numbers][24]\n\nDFS，求所有根到叶子结点所产生数之和\n\n### [Longest Consecutive Sequence][25]\n\n用给定数组组成一条最长连续数列，求长度为多少\n\n要求使用O(n)的算法\n\n照着O(n)的尿性，就知道应该使用hash\n\n把所有数字放到一个 set (unordered_set) 中，然后遍历set中的元素\n\n因为unordered_set使用的是hash，所以可以根据当前元素在平均O(1)的时间复杂度下知道是否存在相邻元素\n\n把所有相邻元素都找一次，然后记录最长能达到多少，再把所有找过的元素从set中删掉就ok\n\n### [Word Ladder II][26]\n\n搜索题，从某个单词转换到另一个单词的条件是两个单词最多只有1个字符不同。给出一个字典，从起始单词最少转换几次到目标单词，求所有最少转换的路径\n\n先BFS按层数搜索，搜到目标单词那一层时，停止。纪录所有单词的前驱单词。\n\n根据记录单词的前驱单词，从目标单词开始反向DFS，同时记录答案即可\n\n### [Word Ladder][27]\n\n搜索题，从某个单词转换到另一个单词的条件是两个单词最多只有1个字符不同。给出一个字典，求从起始单词最少转换几次到目标单词\n\nBFS一下就好了\n\n### [Valid Palindrome][28]\n\n除掉特殊字符外的字符串，判断是否是回文串\n\n扫一遍就好了\n\n### [Binary Tree Maximum Path Sum][29]\n\n树形动态规划，求二叉树上两节点之间路径和\n\n其实只是有点树形dp的味道。DFS一下，dp[i]表示以节点i为终点，以节点i的某个儿子节点为起点的最大路径和，dp[i] = max(dp[i->right]+val[i], dp[i->left]+val[i])\n\n实际在求的时候，可以利用递归把dp数组省掉，答案ans = max(dp[i->left]+dp[i->right]+val[i], dp[i->left]+val[i], dp[i->right]+val[i])\n\n### [Best Time to Buy and Sell Stock III][30]\n\n动态规划，给出某股票的n日的价格，能买进卖出最多两次，求最多能赚多少\n\ndp_left[i]表示从0到i，买卖1次最多能赚多少\ndp_right[i]表示从i到n，买卖1次最多能赚多少\n\n答案就是dp_left[i-1]+dp_right[i]\n\n### [Best Time to Buy and Sell Stock II][31]\n\n贪心，扫一遍，求出所有峰值和谷值，把差累加起来就好\n\n需要注意判断谷值时的，>=和<的符号使用问题\n\n### [Best Time to Buy and Sell Stock I][32]\n\n简单题，扫一遍，求出最大和最小，答案是差值\n\n### [Triangle][33]\n\n动态规划入门题\n\ndp[i][j] = min(dp[i-1][j]+val[i][j], dp[i-1][j-1]+val[i][j])\n\n### [Pascal's Triangle II][34]\n\n数论，求杨辉三角的第k行\n\n利用递推求组合数的公式可以直接算出答案\n\n公式的推导见《算法竞赛入门经典》第183页\n\n### [Pascal's Triangle][35]\n\n数论，求杨辉三角的第k行\n\n利用递推求组合数的公式可以直接算出答案\n\n公式的推导见《算法竞赛入门经典》第183页\n\n### [Populating Next Right Pointers in Each Node II][36]\n\n指针处理，把任意二叉树上节点和右边离它最近的节点连接起来\n\n从最高层往下处理，每层的儿子可以借助其父亲的next节点找到右边离它最近的节点\n\n递归往下即可\n\n### [Populating Next Right Pointers in Each Node][37]\n\n指针处理，把完全二叉树上节点和右边离它最近的节点连接起来\n\n从最高层往下处理，每层的右儿子的next指向其父亲的next的left节点\n\n递归往下即可\n\n### [Distinct Subsequences][38]\n\n动态规划，求S的子序列中有多少是T\n\ndp[i][j]表示S[0...i]的子序列有多少是T[0...j]\n\n那么dp[i][j] = dp[i-1][j]+dp[i-1][j-1], 当S[i] == T[j]\n    dp[i][j] = dp[i-1][j]               当S[i] != T[j]\n\n### [Flatten Binary Tree to Linked List][39]\n\n指针处理，把二叉树变成单链表\n\nflatten把每棵子树变成链，递归一下\n\n当左儿子存在时，把左边最下面的节点找到，把它和右儿子接起来就ok\n\n### [Path Sum II][40]\n\n搜索，DFS一下，记录路径就好了\n\n### [Path Sum I][41]\n\n搜索，DFS一下，判断一下就好了\n\n### [Minimum Depth of Binary Tree][42]\n\n搜索，DFS一下，记录最小值就好了\n\n### [Balanced Binary Tree][43]\n\n递归，判断某二叉树是否平衡\n\n纪录左子树和右子树的高度，比较差值\n\n递归往下即可\n\n### [Convert Sorted List to Binary Search Tree][44]\n\n递归，把有序链表转化为二叉树\n\n类似于中序遍历，从左子树开始建树\n\n增加l和r记录递归的范围，便于控制\n\n### [Convert Sorted Array to Binary Search Tree][45]\n\n递归，把有序数组转化为二叉树\n\n类似于中序遍历，从左子树开始建树\n\n增加l和r记录递归的范围，便于控制\n\n### [Binary Tree Level Order Traversal II][46]\n\n二叉树的层次遍历，按层数倒序输出\n\nDFS的时候，记录层数，把值放到相应的vector中，利用reverse函数可以直接反转vector\n\n### [Construct Binary Tree from Inorder and Postorder Traversal][47]\n\n根据中根序和后根序重建二叉树\n\n递归的进行，对两个数组都增加l和r值，便于操作，先建左子树再建右子树\n\n### [Construct Binary Tree from Preorder and Inorder Traversal][48]\n\n根据中根序和先根序重建二叉树\n\n递归的进行，对两个数组都增加l和r值，便于操作，先建左子树再建右子树\n\n### [Maximum Depth of Binary Tree][49]\n\n求二叉树最大层数\n\nDFS一下，记录层数就好\n\n### [Binary Tree Zigzag Level Order Traversal][50]\n\n二叉树的层次遍历，把每隔一层的元素反转后输出\n\nDFS的时候，记录层数，把值放到相应的vector中，利用reverse函数可以直接反转奇数层的vector\n\n### [Binary Tree Level Order Traversal][51]\n\n二叉树的层次遍历，把每隔一层的元素反转后输出\n\nDFS的时候，记录层数，把值放到相应的vector中\n\n### [Symmetric Tree][52]\n\n判断二叉树是否对称\n\n从root的左右儿子分开，一起往下递归即可\n\n### [Same Tree][53]\n\n判断二叉树是否相同\n\n一起从root开始往下递归即可\n\n[1]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/maximum_product_subarray.cc\n[2]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/reverse_words_in_a_string.cc\n[3]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/evaluate_reverse_polish_notation.cc\n[4]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/max_points_on_a_line.cc\n[5]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/sort_list.cc\n[6]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/insertion_sort_list.cc\n[7]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/lru_cache.cc\n[8]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/binary_tree_postorder_traversal.cc\n[9]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/binary_tree_preorder_traversal.cc\n[10]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/reorder_list.cc\n[11]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/linked_list_cycle_ii.cc\n[12]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/linked_list_cycle_i.cc\n[13]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/word_break_ii.cc\n[14]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/word_break_i.cc\n[15]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/copy_list_with_random_pointer.cc\n[16]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/single_number_ii.cc\n[17]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/single_number_i.cc\n[18]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/candy.cc\n[19]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/gas_station.cc\n[-1]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/find_minimum_in_rotated_sorted_array.cc\n[20]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/clone_graph.cc\n[21]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/palindrome_partitioning_ii.cc\n[22]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/palindrome_partitioning_i.cc\n[23]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/surrounded_regions.cc\n[24]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/sum_root_to_leaf_numbers.cc\n[25]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/longest_consecutive_sequence.cc\n[26]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/word_ladder_ii.cc\n[27]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/word_ladder_i.cc\n[28]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/valid_palindrome.cc\n[29]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/binary_tree_maximum_path_sum.cc\n[30]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/best_time_to_buy_and_sell_stock_iii.cc\n[31]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/best_time_to_buy_and_sell_stock_ii.cc\n[32]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/best_time_to_buy_and_sell_stock_i.cc\n[33]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/triangle.cc\n[34]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/pascals_triangle_ii.cc\n[35]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/pascals_triangle_i.cc\n[36]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/populating_next_right_pointers_in_each_node_ii.cc\n[37]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/populating_next_right_pointers_in_each_node_i.cc\n[38]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/distinct_subsequences.cc\n[39]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/flatten_binary_tree_to_linked_list.cc\n[40]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/path_sum_ii.cc\n[41]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/path_sum_i.cc\n[42]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/minimum_depth_of_binary_tree.cc\n[-2]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/find_minimum_in_rotated_sorted_array_ii.cc\n[43]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/balaced_binary_tree.cc\n[44]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/convert_sorted_list_to_binary_search_tree.cc\n[45]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/convert_sorted_array_to_binary_search_tree.cc\n[46]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/binary_tree_level_order_traversal_ii.cc\n[47]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/construct_binary_tree_from_inorder_and_postorder_traversal.cc\n[48]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/construct_binary_tree_from_preorder_and_inorder_traversal.cc\n[49]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/maximum_depth_of_binary_tree.cc\n[50]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/binary_tree_zigzag_level_order_traversal.cc\n[51]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/binary_tree_level_order_traversal.cc\n[52]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/symmetric_tree.cc\n[53]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/same_tree.cc\n\n\n[WA_CLONE_GRAPH]: https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/wa_clone_graph.cc\n[WEIBO_BIAAIB]: http://weibo.com/biaaib\n[LA 3942 Remember the Word]: http://blog.csdn.net/sssogs/article/details/8789386\n","slug":"Leetcode解题报告合集","published":1,"updated":"2018-05-23T14:45:26.955Z","photos":[],"link":"","_id":"cjhj92blb000ie0vf8rk1i3sz","content":"<p>当前进度：100/153</p>\n<h3 id=\"Find-Minimum-in-Rotated-Sorted-Array-II\"><a href=\"#Find-Minimum-in-Rotated-Sorted-Array-II\" class=\"headerlink\" title=\"Find Minimum in Rotated Sorted Array II\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/find_minimum_in_rotated_sorted_array_ii.cc\" target=\"_blank\" rel=\"noopener\">Find Minimum in Rotated Sorted Array II</a></h3><p>二分，寻找轮换排序数组的最小元素，可能有相同元素</p>\n<a id=\"more\"></a>\n<p>还是对数组进行二分，当左值等于右值时，可以把二分的范围两边同时减1</p>\n<p>这样做的话，算法时间复杂度是O(n)，不过OJ还是会给Accepted…</p>\n<h3 id=\"Find-Minimum-in-Rotated-Sorted-Array\"><a href=\"#Find-Minimum-in-Rotated-Sorted-Array\" class=\"headerlink\" title=\"Find Minimum in Rotated Sorted Array\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/find_minimum_in_rotated_sorted_array.cc\" target=\"_blank\" rel=\"noopener\">Find Minimum in Rotated Sorted Array</a></h3><p>二分，寻找轮换排序数组的最小元素</p>\n<p>O(logn)的算法是对数组进行二分，如果中间值大于左值，则说明答案在[mid+1,r]；反之，则答案在[l,mid]</p>\n<p>注意特殊处理只有一个元素的情况</p>\n<h3 id=\"Maximum-Product-Subarray\"><a href=\"#Maximum-Product-Subarray\" class=\"headerlink\" title=\"Maximum Product Subarray\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/maximum_product_subarray.cc\" target=\"_blank\" rel=\"noopener\">Maximum Product Subarray</a></h3><p>一维递推，空间复杂度可以优化为O(1)</p>\n<p>dp_max[i]维护包含第i元素的最大值</p>\n<p>dp_min[i]维护包含第i元素的最小值</p>\n<p>动态转移方程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dp_max[i]=max(dp_max[i-1]\\*A[i], A[i], dp_min[i-1]\\*A[i])</span><br><span class=\"line\">dp_min[i]=max(dp_min[i-1]\\*A[i], A[i], dp_max[i-1]\\*A[i])</span><br></pre></td></tr></table></figure>\n<h3 id=\"Reverse-Words-in-a-String\"><a href=\"#Reverse-Words-in-a-String\" class=\"headerlink\" title=\"Reverse Words in a String\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/reverse_words_in_a_string.cc\" target=\"_blank\" rel=\"noopener\">Reverse Words in a String</a></h3><p>字符串处理，简单题</p>\n<h3 id=\"Evaluate-Reverse-Polish-Notation\"><a href=\"#Evaluate-Reverse-Polish-Notation\" class=\"headerlink\" title=\"Evaluate Reverse Polish Notation\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/evaluate_reverse_polish_notation.cc\" target=\"_blank\" rel=\"noopener\">Evaluate Reverse Polish Notation</a></h3><p>简单题，用stack模拟一下就好了</p>\n<h3 id=\"Max-Points-on-a-Line\"><a href=\"#Max-Points-on-a-Line\" class=\"headerlink\" title=\"Max Points on a Line\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/max_points_on_a_line.cc\" target=\"_blank\" rel=\"noopener\">Max Points on a Line</a></h3><p>几何题，枚举两个点组成一条直线，遍历其他点，统计在线上点的数量，就好</p>\n<p>Trick: 两个点在同一位置需要特殊处理</p>\n<h3 id=\"Sort-List\"><a href=\"#Sort-List\" class=\"headerlink\" title=\"Sort List\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/sort_list.cc\" target=\"_blank\" rel=\"noopener\">Sort List</a></h3><p>单链表排序，要求时间复杂度O(nlogn)，空间复杂度O(1)</p>\n<p>用归并排序就ok，后来<a href=\"http://weibo.com/biaaib\" target=\"_blank\" rel=\"noopener\">biaaib</a>告诉我，用快速排序也可以在空间复杂度O(1)的情况下实现</p>\n<h3 id=\"Insertion-Sort-List\"><a href=\"#Insertion-Sort-List\" class=\"headerlink\" title=\"Insertion Sort List\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/insertion_sort_list.cc\" target=\"_blank\" rel=\"noopener\">Insertion Sort List</a></h3><p>单链表排序，要求使用插入排序</p>\n<h3 id=\"LRU-Cache\"><a href=\"#LRU-Cache\" class=\"headerlink\" title=\"LRU Cache\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/lru_cache.cc\" target=\"_blank\" rel=\"noopener\">LRU Cache</a></h3><p>LRU调度算法，实现一个基于LRU算法的Cache</p>\n<p>用STL的map和list可以很快地实现一个</p>\n<p>吐槽：搞不懂为什么这题难度是hard…</p>\n<h3 id=\"Binary-Tree-Postorder-Traversal\"><a href=\"#Binary-Tree-Postorder-Traversal\" class=\"headerlink\" title=\"Binary Tree Postorder Traversal\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/binary_tree_postorder_traversal.cc\" target=\"_blank\" rel=\"noopener\">Binary Tree Postorder Traversal</a></h3><p>二叉树的后根序遍历，递归简单实现</p>\n<h3 id=\"Binary-Tree-Preorder-Traversal\"><a href=\"#Binary-Tree-Preorder-Traversal\" class=\"headerlink\" title=\"Binary Tree Preorder Traversal\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/binary_tree_preorder_traversal.cc\" target=\"_blank\" rel=\"noopener\">Binary Tree Preorder Traversal</a></h3><p>二叉树的先根序遍历，递归简单实现</p>\n<h3 id=\"Reorder-List\"><a href=\"#Reorder-List\" class=\"headerlink\" title=\"Reorder List\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/reorder_list.cc\" target=\"_blank\" rel=\"noopener\">Reorder List</a></h3><p>单链表的重排列</p>\n<p>把链表从中间截断，把后半段反序，然后把挨着把后半段的元素，每隔一个插入到前半段中</p>\n<h3 id=\"Linked-List-Cycle-II\"><a href=\"#Linked-List-Cycle-II\" class=\"headerlink\" title=\"Linked List Cycle II\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/linked_list_cycle_ii.cc\" target=\"_blank\" rel=\"noopener\">Linked List Cycle II</a></h3><p>单链表判环，要求定位到环的起点，要求不使用额外空间，我对此的理解是要求空间复杂度O(1)</p>\n<p>使用快慢指针，当两个指针重合时，令一个新的指针从head开始往下遍历，同时快慢指针中的任意一个和新指针一起往下遍历，当和新指针重合时，那么重合的结点便是环的起点。</p>\n<h3 id=\"Linked-List-Cycle\"><a href=\"#Linked-List-Cycle\" class=\"headerlink\" title=\"Linked List Cycle\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/linked_list_cycle_i.cc\" target=\"_blank\" rel=\"noopener\">Linked List Cycle</a></h3><p>单链表判环，用快慢指针即可。</p>\n<h3 id=\"Word-Break-II\"><a href=\"#Word-Break-II\" class=\"headerlink\" title=\"Word Break II\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/word_break_ii.cc\" target=\"_blank\" rel=\"noopener\">Word Break II</a></h3><p>动态规划＋Trie树，和<a href=\"http://blog.csdn.net/sssogs/article/details/8789386\" target=\"_blank\" rel=\"noopener\">LA 3942 Remember the Word</a>一样差不多，只不过此题还要求所有的方案。</p>\n<p>dp[i]表示以第i个字符开始的后缀字符串有多少种拼接方案<br>那么有动态转移方程：dp[i] = sum{ dp[i+len(x) | x 为字典中的字符串，并且x是i后缀的前缀] }</p>\n<p>用Trie树来加速查找x的过程，不过我写得有点搓…感觉也没快多少…</p>\n<h3 id=\"Word-Break\"><a href=\"#Word-Break\" class=\"headerlink\" title=\"Word Break\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/word_break_i.cc\" target=\"_blank\" rel=\"noopener\">Word Break</a></h3><p>动态规划＋Trie树，和<a href=\"http://blog.csdn.net/sssogs/article/details/8789386\" target=\"_blank\" rel=\"noopener\">LA 3942 Remember the Word</a>一样差不多，但是此题只需要求dp[0]是否不为0即可</p>\n<p>解法同上</p>\n<h3 id=\"Copy-List-with-Random-Pointer\"><a href=\"#Copy-List-with-Random-Pointer\" class=\"headerlink\" title=\"Copy List with Random Pointer\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/copy_list_with_random_pointer.cc\" target=\"_blank\" rel=\"noopener\">Copy List with Random Pointer</a></h3><p>单链表的深拷贝</p>\n<p>空间复杂度O(n)的方法很容易想到，我用的是O(1)的方法</p>\n<p>分三步，先把链表的每一个结点复制一个，插入到该结点的后面，复制结点的random指针先设为NULL<br>然后，遍历单链表，把根据原始结点的random指针来设置复制结点的random指针；因为每个原始结点的下一个就是该结点的复制结点，所以复制结点的random指针应该指向其原始结点的random指针所指向的结点的next指针所指向的结点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new-&gt;random = raw-&gt;random-&gt;next;</span><br></pre></td></tr></table></figure>\n<p>最后，把原始元素和复制元素分开形成两个单链表，复制元素形成的单链表就是深拷贝的结果</p>\n<h3 id=\"Single-Number-II\"><a href=\"#Single-Number-II\" class=\"headerlink\" title=\"Single Number II\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/single_number_ii.cc\" target=\"_blank\" rel=\"noopener\">Single Number II</a></h3><p>水题，给一个数组，查找出现次数少于三次的元素</p>\n<p>统计一下每一位1的个数，因为只有一个元素出现少于三次，所以每一位1的个数模3就能知道该元素的那一位是否为1</p>\n<p>这题好像是某个ACM比赛的签到题</p>\n<h3 id=\"Single-Number-I\"><a href=\"#Single-Number-I\" class=\"headerlink\" title=\"Single Number I\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/single_number_i.cc\" target=\"_blank\" rel=\"noopener\">Single Number I</a></h3><p>水题，给一个数组，查找出现次数少于两次的元素</p>\n<p>答案是所有元素的异或和</p>\n<h3 id=\"Candy\"><a href=\"#Candy\" class=\"headerlink\" title=\"Candy\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/candy.cc\" target=\"_blank\" rel=\"noopener\">Candy</a></h3><p>给定一数列，求一新数列，满足某元素在原数列中大于相邻元素，在新数列中也大于相邻元素，求新数列和最少是多少，新数列最小值是1</p>\n<p>从左往右扫一遍，使原本是递增的区间在新数列中也递增；从右往左扫一遍，使递减的也递减</p>\n<h3 id=\"Gas-Station\"><a href=\"#Gas-Station\" class=\"headerlink\" title=\"Gas Station\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/gas_station.cc\" target=\"_blank\" rel=\"noopener\">Gas Station</a></h3><p>给定一个环，给出环上路径的距离和汽油量。求从某点出发，能遍历所有结点，而在遍历的每一时刻，汽油量不为负。</p>\n<p>把线路扩展成一个环，从起点出发开始遍历。当走到某点，发现汽油量为负，则能判定，在该点之前的所有点都不能为起点。</p>\n<h3 id=\"Clone-Graph\"><a href=\"#Clone-Graph\" class=\"headerlink\" title=\"Clone Graph\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/clone_graph.cc\" target=\"_blank\" rel=\"noopener\">Clone Graph</a></h3><p>深拷贝一个无向图，有环</p>\n<p>有空间复杂度为O(1)的解法，就和之前的单链表深拷贝一样，把新复制的结点加到原结点的边的最后面，然后遍历原结点的边，把所有原结点的边连着的结点的新复制结点和之前的新复制的结点连接起来，最后再pop掉原结点的边中最后面的元素，就ok</p>\n<p>我用的是一个O(n)的解法，那就是直接DFS，用map记录所有遇到过的结点，把label作为key，新复制的结点作为value存起来。DFS时，如果遇到访问过的结点，就直接返回map中的value，否则新建结点，然后遍历所有边，递归地为新建结点建立边的关系</p>\n<p>我之前写了一个<a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/wa_clone_graph.cc\" target=\"_blank\" rel=\"noopener\">O(1)版本</a>不知道为什么会Wrong Answer，我在本机测试发现结果是正确的。看了下discuss，发现有人和我在同一组case遇到同样的问题</p>\n<h3 id=\"Palindrome-Partitioning-II\"><a href=\"#Palindrome-Partitioning-II\" class=\"headerlink\" title=\"Palindrome Partitioning II\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/palindrome_partitioning_ii.cc\" target=\"_blank\" rel=\"noopener\">Palindrome Partitioning II</a></h3><p>将字符串分割为一个个回文串，求最少分多少次</p>\n<p>可以先用O(n^2)的预处理，得到is_pal[i][j]表示i到j是否是回文串</p>\n<p>再用O(n^2)的dp，求出dp[i]表示包含第i个字符能分割字符串的最小分割数</p>\n<p>答案就是dp[n-1]</p>\n<h3 id=\"Palindrome-Partitioning-I\"><a href=\"#Palindrome-Partitioning-I\" class=\"headerlink\" title=\"Palindrome Partitioning I\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/palindrome_partitioning_i.cc\" target=\"_blank\" rel=\"noopener\">Palindrome Partitioning I</a></h3><p>将字符串分割为一个个回文串，求所有分法</p>\n<p>可以先用O(n^2)的预处理，得到is_pal[i][j]表示i到j是否是回文串</p>\n<p>然后DFS一下，就行了</p>\n<h3 id=\"Surrounded-Regions\"><a href=\"#Surrounded-Regions\" class=\"headerlink\" title=\"Surrounded Regions\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/surrounded_regions.cc\" target=\"_blank\" rel=\"noopener\">Surrounded Regions</a></h3><p>把图中所有被X包围的O置为X，求最终图</p>\n<p>从图四个边上所有的O开始DFS，所有遍历到的O在最终图中都不是X</p>\n<p>处理完了之后，把所有没有遍历到的O置为X即可</p>\n<h3 id=\"Sum-Root-to-Leaf-Numbers\"><a href=\"#Sum-Root-to-Leaf-Numbers\" class=\"headerlink\" title=\"Sum Root to Leaf Numbers\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/sum_root_to_leaf_numbers.cc\" target=\"_blank\" rel=\"noopener\">Sum Root to Leaf Numbers</a></h3><p>DFS，求所有根到叶子结点所产生数之和</p>\n<h3 id=\"Longest-Consecutive-Sequence\"><a href=\"#Longest-Consecutive-Sequence\" class=\"headerlink\" title=\"Longest Consecutive Sequence\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/longest_consecutive_sequence.cc\" target=\"_blank\" rel=\"noopener\">Longest Consecutive Sequence</a></h3><p>用给定数组组成一条最长连续数列，求长度为多少</p>\n<p>要求使用O(n)的算法</p>\n<p>照着O(n)的尿性，就知道应该使用hash</p>\n<p>把所有数字放到一个 set (unordered_set) 中，然后遍历set中的元素</p>\n<p>因为unordered_set使用的是hash，所以可以根据当前元素在平均O(1)的时间复杂度下知道是否存在相邻元素</p>\n<p>把所有相邻元素都找一次，然后记录最长能达到多少，再把所有找过的元素从set中删掉就ok</p>\n<h3 id=\"Word-Ladder-II\"><a href=\"#Word-Ladder-II\" class=\"headerlink\" title=\"Word Ladder II\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/word_ladder_ii.cc\" target=\"_blank\" rel=\"noopener\">Word Ladder II</a></h3><p>搜索题，从某个单词转换到另一个单词的条件是两个单词最多只有1个字符不同。给出一个字典，从起始单词最少转换几次到目标单词，求所有最少转换的路径</p>\n<p>先BFS按层数搜索，搜到目标单词那一层时，停止。纪录所有单词的前驱单词。</p>\n<p>根据记录单词的前驱单词，从目标单词开始反向DFS，同时记录答案即可</p>\n<h3 id=\"Word-Ladder\"><a href=\"#Word-Ladder\" class=\"headerlink\" title=\"Word Ladder\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/word_ladder_i.cc\" target=\"_blank\" rel=\"noopener\">Word Ladder</a></h3><p>搜索题，从某个单词转换到另一个单词的条件是两个单词最多只有1个字符不同。给出一个字典，求从起始单词最少转换几次到目标单词</p>\n<p>BFS一下就好了</p>\n<h3 id=\"Valid-Palindrome\"><a href=\"#Valid-Palindrome\" class=\"headerlink\" title=\"Valid Palindrome\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/valid_palindrome.cc\" target=\"_blank\" rel=\"noopener\">Valid Palindrome</a></h3><p>除掉特殊字符外的字符串，判断是否是回文串</p>\n<p>扫一遍就好了</p>\n<h3 id=\"Binary-Tree-Maximum-Path-Sum\"><a href=\"#Binary-Tree-Maximum-Path-Sum\" class=\"headerlink\" title=\"Binary Tree Maximum Path Sum\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/binary_tree_maximum_path_sum.cc\" target=\"_blank\" rel=\"noopener\">Binary Tree Maximum Path Sum</a></h3><p>树形动态规划，求二叉树上两节点之间路径和</p>\n<p>其实只是有点树形dp的味道。DFS一下，dp[i]表示以节点i为终点，以节点i的某个儿子节点为起点的最大路径和，dp[i] = max(dp[i-&gt;right]+val[i], dp[i-&gt;left]+val[i])</p>\n<p>实际在求的时候，可以利用递归把dp数组省掉，答案ans = max(dp[i-&gt;left]+dp[i-&gt;right]+val[i], dp[i-&gt;left]+val[i], dp[i-&gt;right]+val[i])</p>\n<h3 id=\"Best-Time-to-Buy-and-Sell-Stock-III\"><a href=\"#Best-Time-to-Buy-and-Sell-Stock-III\" class=\"headerlink\" title=\"Best Time to Buy and Sell Stock III\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/best_time_to_buy_and_sell_stock_iii.cc\" target=\"_blank\" rel=\"noopener\">Best Time to Buy and Sell Stock III</a></h3><p>动态规划，给出某股票的n日的价格，能买进卖出最多两次，求最多能赚多少</p>\n<p>dp_left[i]表示从0到i，买卖1次最多能赚多少<br>dp_right[i]表示从i到n，买卖1次最多能赚多少</p>\n<p>答案就是dp_left[i-1]+dp_right[i]</p>\n<h3 id=\"Best-Time-to-Buy-and-Sell-Stock-II\"><a href=\"#Best-Time-to-Buy-and-Sell-Stock-II\" class=\"headerlink\" title=\"Best Time to Buy and Sell Stock II\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/best_time_to_buy_and_sell_stock_ii.cc\" target=\"_blank\" rel=\"noopener\">Best Time to Buy and Sell Stock II</a></h3><p>贪心，扫一遍，求出所有峰值和谷值，把差累加起来就好</p>\n<p>需要注意判断谷值时的，&gt;=和&lt;的符号使用问题</p>\n<h3 id=\"Best-Time-to-Buy-and-Sell-Stock-I\"><a href=\"#Best-Time-to-Buy-and-Sell-Stock-I\" class=\"headerlink\" title=\"Best Time to Buy and Sell Stock I\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/best_time_to_buy_and_sell_stock_i.cc\" target=\"_blank\" rel=\"noopener\">Best Time to Buy and Sell Stock I</a></h3><p>简单题，扫一遍，求出最大和最小，答案是差值</p>\n<h3 id=\"Triangle\"><a href=\"#Triangle\" class=\"headerlink\" title=\"Triangle\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/triangle.cc\" target=\"_blank\" rel=\"noopener\">Triangle</a></h3><p>动态规划入门题</p>\n<p>dp[i][j] = min(dp[i-1][j]+val[i][j], dp[i-1][j-1]+val[i][j])</p>\n<h3 id=\"Pascal’s-Triangle-II\"><a href=\"#Pascal’s-Triangle-II\" class=\"headerlink\" title=\"Pascal’s Triangle II\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/pascals_triangle_ii.cc\" target=\"_blank\" rel=\"noopener\">Pascal’s Triangle II</a></h3><p>数论，求杨辉三角的第k行</p>\n<p>利用递推求组合数的公式可以直接算出答案</p>\n<p>公式的推导见《算法竞赛入门经典》第183页</p>\n<h3 id=\"Pascal’s-Triangle\"><a href=\"#Pascal’s-Triangle\" class=\"headerlink\" title=\"Pascal’s Triangle\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/pascals_triangle_i.cc\" target=\"_blank\" rel=\"noopener\">Pascal’s Triangle</a></h3><p>数论，求杨辉三角的第k行</p>\n<p>利用递推求组合数的公式可以直接算出答案</p>\n<p>公式的推导见《算法竞赛入门经典》第183页</p>\n<h3 id=\"Populating-Next-Right-Pointers-in-Each-Node-II\"><a href=\"#Populating-Next-Right-Pointers-in-Each-Node-II\" class=\"headerlink\" title=\"Populating Next Right Pointers in Each Node II\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/populating_next_right_pointers_in_each_node_ii.cc\" target=\"_blank\" rel=\"noopener\">Populating Next Right Pointers in Each Node II</a></h3><p>指针处理，把任意二叉树上节点和右边离它最近的节点连接起来</p>\n<p>从最高层往下处理，每层的儿子可以借助其父亲的next节点找到右边离它最近的节点</p>\n<p>递归往下即可</p>\n<h3 id=\"Populating-Next-Right-Pointers-in-Each-Node\"><a href=\"#Populating-Next-Right-Pointers-in-Each-Node\" class=\"headerlink\" title=\"Populating Next Right Pointers in Each Node\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/populating_next_right_pointers_in_each_node_i.cc\" target=\"_blank\" rel=\"noopener\">Populating Next Right Pointers in Each Node</a></h3><p>指针处理，把完全二叉树上节点和右边离它最近的节点连接起来</p>\n<p>从最高层往下处理，每层的右儿子的next指向其父亲的next的left节点</p>\n<p>递归往下即可</p>\n<h3 id=\"Distinct-Subsequences\"><a href=\"#Distinct-Subsequences\" class=\"headerlink\" title=\"Distinct Subsequences\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/distinct_subsequences.cc\" target=\"_blank\" rel=\"noopener\">Distinct Subsequences</a></h3><p>动态规划，求S的子序列中有多少是T</p>\n<p>dp[i][j]表示S[0…i]的子序列有多少是T[0…j]</p>\n<p>那么dp[i][j] = dp[i-1][j]+dp[i-1][j-1], 当S[i] == T[j]<br>    dp[i][j] = dp[i-1][j]               当S[i] != T[j]</p>\n<h3 id=\"Flatten-Binary-Tree-to-Linked-List\"><a href=\"#Flatten-Binary-Tree-to-Linked-List\" class=\"headerlink\" title=\"Flatten Binary Tree to Linked List\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/flatten_binary_tree_to_linked_list.cc\" target=\"_blank\" rel=\"noopener\">Flatten Binary Tree to Linked List</a></h3><p>指针处理，把二叉树变成单链表</p>\n<p>flatten把每棵子树变成链，递归一下</p>\n<p>当左儿子存在时，把左边最下面的节点找到，把它和右儿子接起来就ok</p>\n<h3 id=\"Path-Sum-II\"><a href=\"#Path-Sum-II\" class=\"headerlink\" title=\"Path Sum II\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/path_sum_ii.cc\" target=\"_blank\" rel=\"noopener\">Path Sum II</a></h3><p>搜索，DFS一下，记录路径就好了</p>\n<h3 id=\"Path-Sum-I\"><a href=\"#Path-Sum-I\" class=\"headerlink\" title=\"Path Sum I\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/path_sum_i.cc\" target=\"_blank\" rel=\"noopener\">Path Sum I</a></h3><p>搜索，DFS一下，判断一下就好了</p>\n<h3 id=\"Minimum-Depth-of-Binary-Tree\"><a href=\"#Minimum-Depth-of-Binary-Tree\" class=\"headerlink\" title=\"Minimum Depth of Binary Tree\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/minimum_depth_of_binary_tree.cc\" target=\"_blank\" rel=\"noopener\">Minimum Depth of Binary Tree</a></h3><p>搜索，DFS一下，记录最小值就好了</p>\n<h3 id=\"Balanced-Binary-Tree\"><a href=\"#Balanced-Binary-Tree\" class=\"headerlink\" title=\"Balanced Binary Tree\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/balaced_binary_tree.cc\" target=\"_blank\" rel=\"noopener\">Balanced Binary Tree</a></h3><p>递归，判断某二叉树是否平衡</p>\n<p>纪录左子树和右子树的高度，比较差值</p>\n<p>递归往下即可</p>\n<h3 id=\"Convert-Sorted-List-to-Binary-Search-Tree\"><a href=\"#Convert-Sorted-List-to-Binary-Search-Tree\" class=\"headerlink\" title=\"Convert Sorted List to Binary Search Tree\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/convert_sorted_list_to_binary_search_tree.cc\" target=\"_blank\" rel=\"noopener\">Convert Sorted List to Binary Search Tree</a></h3><p>递归，把有序链表转化为二叉树</p>\n<p>类似于中序遍历，从左子树开始建树</p>\n<p>增加l和r记录递归的范围，便于控制</p>\n<h3 id=\"Convert-Sorted-Array-to-Binary-Search-Tree\"><a href=\"#Convert-Sorted-Array-to-Binary-Search-Tree\" class=\"headerlink\" title=\"Convert Sorted Array to Binary Search Tree\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/convert_sorted_array_to_binary_search_tree.cc\" target=\"_blank\" rel=\"noopener\">Convert Sorted Array to Binary Search Tree</a></h3><p>递归，把有序数组转化为二叉树</p>\n<p>类似于中序遍历，从左子树开始建树</p>\n<p>增加l和r记录递归的范围，便于控制</p>\n<h3 id=\"Binary-Tree-Level-Order-Traversal-II\"><a href=\"#Binary-Tree-Level-Order-Traversal-II\" class=\"headerlink\" title=\"Binary Tree Level Order Traversal II\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/binary_tree_level_order_traversal_ii.cc\" target=\"_blank\" rel=\"noopener\">Binary Tree Level Order Traversal II</a></h3><p>二叉树的层次遍历，按层数倒序输出</p>\n<p>DFS的时候，记录层数，把值放到相应的vector中，利用reverse函数可以直接反转vector</p>\n<h3 id=\"Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal\"><a href=\"#Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal\" class=\"headerlink\" title=\"Construct Binary Tree from Inorder and Postorder Traversal\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/construct_binary_tree_from_inorder_and_postorder_traversal.cc\" target=\"_blank\" rel=\"noopener\">Construct Binary Tree from Inorder and Postorder Traversal</a></h3><p>根据中根序和后根序重建二叉树</p>\n<p>递归的进行，对两个数组都增加l和r值，便于操作，先建左子树再建右子树</p>\n<h3 id=\"Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal\"><a href=\"#Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal\" class=\"headerlink\" title=\"Construct Binary Tree from Preorder and Inorder Traversal\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/construct_binary_tree_from_preorder_and_inorder_traversal.cc\" target=\"_blank\" rel=\"noopener\">Construct Binary Tree from Preorder and Inorder Traversal</a></h3><p>根据中根序和先根序重建二叉树</p>\n<p>递归的进行，对两个数组都增加l和r值，便于操作，先建左子树再建右子树</p>\n<h3 id=\"Maximum-Depth-of-Binary-Tree\"><a href=\"#Maximum-Depth-of-Binary-Tree\" class=\"headerlink\" title=\"Maximum Depth of Binary Tree\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/maximum_depth_of_binary_tree.cc\" target=\"_blank\" rel=\"noopener\">Maximum Depth of Binary Tree</a></h3><p>求二叉树最大层数</p>\n<p>DFS一下，记录层数就好</p>\n<h3 id=\"Binary-Tree-Zigzag-Level-Order-Traversal\"><a href=\"#Binary-Tree-Zigzag-Level-Order-Traversal\" class=\"headerlink\" title=\"Binary Tree Zigzag Level Order Traversal\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/binary_tree_zigzag_level_order_traversal.cc\" target=\"_blank\" rel=\"noopener\">Binary Tree Zigzag Level Order Traversal</a></h3><p>二叉树的层次遍历，把每隔一层的元素反转后输出</p>\n<p>DFS的时候，记录层数，把值放到相应的vector中，利用reverse函数可以直接反转奇数层的vector</p>\n<h3 id=\"Binary-Tree-Level-Order-Traversal\"><a href=\"#Binary-Tree-Level-Order-Traversal\" class=\"headerlink\" title=\"Binary Tree Level Order Traversal\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/binary_tree_level_order_traversal.cc\" target=\"_blank\" rel=\"noopener\">Binary Tree Level Order Traversal</a></h3><p>二叉树的层次遍历，把每隔一层的元素反转后输出</p>\n<p>DFS的时候，记录层数，把值放到相应的vector中</p>\n<h3 id=\"Symmetric-Tree\"><a href=\"#Symmetric-Tree\" class=\"headerlink\" title=\"Symmetric Tree\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/symmetric_tree.cc\" target=\"_blank\" rel=\"noopener\">Symmetric Tree</a></h3><p>判断二叉树是否对称</p>\n<p>从root的左右儿子分开，一起往下递归即可</p>\n<h3 id=\"Same-Tree\"><a href=\"#Same-Tree\" class=\"headerlink\" title=\"Same Tree\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/same_tree.cc\" target=\"_blank\" rel=\"noopener\">Same Tree</a></h3><p>判断二叉树是否相同</p>\n<p>一起从root开始往下递归即可</p>\n","site":{"data":{}},"excerpt":"<p>当前进度：100/153</p>\n<h3 id=\"Find-Minimum-in-Rotated-Sorted-Array-II\"><a href=\"#Find-Minimum-in-Rotated-Sorted-Array-II\" class=\"headerlink\" title=\"Find Minimum in Rotated Sorted Array II\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/find_minimum_in_rotated_sorted_array_ii.cc\" target=\"_blank\" rel=\"noopener\">Find Minimum in Rotated Sorted Array II</a></h3><p>二分，寻找轮换排序数组的最小元素，可能有相同元素</p>","more":"<p>还是对数组进行二分，当左值等于右值时，可以把二分的范围两边同时减1</p>\n<p>这样做的话，算法时间复杂度是O(n)，不过OJ还是会给Accepted…</p>\n<h3 id=\"Find-Minimum-in-Rotated-Sorted-Array\"><a href=\"#Find-Minimum-in-Rotated-Sorted-Array\" class=\"headerlink\" title=\"Find Minimum in Rotated Sorted Array\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/find_minimum_in_rotated_sorted_array.cc\" target=\"_blank\" rel=\"noopener\">Find Minimum in Rotated Sorted Array</a></h3><p>二分，寻找轮换排序数组的最小元素</p>\n<p>O(logn)的算法是对数组进行二分，如果中间值大于左值，则说明答案在[mid+1,r]；反之，则答案在[l,mid]</p>\n<p>注意特殊处理只有一个元素的情况</p>\n<h3 id=\"Maximum-Product-Subarray\"><a href=\"#Maximum-Product-Subarray\" class=\"headerlink\" title=\"Maximum Product Subarray\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/maximum_product_subarray.cc\" target=\"_blank\" rel=\"noopener\">Maximum Product Subarray</a></h3><p>一维递推，空间复杂度可以优化为O(1)</p>\n<p>dp_max[i]维护包含第i元素的最大值</p>\n<p>dp_min[i]维护包含第i元素的最小值</p>\n<p>动态转移方程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dp_max[i]=max(dp_max[i-1]\\*A[i], A[i], dp_min[i-1]\\*A[i])</span><br><span class=\"line\">dp_min[i]=max(dp_min[i-1]\\*A[i], A[i], dp_max[i-1]\\*A[i])</span><br></pre></td></tr></table></figure>\n<h3 id=\"Reverse-Words-in-a-String\"><a href=\"#Reverse-Words-in-a-String\" class=\"headerlink\" title=\"Reverse Words in a String\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/reverse_words_in_a_string.cc\" target=\"_blank\" rel=\"noopener\">Reverse Words in a String</a></h3><p>字符串处理，简单题</p>\n<h3 id=\"Evaluate-Reverse-Polish-Notation\"><a href=\"#Evaluate-Reverse-Polish-Notation\" class=\"headerlink\" title=\"Evaluate Reverse Polish Notation\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/evaluate_reverse_polish_notation.cc\" target=\"_blank\" rel=\"noopener\">Evaluate Reverse Polish Notation</a></h3><p>简单题，用stack模拟一下就好了</p>\n<h3 id=\"Max-Points-on-a-Line\"><a href=\"#Max-Points-on-a-Line\" class=\"headerlink\" title=\"Max Points on a Line\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/max_points_on_a_line.cc\" target=\"_blank\" rel=\"noopener\">Max Points on a Line</a></h3><p>几何题，枚举两个点组成一条直线，遍历其他点，统计在线上点的数量，就好</p>\n<p>Trick: 两个点在同一位置需要特殊处理</p>\n<h3 id=\"Sort-List\"><a href=\"#Sort-List\" class=\"headerlink\" title=\"Sort List\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/sort_list.cc\" target=\"_blank\" rel=\"noopener\">Sort List</a></h3><p>单链表排序，要求时间复杂度O(nlogn)，空间复杂度O(1)</p>\n<p>用归并排序就ok，后来<a href=\"http://weibo.com/biaaib\" target=\"_blank\" rel=\"noopener\">biaaib</a>告诉我，用快速排序也可以在空间复杂度O(1)的情况下实现</p>\n<h3 id=\"Insertion-Sort-List\"><a href=\"#Insertion-Sort-List\" class=\"headerlink\" title=\"Insertion Sort List\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/insertion_sort_list.cc\" target=\"_blank\" rel=\"noopener\">Insertion Sort List</a></h3><p>单链表排序，要求使用插入排序</p>\n<h3 id=\"LRU-Cache\"><a href=\"#LRU-Cache\" class=\"headerlink\" title=\"LRU Cache\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/lru_cache.cc\" target=\"_blank\" rel=\"noopener\">LRU Cache</a></h3><p>LRU调度算法，实现一个基于LRU算法的Cache</p>\n<p>用STL的map和list可以很快地实现一个</p>\n<p>吐槽：搞不懂为什么这题难度是hard…</p>\n<h3 id=\"Binary-Tree-Postorder-Traversal\"><a href=\"#Binary-Tree-Postorder-Traversal\" class=\"headerlink\" title=\"Binary Tree Postorder Traversal\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/binary_tree_postorder_traversal.cc\" target=\"_blank\" rel=\"noopener\">Binary Tree Postorder Traversal</a></h3><p>二叉树的后根序遍历，递归简单实现</p>\n<h3 id=\"Binary-Tree-Preorder-Traversal\"><a href=\"#Binary-Tree-Preorder-Traversal\" class=\"headerlink\" title=\"Binary Tree Preorder Traversal\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/binary_tree_preorder_traversal.cc\" target=\"_blank\" rel=\"noopener\">Binary Tree Preorder Traversal</a></h3><p>二叉树的先根序遍历，递归简单实现</p>\n<h3 id=\"Reorder-List\"><a href=\"#Reorder-List\" class=\"headerlink\" title=\"Reorder List\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/reorder_list.cc\" target=\"_blank\" rel=\"noopener\">Reorder List</a></h3><p>单链表的重排列</p>\n<p>把链表从中间截断，把后半段反序，然后把挨着把后半段的元素，每隔一个插入到前半段中</p>\n<h3 id=\"Linked-List-Cycle-II\"><a href=\"#Linked-List-Cycle-II\" class=\"headerlink\" title=\"Linked List Cycle II\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/linked_list_cycle_ii.cc\" target=\"_blank\" rel=\"noopener\">Linked List Cycle II</a></h3><p>单链表判环，要求定位到环的起点，要求不使用额外空间，我对此的理解是要求空间复杂度O(1)</p>\n<p>使用快慢指针，当两个指针重合时，令一个新的指针从head开始往下遍历，同时快慢指针中的任意一个和新指针一起往下遍历，当和新指针重合时，那么重合的结点便是环的起点。</p>\n<h3 id=\"Linked-List-Cycle\"><a href=\"#Linked-List-Cycle\" class=\"headerlink\" title=\"Linked List Cycle\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/linked_list_cycle_i.cc\" target=\"_blank\" rel=\"noopener\">Linked List Cycle</a></h3><p>单链表判环，用快慢指针即可。</p>\n<h3 id=\"Word-Break-II\"><a href=\"#Word-Break-II\" class=\"headerlink\" title=\"Word Break II\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/word_break_ii.cc\" target=\"_blank\" rel=\"noopener\">Word Break II</a></h3><p>动态规划＋Trie树，和<a href=\"http://blog.csdn.net/sssogs/article/details/8789386\" target=\"_blank\" rel=\"noopener\">LA 3942 Remember the Word</a>一样差不多，只不过此题还要求所有的方案。</p>\n<p>dp[i]表示以第i个字符开始的后缀字符串有多少种拼接方案<br>那么有动态转移方程：dp[i] = sum{ dp[i+len(x) | x 为字典中的字符串，并且x是i后缀的前缀] }</p>\n<p>用Trie树来加速查找x的过程，不过我写得有点搓…感觉也没快多少…</p>\n<h3 id=\"Word-Break\"><a href=\"#Word-Break\" class=\"headerlink\" title=\"Word Break\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/word_break_i.cc\" target=\"_blank\" rel=\"noopener\">Word Break</a></h3><p>动态规划＋Trie树，和<a href=\"http://blog.csdn.net/sssogs/article/details/8789386\" target=\"_blank\" rel=\"noopener\">LA 3942 Remember the Word</a>一样差不多，但是此题只需要求dp[0]是否不为0即可</p>\n<p>解法同上</p>\n<h3 id=\"Copy-List-with-Random-Pointer\"><a href=\"#Copy-List-with-Random-Pointer\" class=\"headerlink\" title=\"Copy List with Random Pointer\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/copy_list_with_random_pointer.cc\" target=\"_blank\" rel=\"noopener\">Copy List with Random Pointer</a></h3><p>单链表的深拷贝</p>\n<p>空间复杂度O(n)的方法很容易想到，我用的是O(1)的方法</p>\n<p>分三步，先把链表的每一个结点复制一个，插入到该结点的后面，复制结点的random指针先设为NULL<br>然后，遍历单链表，把根据原始结点的random指针来设置复制结点的random指针；因为每个原始结点的下一个就是该结点的复制结点，所以复制结点的random指针应该指向其原始结点的random指针所指向的结点的next指针所指向的结点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new-&gt;random = raw-&gt;random-&gt;next;</span><br></pre></td></tr></table></figure>\n<p>最后，把原始元素和复制元素分开形成两个单链表，复制元素形成的单链表就是深拷贝的结果</p>\n<h3 id=\"Single-Number-II\"><a href=\"#Single-Number-II\" class=\"headerlink\" title=\"Single Number II\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/single_number_ii.cc\" target=\"_blank\" rel=\"noopener\">Single Number II</a></h3><p>水题，给一个数组，查找出现次数少于三次的元素</p>\n<p>统计一下每一位1的个数，因为只有一个元素出现少于三次，所以每一位1的个数模3就能知道该元素的那一位是否为1</p>\n<p>这题好像是某个ACM比赛的签到题</p>\n<h3 id=\"Single-Number-I\"><a href=\"#Single-Number-I\" class=\"headerlink\" title=\"Single Number I\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/single_number_i.cc\" target=\"_blank\" rel=\"noopener\">Single Number I</a></h3><p>水题，给一个数组，查找出现次数少于两次的元素</p>\n<p>答案是所有元素的异或和</p>\n<h3 id=\"Candy\"><a href=\"#Candy\" class=\"headerlink\" title=\"Candy\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/candy.cc\" target=\"_blank\" rel=\"noopener\">Candy</a></h3><p>给定一数列，求一新数列，满足某元素在原数列中大于相邻元素，在新数列中也大于相邻元素，求新数列和最少是多少，新数列最小值是1</p>\n<p>从左往右扫一遍，使原本是递增的区间在新数列中也递增；从右往左扫一遍，使递减的也递减</p>\n<h3 id=\"Gas-Station\"><a href=\"#Gas-Station\" class=\"headerlink\" title=\"Gas Station\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/gas_station.cc\" target=\"_blank\" rel=\"noopener\">Gas Station</a></h3><p>给定一个环，给出环上路径的距离和汽油量。求从某点出发，能遍历所有结点，而在遍历的每一时刻，汽油量不为负。</p>\n<p>把线路扩展成一个环，从起点出发开始遍历。当走到某点，发现汽油量为负，则能判定，在该点之前的所有点都不能为起点。</p>\n<h3 id=\"Clone-Graph\"><a href=\"#Clone-Graph\" class=\"headerlink\" title=\"Clone Graph\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/clone_graph.cc\" target=\"_blank\" rel=\"noopener\">Clone Graph</a></h3><p>深拷贝一个无向图，有环</p>\n<p>有空间复杂度为O(1)的解法，就和之前的单链表深拷贝一样，把新复制的结点加到原结点的边的最后面，然后遍历原结点的边，把所有原结点的边连着的结点的新复制结点和之前的新复制的结点连接起来，最后再pop掉原结点的边中最后面的元素，就ok</p>\n<p>我用的是一个O(n)的解法，那就是直接DFS，用map记录所有遇到过的结点，把label作为key，新复制的结点作为value存起来。DFS时，如果遇到访问过的结点，就直接返回map中的value，否则新建结点，然后遍历所有边，递归地为新建结点建立边的关系</p>\n<p>我之前写了一个<a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/wa_clone_graph.cc\" target=\"_blank\" rel=\"noopener\">O(1)版本</a>不知道为什么会Wrong Answer，我在本机测试发现结果是正确的。看了下discuss，发现有人和我在同一组case遇到同样的问题</p>\n<h3 id=\"Palindrome-Partitioning-II\"><a href=\"#Palindrome-Partitioning-II\" class=\"headerlink\" title=\"Palindrome Partitioning II\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/palindrome_partitioning_ii.cc\" target=\"_blank\" rel=\"noopener\">Palindrome Partitioning II</a></h3><p>将字符串分割为一个个回文串，求最少分多少次</p>\n<p>可以先用O(n^2)的预处理，得到is_pal[i][j]表示i到j是否是回文串</p>\n<p>再用O(n^2)的dp，求出dp[i]表示包含第i个字符能分割字符串的最小分割数</p>\n<p>答案就是dp[n-1]</p>\n<h3 id=\"Palindrome-Partitioning-I\"><a href=\"#Palindrome-Partitioning-I\" class=\"headerlink\" title=\"Palindrome Partitioning I\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/palindrome_partitioning_i.cc\" target=\"_blank\" rel=\"noopener\">Palindrome Partitioning I</a></h3><p>将字符串分割为一个个回文串，求所有分法</p>\n<p>可以先用O(n^2)的预处理，得到is_pal[i][j]表示i到j是否是回文串</p>\n<p>然后DFS一下，就行了</p>\n<h3 id=\"Surrounded-Regions\"><a href=\"#Surrounded-Regions\" class=\"headerlink\" title=\"Surrounded Regions\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/surrounded_regions.cc\" target=\"_blank\" rel=\"noopener\">Surrounded Regions</a></h3><p>把图中所有被X包围的O置为X，求最终图</p>\n<p>从图四个边上所有的O开始DFS，所有遍历到的O在最终图中都不是X</p>\n<p>处理完了之后，把所有没有遍历到的O置为X即可</p>\n<h3 id=\"Sum-Root-to-Leaf-Numbers\"><a href=\"#Sum-Root-to-Leaf-Numbers\" class=\"headerlink\" title=\"Sum Root to Leaf Numbers\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/sum_root_to_leaf_numbers.cc\" target=\"_blank\" rel=\"noopener\">Sum Root to Leaf Numbers</a></h3><p>DFS，求所有根到叶子结点所产生数之和</p>\n<h3 id=\"Longest-Consecutive-Sequence\"><a href=\"#Longest-Consecutive-Sequence\" class=\"headerlink\" title=\"Longest Consecutive Sequence\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/longest_consecutive_sequence.cc\" target=\"_blank\" rel=\"noopener\">Longest Consecutive Sequence</a></h3><p>用给定数组组成一条最长连续数列，求长度为多少</p>\n<p>要求使用O(n)的算法</p>\n<p>照着O(n)的尿性，就知道应该使用hash</p>\n<p>把所有数字放到一个 set (unordered_set) 中，然后遍历set中的元素</p>\n<p>因为unordered_set使用的是hash，所以可以根据当前元素在平均O(1)的时间复杂度下知道是否存在相邻元素</p>\n<p>把所有相邻元素都找一次，然后记录最长能达到多少，再把所有找过的元素从set中删掉就ok</p>\n<h3 id=\"Word-Ladder-II\"><a href=\"#Word-Ladder-II\" class=\"headerlink\" title=\"Word Ladder II\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/word_ladder_ii.cc\" target=\"_blank\" rel=\"noopener\">Word Ladder II</a></h3><p>搜索题，从某个单词转换到另一个单词的条件是两个单词最多只有1个字符不同。给出一个字典，从起始单词最少转换几次到目标单词，求所有最少转换的路径</p>\n<p>先BFS按层数搜索，搜到目标单词那一层时，停止。纪录所有单词的前驱单词。</p>\n<p>根据记录单词的前驱单词，从目标单词开始反向DFS，同时记录答案即可</p>\n<h3 id=\"Word-Ladder\"><a href=\"#Word-Ladder\" class=\"headerlink\" title=\"Word Ladder\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/word_ladder_i.cc\" target=\"_blank\" rel=\"noopener\">Word Ladder</a></h3><p>搜索题，从某个单词转换到另一个单词的条件是两个单词最多只有1个字符不同。给出一个字典，求从起始单词最少转换几次到目标单词</p>\n<p>BFS一下就好了</p>\n<h3 id=\"Valid-Palindrome\"><a href=\"#Valid-Palindrome\" class=\"headerlink\" title=\"Valid Palindrome\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/valid_palindrome.cc\" target=\"_blank\" rel=\"noopener\">Valid Palindrome</a></h3><p>除掉特殊字符外的字符串，判断是否是回文串</p>\n<p>扫一遍就好了</p>\n<h3 id=\"Binary-Tree-Maximum-Path-Sum\"><a href=\"#Binary-Tree-Maximum-Path-Sum\" class=\"headerlink\" title=\"Binary Tree Maximum Path Sum\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/binary_tree_maximum_path_sum.cc\" target=\"_blank\" rel=\"noopener\">Binary Tree Maximum Path Sum</a></h3><p>树形动态规划，求二叉树上两节点之间路径和</p>\n<p>其实只是有点树形dp的味道。DFS一下，dp[i]表示以节点i为终点，以节点i的某个儿子节点为起点的最大路径和，dp[i] = max(dp[i-&gt;right]+val[i], dp[i-&gt;left]+val[i])</p>\n<p>实际在求的时候，可以利用递归把dp数组省掉，答案ans = max(dp[i-&gt;left]+dp[i-&gt;right]+val[i], dp[i-&gt;left]+val[i], dp[i-&gt;right]+val[i])</p>\n<h3 id=\"Best-Time-to-Buy-and-Sell-Stock-III\"><a href=\"#Best-Time-to-Buy-and-Sell-Stock-III\" class=\"headerlink\" title=\"Best Time to Buy and Sell Stock III\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/best_time_to_buy_and_sell_stock_iii.cc\" target=\"_blank\" rel=\"noopener\">Best Time to Buy and Sell Stock III</a></h3><p>动态规划，给出某股票的n日的价格，能买进卖出最多两次，求最多能赚多少</p>\n<p>dp_left[i]表示从0到i，买卖1次最多能赚多少<br>dp_right[i]表示从i到n，买卖1次最多能赚多少</p>\n<p>答案就是dp_left[i-1]+dp_right[i]</p>\n<h3 id=\"Best-Time-to-Buy-and-Sell-Stock-II\"><a href=\"#Best-Time-to-Buy-and-Sell-Stock-II\" class=\"headerlink\" title=\"Best Time to Buy and Sell Stock II\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/best_time_to_buy_and_sell_stock_ii.cc\" target=\"_blank\" rel=\"noopener\">Best Time to Buy and Sell Stock II</a></h3><p>贪心，扫一遍，求出所有峰值和谷值，把差累加起来就好</p>\n<p>需要注意判断谷值时的，&gt;=和&lt;的符号使用问题</p>\n<h3 id=\"Best-Time-to-Buy-and-Sell-Stock-I\"><a href=\"#Best-Time-to-Buy-and-Sell-Stock-I\" class=\"headerlink\" title=\"Best Time to Buy and Sell Stock I\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/best_time_to_buy_and_sell_stock_i.cc\" target=\"_blank\" rel=\"noopener\">Best Time to Buy and Sell Stock I</a></h3><p>简单题，扫一遍，求出最大和最小，答案是差值</p>\n<h3 id=\"Triangle\"><a href=\"#Triangle\" class=\"headerlink\" title=\"Triangle\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/triangle.cc\" target=\"_blank\" rel=\"noopener\">Triangle</a></h3><p>动态规划入门题</p>\n<p>dp[i][j] = min(dp[i-1][j]+val[i][j], dp[i-1][j-1]+val[i][j])</p>\n<h3 id=\"Pascal’s-Triangle-II\"><a href=\"#Pascal’s-Triangle-II\" class=\"headerlink\" title=\"Pascal’s Triangle II\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/pascals_triangle_ii.cc\" target=\"_blank\" rel=\"noopener\">Pascal’s Triangle II</a></h3><p>数论，求杨辉三角的第k行</p>\n<p>利用递推求组合数的公式可以直接算出答案</p>\n<p>公式的推导见《算法竞赛入门经典》第183页</p>\n<h3 id=\"Pascal’s-Triangle\"><a href=\"#Pascal’s-Triangle\" class=\"headerlink\" title=\"Pascal’s Triangle\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/pascals_triangle_i.cc\" target=\"_blank\" rel=\"noopener\">Pascal’s Triangle</a></h3><p>数论，求杨辉三角的第k行</p>\n<p>利用递推求组合数的公式可以直接算出答案</p>\n<p>公式的推导见《算法竞赛入门经典》第183页</p>\n<h3 id=\"Populating-Next-Right-Pointers-in-Each-Node-II\"><a href=\"#Populating-Next-Right-Pointers-in-Each-Node-II\" class=\"headerlink\" title=\"Populating Next Right Pointers in Each Node II\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/populating_next_right_pointers_in_each_node_ii.cc\" target=\"_blank\" rel=\"noopener\">Populating Next Right Pointers in Each Node II</a></h3><p>指针处理，把任意二叉树上节点和右边离它最近的节点连接起来</p>\n<p>从最高层往下处理，每层的儿子可以借助其父亲的next节点找到右边离它最近的节点</p>\n<p>递归往下即可</p>\n<h3 id=\"Populating-Next-Right-Pointers-in-Each-Node\"><a href=\"#Populating-Next-Right-Pointers-in-Each-Node\" class=\"headerlink\" title=\"Populating Next Right Pointers in Each Node\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/populating_next_right_pointers_in_each_node_i.cc\" target=\"_blank\" rel=\"noopener\">Populating Next Right Pointers in Each Node</a></h3><p>指针处理，把完全二叉树上节点和右边离它最近的节点连接起来</p>\n<p>从最高层往下处理，每层的右儿子的next指向其父亲的next的left节点</p>\n<p>递归往下即可</p>\n<h3 id=\"Distinct-Subsequences\"><a href=\"#Distinct-Subsequences\" class=\"headerlink\" title=\"Distinct Subsequences\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/distinct_subsequences.cc\" target=\"_blank\" rel=\"noopener\">Distinct Subsequences</a></h3><p>动态规划，求S的子序列中有多少是T</p>\n<p>dp[i][j]表示S[0…i]的子序列有多少是T[0…j]</p>\n<p>那么dp[i][j] = dp[i-1][j]+dp[i-1][j-1], 当S[i] == T[j]<br>    dp[i][j] = dp[i-1][j]               当S[i] != T[j]</p>\n<h3 id=\"Flatten-Binary-Tree-to-Linked-List\"><a href=\"#Flatten-Binary-Tree-to-Linked-List\" class=\"headerlink\" title=\"Flatten Binary Tree to Linked List\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/flatten_binary_tree_to_linked_list.cc\" target=\"_blank\" rel=\"noopener\">Flatten Binary Tree to Linked List</a></h3><p>指针处理，把二叉树变成单链表</p>\n<p>flatten把每棵子树变成链，递归一下</p>\n<p>当左儿子存在时，把左边最下面的节点找到，把它和右儿子接起来就ok</p>\n<h3 id=\"Path-Sum-II\"><a href=\"#Path-Sum-II\" class=\"headerlink\" title=\"Path Sum II\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/path_sum_ii.cc\" target=\"_blank\" rel=\"noopener\">Path Sum II</a></h3><p>搜索，DFS一下，记录路径就好了</p>\n<h3 id=\"Path-Sum-I\"><a href=\"#Path-Sum-I\" class=\"headerlink\" title=\"Path Sum I\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/path_sum_i.cc\" target=\"_blank\" rel=\"noopener\">Path Sum I</a></h3><p>搜索，DFS一下，判断一下就好了</p>\n<h3 id=\"Minimum-Depth-of-Binary-Tree\"><a href=\"#Minimum-Depth-of-Binary-Tree\" class=\"headerlink\" title=\"Minimum Depth of Binary Tree\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/minimum_depth_of_binary_tree.cc\" target=\"_blank\" rel=\"noopener\">Minimum Depth of Binary Tree</a></h3><p>搜索，DFS一下，记录最小值就好了</p>\n<h3 id=\"Balanced-Binary-Tree\"><a href=\"#Balanced-Binary-Tree\" class=\"headerlink\" title=\"Balanced Binary Tree\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/balaced_binary_tree.cc\" target=\"_blank\" rel=\"noopener\">Balanced Binary Tree</a></h3><p>递归，判断某二叉树是否平衡</p>\n<p>纪录左子树和右子树的高度，比较差值</p>\n<p>递归往下即可</p>\n<h3 id=\"Convert-Sorted-List-to-Binary-Search-Tree\"><a href=\"#Convert-Sorted-List-to-Binary-Search-Tree\" class=\"headerlink\" title=\"Convert Sorted List to Binary Search Tree\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/convert_sorted_list_to_binary_search_tree.cc\" target=\"_blank\" rel=\"noopener\">Convert Sorted List to Binary Search Tree</a></h3><p>递归，把有序链表转化为二叉树</p>\n<p>类似于中序遍历，从左子树开始建树</p>\n<p>增加l和r记录递归的范围，便于控制</p>\n<h3 id=\"Convert-Sorted-Array-to-Binary-Search-Tree\"><a href=\"#Convert-Sorted-Array-to-Binary-Search-Tree\" class=\"headerlink\" title=\"Convert Sorted Array to Binary Search Tree\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/convert_sorted_array_to_binary_search_tree.cc\" target=\"_blank\" rel=\"noopener\">Convert Sorted Array to Binary Search Tree</a></h3><p>递归，把有序数组转化为二叉树</p>\n<p>类似于中序遍历，从左子树开始建树</p>\n<p>增加l和r记录递归的范围，便于控制</p>\n<h3 id=\"Binary-Tree-Level-Order-Traversal-II\"><a href=\"#Binary-Tree-Level-Order-Traversal-II\" class=\"headerlink\" title=\"Binary Tree Level Order Traversal II\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/binary_tree_level_order_traversal_ii.cc\" target=\"_blank\" rel=\"noopener\">Binary Tree Level Order Traversal II</a></h3><p>二叉树的层次遍历，按层数倒序输出</p>\n<p>DFS的时候，记录层数，把值放到相应的vector中，利用reverse函数可以直接反转vector</p>\n<h3 id=\"Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal\"><a href=\"#Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal\" class=\"headerlink\" title=\"Construct Binary Tree from Inorder and Postorder Traversal\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/construct_binary_tree_from_inorder_and_postorder_traversal.cc\" target=\"_blank\" rel=\"noopener\">Construct Binary Tree from Inorder and Postorder Traversal</a></h3><p>根据中根序和后根序重建二叉树</p>\n<p>递归的进行，对两个数组都增加l和r值，便于操作，先建左子树再建右子树</p>\n<h3 id=\"Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal\"><a href=\"#Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal\" class=\"headerlink\" title=\"Construct Binary Tree from Preorder and Inorder Traversal\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/construct_binary_tree_from_preorder_and_inorder_traversal.cc\" target=\"_blank\" rel=\"noopener\">Construct Binary Tree from Preorder and Inorder Traversal</a></h3><p>根据中根序和先根序重建二叉树</p>\n<p>递归的进行，对两个数组都增加l和r值，便于操作，先建左子树再建右子树</p>\n<h3 id=\"Maximum-Depth-of-Binary-Tree\"><a href=\"#Maximum-Depth-of-Binary-Tree\" class=\"headerlink\" title=\"Maximum Depth of Binary Tree\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/maximum_depth_of_binary_tree.cc\" target=\"_blank\" rel=\"noopener\">Maximum Depth of Binary Tree</a></h3><p>求二叉树最大层数</p>\n<p>DFS一下，记录层数就好</p>\n<h3 id=\"Binary-Tree-Zigzag-Level-Order-Traversal\"><a href=\"#Binary-Tree-Zigzag-Level-Order-Traversal\" class=\"headerlink\" title=\"Binary Tree Zigzag Level Order Traversal\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/binary_tree_zigzag_level_order_traversal.cc\" target=\"_blank\" rel=\"noopener\">Binary Tree Zigzag Level Order Traversal</a></h3><p>二叉树的层次遍历，把每隔一层的元素反转后输出</p>\n<p>DFS的时候，记录层数，把值放到相应的vector中，利用reverse函数可以直接反转奇数层的vector</p>\n<h3 id=\"Binary-Tree-Level-Order-Traversal\"><a href=\"#Binary-Tree-Level-Order-Traversal\" class=\"headerlink\" title=\"Binary Tree Level Order Traversal\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/binary_tree_level_order_traversal.cc\" target=\"_blank\" rel=\"noopener\">Binary Tree Level Order Traversal</a></h3><p>二叉树的层次遍历，把每隔一层的元素反转后输出</p>\n<p>DFS的时候，记录层数，把值放到相应的vector中</p>\n<h3 id=\"Symmetric-Tree\"><a href=\"#Symmetric-Tree\" class=\"headerlink\" title=\"Symmetric Tree\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/symmetric_tree.cc\" target=\"_blank\" rel=\"noopener\">Symmetric Tree</a></h3><p>判断二叉树是否对称</p>\n<p>从root的左右儿子分开，一起往下递归即可</p>\n<h3 id=\"Same-Tree\"><a href=\"#Same-Tree\" class=\"headerlink\" title=\"Same Tree\"></a><a href=\"https://github.com/plusplus7/LeetCodeSolutions/blob/master/src/same_tree.cc\" target=\"_blank\" rel=\"noopener\">Same Tree</a></h3><p>判断二叉树是否相同</p>\n<p>一起从root开始往下递归即可</p>"},{"layout":"post","title":"Secret解题报告","date":"2016-09-16T17:21:00.000Z","comments":1,"reward":true,"_content":"\n题目背景较多，读完题之后，发现其实就是要写一个程序来计算$$2^{year-1} \\% 1000000007$$\n\n题目要求一次计算不超过1s才能得满分，而year-1的值非常大。\n\n显然无法使用暴力的pow(2,year-1)%1000000007来计算答案，题目提示结合密码学的相关知识，于是可以判断出有相关的数学方法可以帮助计算。\n\n<!-- more -->\n\n如果学过RSA公钥加密算法，应该对 费马小定理 及其推广 欧拉定理 有所了解。\n\n欧拉定理，是一个关于同余的性质。\n\n欧拉定理表明，若n,a为正整数，且n,a互质，即n和a最大公约数是1。那么有：\n$$a^{\\varphi(n)} \\equiv 1\\space (mod{\\space}n)$$\n\n其中，$\\varphi(n)$是欧拉函数，其值是小于或等于n的正整数中与n互质的数的数量。\n\n而在本题中，令a是2，显然a是一个质数；令n是1000000007，也是一个质数。a和n显然互质。\n\n将其带入欧拉定理的等式，$$2^{\\varphi(n)} \\equiv 1\\space (mod{\\space}n)$$\n\n由于1000000007是一个质数，小于或等于n的正整数中与他互质的数的数量显然是1000000006，因为只有1不与1000000007互质。\n所以，可以得到$$2^{1000000006} \\equiv 1\\space (mod\\space 1000000007)$$\n\n现在回到本题，我们设year-1为m，于是题目变成求$2^m \\% 1000000007$的值。\n\n有了上面的推导，可以把$2^m \\% 1000000007$分成$ 2^{1000000006} * 2^{1000000006} * \\cdots * 2^k$\n\n其中k是m%1000000006的值，这里需要编程写一下大数取模。\n\n之后就是对$2^k%1000000007$的计算，其中k是一个小于$10^9+6$的正整数。\n\n这里如果直接使用pow(2,k) %1000000007的话，1次计算的运行时间会超过1s。也就是说，如果解题到此处，并提交key，可以得到200分。那么如何得到最后100分呢？\n\n这里可以使用快速幂模算法，这是一个密码学及数论中很常见的运算技巧，来计算便可以很快得到答案，满分！\n\n标准代码：\n```cpp\n#include <bits/stdc++.h>\n#define MOD 1000000007\n#define MAD 1000000006\nchar str[200000],num[200000];\nint t[200000],tonum[200000];\nint main()\n{\n    freopen(\"out.txt\",\"r\",stdin);\n    scanf(\"%s\",str);\n    int ori=10,to=2;\n    int i,j=0,len=strlen(str),k=len,tt=len-1;\n    /// 处理减1\n    if (str[tt] != '0')\n        str[tt]--;\n    else\n    {\n        while (str[tt] == '0')\n            tt--;\n        str[tt]--;\n        for (i=tt+1; i<len; i++)\n        {\n            str[i]='9';\n        }\n    }\n    /// 计算year-1 % MOD\n    int st=0;\n    long long t,s;\n    s=0;\n    while (str[st] == '0')\n        st++;\n    str[len]='\\0';\n    for (i=st; i<len; i++)\n    {\n        s=s*10+str[i]-'0';\n        s=s%MAD;\n    }\n    /// 快速幂\n    long long ans=1;\n    long long mul=2;\n    while (s != 0)\n    {\n        if ((s&1) == 1)\n            ans=ans*mul%MOD;\n        mul=mul*mul%MOD;\n        s>>=1;\n    }\n    printf(\"%I64d\\n\",ans);\n    return 0;\n}\n```\n\n","source":"_posts/Secret解题报告.md","raw":"---\nlayout: post\ntitle: Secret解题报告\ndate: 2016-9-17 01:21\ncomments: true\nreward: true\ntags:\n    - Security\n---\n\n题目背景较多，读完题之后，发现其实就是要写一个程序来计算$$2^{year-1} \\% 1000000007$$\n\n题目要求一次计算不超过1s才能得满分，而year-1的值非常大。\n\n显然无法使用暴力的pow(2,year-1)%1000000007来计算答案，题目提示结合密码学的相关知识，于是可以判断出有相关的数学方法可以帮助计算。\n\n<!-- more -->\n\n如果学过RSA公钥加密算法，应该对 费马小定理 及其推广 欧拉定理 有所了解。\n\n欧拉定理，是一个关于同余的性质。\n\n欧拉定理表明，若n,a为正整数，且n,a互质，即n和a最大公约数是1。那么有：\n$$a^{\\varphi(n)} \\equiv 1\\space (mod{\\space}n)$$\n\n其中，$\\varphi(n)$是欧拉函数，其值是小于或等于n的正整数中与n互质的数的数量。\n\n而在本题中，令a是2，显然a是一个质数；令n是1000000007，也是一个质数。a和n显然互质。\n\n将其带入欧拉定理的等式，$$2^{\\varphi(n)} \\equiv 1\\space (mod{\\space}n)$$\n\n由于1000000007是一个质数，小于或等于n的正整数中与他互质的数的数量显然是1000000006，因为只有1不与1000000007互质。\n所以，可以得到$$2^{1000000006} \\equiv 1\\space (mod\\space 1000000007)$$\n\n现在回到本题，我们设year-1为m，于是题目变成求$2^m \\% 1000000007$的值。\n\n有了上面的推导，可以把$2^m \\% 1000000007$分成$ 2^{1000000006} * 2^{1000000006} * \\cdots * 2^k$\n\n其中k是m%1000000006的值，这里需要编程写一下大数取模。\n\n之后就是对$2^k%1000000007$的计算，其中k是一个小于$10^9+6$的正整数。\n\n这里如果直接使用pow(2,k) %1000000007的话，1次计算的运行时间会超过1s。也就是说，如果解题到此处，并提交key，可以得到200分。那么如何得到最后100分呢？\n\n这里可以使用快速幂模算法，这是一个密码学及数论中很常见的运算技巧，来计算便可以很快得到答案，满分！\n\n标准代码：\n```cpp\n#include <bits/stdc++.h>\n#define MOD 1000000007\n#define MAD 1000000006\nchar str[200000],num[200000];\nint t[200000],tonum[200000];\nint main()\n{\n    freopen(\"out.txt\",\"r\",stdin);\n    scanf(\"%s\",str);\n    int ori=10,to=2;\n    int i,j=0,len=strlen(str),k=len,tt=len-1;\n    /// 处理减1\n    if (str[tt] != '0')\n        str[tt]--;\n    else\n    {\n        while (str[tt] == '0')\n            tt--;\n        str[tt]--;\n        for (i=tt+1; i<len; i++)\n        {\n            str[i]='9';\n        }\n    }\n    /// 计算year-1 % MOD\n    int st=0;\n    long long t,s;\n    s=0;\n    while (str[st] == '0')\n        st++;\n    str[len]='\\0';\n    for (i=st; i<len; i++)\n    {\n        s=s*10+str[i]-'0';\n        s=s%MAD;\n    }\n    /// 快速幂\n    long long ans=1;\n    long long mul=2;\n    while (s != 0)\n    {\n        if ((s&1) == 1)\n            ans=ans*mul%MOD;\n        mul=mul*mul%MOD;\n        s>>=1;\n    }\n    printf(\"%I64d\\n\",ans);\n    return 0;\n}\n```\n\n","slug":"Secret解题报告","published":1,"updated":"2018-05-23T14:45:26.986Z","photos":[],"link":"","_id":"cjhj92blf000le0vfzfpapgcb","content":"<p>题目背景较多，读完题之后，发现其实就是要写一个程序来计算$$2^{year-1} \\% 1000000007$$</p>\n<p>题目要求一次计算不超过1s才能得满分，而year-1的值非常大。</p>\n<p>显然无法使用暴力的pow(2,year-1)%1000000007来计算答案，题目提示结合密码学的相关知识，于是可以判断出有相关的数学方法可以帮助计算。</p>\n<a id=\"more\"></a>\n<p>如果学过RSA公钥加密算法，应该对 费马小定理 及其推广 欧拉定理 有所了解。</p>\n<p>欧拉定理，是一个关于同余的性质。</p>\n<p>欧拉定理表明，若n,a为正整数，且n,a互质，即n和a最大公约数是1。那么有：<br>$$a^{\\varphi(n)} \\equiv 1\\space (mod{\\space}n)$$</p>\n<p>其中，$\\varphi(n)$是欧拉函数，其值是小于或等于n的正整数中与n互质的数的数量。</p>\n<p>而在本题中，令a是2，显然a是一个质数；令n是1000000007，也是一个质数。a和n显然互质。</p>\n<p>将其带入欧拉定理的等式，$$2^{\\varphi(n)} \\equiv 1\\space (mod{\\space}n)$$</p>\n<p>由于1000000007是一个质数，小于或等于n的正整数中与他互质的数的数量显然是1000000006，因为只有1不与1000000007互质。<br>所以，可以得到$$2^{1000000006} \\equiv 1\\space (mod\\space 1000000007)$$</p>\n<p>现在回到本题，我们设year-1为m，于是题目变成求$2^m \\% 1000000007$的值。</p>\n<p>有了上面的推导，可以把$2^m \\% 1000000007$分成$ 2^{1000000006} <em> 2^{1000000006} </em> \\cdots * 2^k$</p>\n<p>其中k是m%1000000006的值，这里需要编程写一下大数取模。</p>\n<p>之后就是对$2^k%1000000007$的计算，其中k是一个小于$10^9+6$的正整数。</p>\n<p>这里如果直接使用pow(2,k) %1000000007的话，1次计算的运行时间会超过1s。也就是说，如果解题到此处，并提交key，可以得到200分。那么如何得到最后100分呢？</p>\n<p>这里可以使用快速幂模算法，这是一个密码学及数论中很常见的运算技巧，来计算便可以很快得到答案，满分！</p>\n<p>标准代码：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MOD 1000000007</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAD 1000000006</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> str[<span class=\"number\">200000</span>],num[<span class=\"number\">200000</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> t[<span class=\"number\">200000</span>],tonum[<span class=\"number\">200000</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    freopen(<span class=\"string\">\"out.txt\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,str);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ori=<span class=\"number\">10</span>,to=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i,j=<span class=\"number\">0</span>,len=<span class=\"built_in\">strlen</span>(str),k=len,tt=len<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"comment\">/// 处理减1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str[tt] != <span class=\"string\">'0'</span>)</span><br><span class=\"line\">        str[tt]--;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (str[tt] == <span class=\"string\">'0'</span>)</span><br><span class=\"line\">            tt--;</span><br><span class=\"line\">        str[tt]--;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i=tt+<span class=\"number\">1</span>; i&lt;len; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            str[i]=<span class=\"string\">'9'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/// 计算year-1 % MOD</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> st=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> t,s;</span><br><span class=\"line\">    s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (str[st] == <span class=\"string\">'0'</span>)</span><br><span class=\"line\">        st++;</span><br><span class=\"line\">    str[len]=<span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i=st; i&lt;len; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s=s*<span class=\"number\">10</span>+str[i]-<span class=\"string\">'0'</span>;</span><br><span class=\"line\">        s=s%MAD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/// 快速幂</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> mul=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (s != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((s&amp;<span class=\"number\">1</span>) == <span class=\"number\">1</span>)</span><br><span class=\"line\">            ans=ans*mul%MOD;</span><br><span class=\"line\">        mul=mul*mul%MOD;</span><br><span class=\"line\">        s&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%I64d\\n\"</span>,ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>题目背景较多，读完题之后，发现其实就是要写一个程序来计算$$2^{year-1} \\% 1000000007$$</p>\n<p>题目要求一次计算不超过1s才能得满分，而year-1的值非常大。</p>\n<p>显然无法使用暴力的pow(2,year-1)%1000000007来计算答案，题目提示结合密码学的相关知识，于是可以判断出有相关的数学方法可以帮助计算。</p>","more":"<p>如果学过RSA公钥加密算法，应该对 费马小定理 及其推广 欧拉定理 有所了解。</p>\n<p>欧拉定理，是一个关于同余的性质。</p>\n<p>欧拉定理表明，若n,a为正整数，且n,a互质，即n和a最大公约数是1。那么有：<br>$$a^{\\varphi(n)} \\equiv 1\\space (mod{\\space}n)$$</p>\n<p>其中，$\\varphi(n)$是欧拉函数，其值是小于或等于n的正整数中与n互质的数的数量。</p>\n<p>而在本题中，令a是2，显然a是一个质数；令n是1000000007，也是一个质数。a和n显然互质。</p>\n<p>将其带入欧拉定理的等式，$$2^{\\varphi(n)} \\equiv 1\\space (mod{\\space}n)$$</p>\n<p>由于1000000007是一个质数，小于或等于n的正整数中与他互质的数的数量显然是1000000006，因为只有1不与1000000007互质。<br>所以，可以得到$$2^{1000000006} \\equiv 1\\space (mod\\space 1000000007)$$</p>\n<p>现在回到本题，我们设year-1为m，于是题目变成求$2^m \\% 1000000007$的值。</p>\n<p>有了上面的推导，可以把$2^m \\% 1000000007$分成$ 2^{1000000006} <em> 2^{1000000006} </em> \\cdots * 2^k$</p>\n<p>其中k是m%1000000006的值，这里需要编程写一下大数取模。</p>\n<p>之后就是对$2^k%1000000007$的计算，其中k是一个小于$10^9+6$的正整数。</p>\n<p>这里如果直接使用pow(2,k) %1000000007的话，1次计算的运行时间会超过1s。也就是说，如果解题到此处，并提交key，可以得到200分。那么如何得到最后100分呢？</p>\n<p>这里可以使用快速幂模算法，这是一个密码学及数论中很常见的运算技巧，来计算便可以很快得到答案，满分！</p>\n<p>标准代码：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MOD 1000000007</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAD 1000000006</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> str[<span class=\"number\">200000</span>],num[<span class=\"number\">200000</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> t[<span class=\"number\">200000</span>],tonum[<span class=\"number\">200000</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    freopen(<span class=\"string\">\"out.txt\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,str);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ori=<span class=\"number\">10</span>,to=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i,j=<span class=\"number\">0</span>,len=<span class=\"built_in\">strlen</span>(str),k=len,tt=len<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"comment\">/// 处理减1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str[tt] != <span class=\"string\">'0'</span>)</span><br><span class=\"line\">        str[tt]--;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (str[tt] == <span class=\"string\">'0'</span>)</span><br><span class=\"line\">            tt--;</span><br><span class=\"line\">        str[tt]--;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i=tt+<span class=\"number\">1</span>; i&lt;len; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            str[i]=<span class=\"string\">'9'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/// 计算year-1 % MOD</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> st=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> t,s;</span><br><span class=\"line\">    s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (str[st] == <span class=\"string\">'0'</span>)</span><br><span class=\"line\">        st++;</span><br><span class=\"line\">    str[len]=<span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i=st; i&lt;len; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s=s*<span class=\"number\">10</span>+str[i]-<span class=\"string\">'0'</span>;</span><br><span class=\"line\">        s=s%MAD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/// 快速幂</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> mul=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (s != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((s&amp;<span class=\"number\">1</span>) == <span class=\"number\">1</span>)</span><br><span class=\"line\">            ans=ans*mul%MOD;</span><br><span class=\"line\">        mul=mul*mul%MOD;</span><br><span class=\"line\">        s&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%I64d\\n\"</span>,ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"layout":"post","title":"Undertale","date":"2018-05-20T03:15:00.000Z","comments":1,"reward":true,"_content":"\n<img src=\"https://qiniu.plusplus7.com/undertale-tit.png-fullpercent\" />\n\n我喜欢玩游戏。\n\n打开游戏，抛弃掉一切杂念，全身心地投入。就好像自己是一个旅人，在游戏作者的指引下，来到了一片新的世界。\n\n在这片新的世界里，你可以回到过去，与英雄豪杰结义金兰，并肩作战，豪夺天下；你可以踏上魔幻的大陆，来到极寒之巅，击败走向歧途的王子；你也可以进入童话故事，拥有一份真挚的友情，陪着朋友走过千山万水，而只是因为他说他要走；你甚至去到了未来世界，帮助一位即将离世的老人实现飞向月球的梦想；或者是你不小心跌落进深渊，来到了地下世界，然而却阴差阳错地遇到了一群性格迥异但心地善良的人（怪兽）们。\n\n<!-- more -->\n\n<img src=\"https://qiniu.plusplus7.com/FF9-because-of-you.jpg-fullpercent\" />\n\n***《最终幻想9》***\n\n关掉游戏，游戏中的一幕幕故事情节在脑海中闪现，回味无穷。通过社交网络，我们还可以结交同好，交流游玩心得，进行二次创作，建立虚拟社区。\n\n游戏是一门艺术，它通过画面，音乐，人机交互等带给玩家的体验和乐趣应该是远超过电影、音乐、小说的。在我看来，一个美好的故事，通过游戏的表达方式更容易在人们心中留下深刻的印象。而作者通过游戏情节表达出的感动，更容易打动玩家的心；游戏故事中传播的正能量，更能够激励人们的成长。\n\n我最近玩了《Undertale》，便是这样一款游戏。\n\n<img src=\"https://qiniu.plusplus7.com/Undertale-title.jpg-fullpercent\" />\n\n《Undertale》的剧情演出堪称精妙，动作元素简单却不乏味，出场人物的故事刻画非常饱满，复古的8bit音乐，风格从电子乐、乡村到金属应有尽有。\n\n游戏的世界观是有一定深度的。作者并没有急于将故事全部塞给玩家，而是一步步地引导，根据玩家的选择进入不同的路线。每一个路线都内容充实，每一个选择都会对剧情产生影响。作者花了非常多的时间去雕琢细节，当你翻开攻略时，你肯定会惊讶于这个100多mb的游戏居然有3个主要结局，以及超过20种不同的结局分支。\n\n<img src=\"https://qiniu.plusplus7.com/Undertale-Fighting.png-fullpercent\" />\n\n***在大多数对战中，你可以选择攻击，互动或者宽容对方***\n\n作者对每一个角色的刻画都细致入微，每个角色都性格鲜明，有不同的爱好（怪癖）。显然在设计对话方面，作者做足了功夫。只要你愿意花时间和他们聊天，琢磨他们说的话，你可以发现很多有趣的细节，挖掘出很多隐藏着的小秘密。并且，如果你玩的是英文原版，那你会发现对话中有幽默的双关语、冷笑话以及后续剧情的包袱和铺垫。\n\n    比如冷笑话大师Sans：\n    Sans: 今天我可以做完了一篓子的工作了呢。一骷髅子的工作。(I've done a ton of work. A skele-ton!)\n\n我个人对这个游戏有一个评价是“适合心里比较单纯的成年人玩”（不推荐给小孩子是害怕他们被如恐怖游戏般的真·实验室关卡给吓到了hhh）。因为这个游戏的剧本非常像一部童话，善恶分明，故事简单纯粹。也是因为这样，所以这款游戏可以带给玩家最纯粹的感动。这个感觉有点像是小时候看的子供番带来的那种感动，像《宝可梦》《数码宝贝》这类宣扬友谊，宣扬正能量的动画。在《Undertale》里，你可以和怪兽们认识，约会，交朋友，你也可以选择不惜一切地去拯救你的朋友，拯救世界。配上游戏精妙的演出效果，真结局线最后的情节非常令人感动，我几乎是含着泪打过最终boss。\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=39224651&auto=0&height=66\"></iframe>\n\n***与真和平线最终boss中二羊Asriel对战的背景音乐叫《希望与梦想》(Hopes and Dreams)***\n\n这个游戏总体来说，是一个节奏偏慢的角色扮演游戏，很适合在一个悠闲的下午，花上一整块的时间独自细细品味。很长一段时间没有遇到这么精致的游戏了，所以感慨万千，希望这样一款好的游戏能够分享给更多人。\n\n来几张有意思的游戏截图\n\n======= *以下内容包含剧透 Spoiler Alert* =======\n\n<img src=\"https://qiniu.plusplus7.com/Undertale-Undyne-hit-table.png-fullpercent\" />\n\n***有些人外表强硬但是内心其实也很温柔***\n\n<img src=\"https://qiniu.plusplus7.com/Undertale-Saving-page-diff.png-fullpercent\" />\n\n***和大家做朋友之后，读档界面的画面和背景音乐都会有变化***\n\n<img src=\"https://qiniu.plusplus7.com/Undertale-Toriel-together-1.png-fullpercent\" />\n\n***有些人会一开始就牵着你的手***\n\n<img src=\"https://qiniu.plusplus7.com/Undertale-Toriel-together-2.png-fullpercent\" />\n\n***一直走到最后***\n\n<img src=\"https://qiniu.plusplus7.com/Undertale-Toriel-touch-head.jpg-fullpercent\" />\n\n***因为有人真的很关心你***\n\n<img src=\"https://qiniu.plusplus7.com/Undertale-lesbian.png-fullpercent\" />\n\n***真爱组***\n\n<img src=\"https://qiniu.plusplus7.com/Undertale-Friends.png-fullpercent\" />\n\n***最后的时候只要有你们在，我就什么都不怕***\n","source":"_posts/Undertale.md","raw":"---\nlayout: post\ntitle: Undertale\ndate: 2018-05-20 11:15\ncomments: true\nreward: true\ntags:\n    - Game\n---\n\n<img src=\"https://qiniu.plusplus7.com/undertale-tit.png-fullpercent\" />\n\n我喜欢玩游戏。\n\n打开游戏，抛弃掉一切杂念，全身心地投入。就好像自己是一个旅人，在游戏作者的指引下，来到了一片新的世界。\n\n在这片新的世界里，你可以回到过去，与英雄豪杰结义金兰，并肩作战，豪夺天下；你可以踏上魔幻的大陆，来到极寒之巅，击败走向歧途的王子；你也可以进入童话故事，拥有一份真挚的友情，陪着朋友走过千山万水，而只是因为他说他要走；你甚至去到了未来世界，帮助一位即将离世的老人实现飞向月球的梦想；或者是你不小心跌落进深渊，来到了地下世界，然而却阴差阳错地遇到了一群性格迥异但心地善良的人（怪兽）们。\n\n<!-- more -->\n\n<img src=\"https://qiniu.plusplus7.com/FF9-because-of-you.jpg-fullpercent\" />\n\n***《最终幻想9》***\n\n关掉游戏，游戏中的一幕幕故事情节在脑海中闪现，回味无穷。通过社交网络，我们还可以结交同好，交流游玩心得，进行二次创作，建立虚拟社区。\n\n游戏是一门艺术，它通过画面，音乐，人机交互等带给玩家的体验和乐趣应该是远超过电影、音乐、小说的。在我看来，一个美好的故事，通过游戏的表达方式更容易在人们心中留下深刻的印象。而作者通过游戏情节表达出的感动，更容易打动玩家的心；游戏故事中传播的正能量，更能够激励人们的成长。\n\n我最近玩了《Undertale》，便是这样一款游戏。\n\n<img src=\"https://qiniu.plusplus7.com/Undertale-title.jpg-fullpercent\" />\n\n《Undertale》的剧情演出堪称精妙，动作元素简单却不乏味，出场人物的故事刻画非常饱满，复古的8bit音乐，风格从电子乐、乡村到金属应有尽有。\n\n游戏的世界观是有一定深度的。作者并没有急于将故事全部塞给玩家，而是一步步地引导，根据玩家的选择进入不同的路线。每一个路线都内容充实，每一个选择都会对剧情产生影响。作者花了非常多的时间去雕琢细节，当你翻开攻略时，你肯定会惊讶于这个100多mb的游戏居然有3个主要结局，以及超过20种不同的结局分支。\n\n<img src=\"https://qiniu.plusplus7.com/Undertale-Fighting.png-fullpercent\" />\n\n***在大多数对战中，你可以选择攻击，互动或者宽容对方***\n\n作者对每一个角色的刻画都细致入微，每个角色都性格鲜明，有不同的爱好（怪癖）。显然在设计对话方面，作者做足了功夫。只要你愿意花时间和他们聊天，琢磨他们说的话，你可以发现很多有趣的细节，挖掘出很多隐藏着的小秘密。并且，如果你玩的是英文原版，那你会发现对话中有幽默的双关语、冷笑话以及后续剧情的包袱和铺垫。\n\n    比如冷笑话大师Sans：\n    Sans: 今天我可以做完了一篓子的工作了呢。一骷髅子的工作。(I've done a ton of work. A skele-ton!)\n\n我个人对这个游戏有一个评价是“适合心里比较单纯的成年人玩”（不推荐给小孩子是害怕他们被如恐怖游戏般的真·实验室关卡给吓到了hhh）。因为这个游戏的剧本非常像一部童话，善恶分明，故事简单纯粹。也是因为这样，所以这款游戏可以带给玩家最纯粹的感动。这个感觉有点像是小时候看的子供番带来的那种感动，像《宝可梦》《数码宝贝》这类宣扬友谊，宣扬正能量的动画。在《Undertale》里，你可以和怪兽们认识，约会，交朋友，你也可以选择不惜一切地去拯救你的朋友，拯救世界。配上游戏精妙的演出效果，真结局线最后的情节非常令人感动，我几乎是含着泪打过最终boss。\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=39224651&auto=0&height=66\"></iframe>\n\n***与真和平线最终boss中二羊Asriel对战的背景音乐叫《希望与梦想》(Hopes and Dreams)***\n\n这个游戏总体来说，是一个节奏偏慢的角色扮演游戏，很适合在一个悠闲的下午，花上一整块的时间独自细细品味。很长一段时间没有遇到这么精致的游戏了，所以感慨万千，希望这样一款好的游戏能够分享给更多人。\n\n来几张有意思的游戏截图\n\n======= *以下内容包含剧透 Spoiler Alert* =======\n\n<img src=\"https://qiniu.plusplus7.com/Undertale-Undyne-hit-table.png-fullpercent\" />\n\n***有些人外表强硬但是内心其实也很温柔***\n\n<img src=\"https://qiniu.plusplus7.com/Undertale-Saving-page-diff.png-fullpercent\" />\n\n***和大家做朋友之后，读档界面的画面和背景音乐都会有变化***\n\n<img src=\"https://qiniu.plusplus7.com/Undertale-Toriel-together-1.png-fullpercent\" />\n\n***有些人会一开始就牵着你的手***\n\n<img src=\"https://qiniu.plusplus7.com/Undertale-Toriel-together-2.png-fullpercent\" />\n\n***一直走到最后***\n\n<img src=\"https://qiniu.plusplus7.com/Undertale-Toriel-touch-head.jpg-fullpercent\" />\n\n***因为有人真的很关心你***\n\n<img src=\"https://qiniu.plusplus7.com/Undertale-lesbian.png-fullpercent\" />\n\n***真爱组***\n\n<img src=\"https://qiniu.plusplus7.com/Undertale-Friends.png-fullpercent\" />\n\n***最后的时候只要有你们在，我就什么都不怕***\n","slug":"Undertale","published":1,"updated":"2019-01-14T17:09:22.712Z","_id":"cjhj92blp000oe0vfkqz6n9ua","photos":[],"link":"","content":"<p><img src=\"https://qiniu.plusplus7.com/undertale-tit.png-fullpercent\"></p>\n<p>我喜欢玩游戏。</p>\n<p>打开游戏，抛弃掉一切杂念，全身心地投入。就好像自己是一个旅人，在游戏作者的指引下，来到了一片新的世界。</p>\n<p>在这片新的世界里，你可以回到过去，与英雄豪杰结义金兰，并肩作战，豪夺天下；你可以踏上魔幻的大陆，来到极寒之巅，击败走向歧途的王子；你也可以进入童话故事，拥有一份真挚的友情，陪着朋友走过千山万水，而只是因为他说他要走；你甚至去到了未来世界，帮助一位即将离世的老人实现飞向月球的梦想；或者是你不小心跌落进深渊，来到了地下世界，然而却阴差阳错地遇到了一群性格迥异但心地善良的人（怪兽）们。</p>\n<a id=\"more\"></a>\n<p><img src=\"https://qiniu.plusplus7.com/FF9-because-of-you.jpg-fullpercent\"></p>\n<p><strong><em>《最终幻想9》</em></strong></p>\n<p>关掉游戏，游戏中的一幕幕故事情节在脑海中闪现，回味无穷。通过社交网络，我们还可以结交同好，交流游玩心得，进行二次创作，建立虚拟社区。</p>\n<p>游戏是一门艺术，它通过画面，音乐，人机交互等带给玩家的体验和乐趣应该是远超过电影、音乐、小说的。在我看来，一个美好的故事，通过游戏的表达方式更容易在人们心中留下深刻的印象。而作者通过游戏情节表达出的感动，更容易打动玩家的心；游戏故事中传播的正能量，更能够激励人们的成长。</p>\n<p>我最近玩了《Undertale》，便是这样一款游戏。</p>\n<p><img src=\"https://qiniu.plusplus7.com/Undertale-title.jpg-fullpercent\"></p>\n<p>《Undertale》的剧情演出堪称精妙，动作元素简单却不乏味，出场人物的故事刻画非常饱满，复古的8bit音乐，风格从电子乐、乡村到金属应有尽有。</p>\n<p>游戏的世界观是有一定深度的。作者并没有急于将故事全部塞给玩家，而是一步步地引导，根据玩家的选择进入不同的路线。每一个路线都内容充实，每一个选择都会对剧情产生影响。作者花了非常多的时间去雕琢细节，当你翻开攻略时，你肯定会惊讶于这个100多mb的游戏居然有3个主要结局，以及超过20种不同的结局分支。</p>\n<p><img src=\"https://qiniu.plusplus7.com/Undertale-Fighting.png-fullpercent\"></p>\n<p><strong><em>在大多数对战中，你可以选择攻击，互动或者宽容对方</em></strong></p>\n<p>作者对每一个角色的刻画都细致入微，每个角色都性格鲜明，有不同的爱好（怪癖）。显然在设计对话方面，作者做足了功夫。只要你愿意花时间和他们聊天，琢磨他们说的话，你可以发现很多有趣的细节，挖掘出很多隐藏着的小秘密。并且，如果你玩的是英文原版，那你会发现对话中有幽默的双关语、冷笑话以及后续剧情的包袱和铺垫。</p>\n<pre><code>比如冷笑话大师Sans：\nSans: 今天我可以做完了一篓子的工作了呢。一骷髅子的工作。(I&apos;ve done a ton of work. A skele-ton!)\n</code></pre><p>我个人对这个游戏有一个评价是“适合心里比较单纯的成年人玩”（不推荐给小孩子是害怕他们被如恐怖游戏般的真·实验室关卡给吓到了hhh）。因为这个游戏的剧本非常像一部童话，善恶分明，故事简单纯粹。也是因为这样，所以这款游戏可以带给玩家最纯粹的感动。这个感觉有点像是小时候看的子供番带来的那种感动，像《宝可梦》《数码宝贝》这类宣扬友谊，宣扬正能量的动画。在《Undertale》里，你可以和怪兽们认识，约会，交朋友，你也可以选择不惜一切地去拯救你的朋友，拯救世界。配上游戏精妙的演出效果，真结局线最后的情节非常令人感动，我几乎是含着泪打过最终boss。</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=39224651&auto=0&height=66\"></iframe>\n\n<p><strong><em>与真和平线最终boss中二羊Asriel对战的背景音乐叫《希望与梦想》(Hopes and Dreams)</em></strong></p>\n<p>这个游戏总体来说，是一个节奏偏慢的角色扮演游戏，很适合在一个悠闲的下午，花上一整块的时间独自细细品味。很长一段时间没有遇到这么精致的游戏了，所以感慨万千，希望这样一款好的游戏能够分享给更多人。</p>\n<p>来几张有意思的游戏截图</p>\n<p>======= <em>以下内容包含剧透 Spoiler Alert</em> =======</p>\n<p><img src=\"https://qiniu.plusplus7.com/Undertale-Undyne-hit-table.png-fullpercent\"></p>\n<p><strong><em>有些人外表强硬但是内心其实也很温柔</em></strong></p>\n<p><img src=\"https://qiniu.plusplus7.com/Undertale-Saving-page-diff.png-fullpercent\"></p>\n<p><strong><em>和大家做朋友之后，读档界面的画面和背景音乐都会有变化</em></strong></p>\n<p><img src=\"https://qiniu.plusplus7.com/Undertale-Toriel-together-1.png-fullpercent\"></p>\n<p><strong><em>有些人会一开始就牵着你的手</em></strong></p>\n<p><img src=\"https://qiniu.plusplus7.com/Undertale-Toriel-together-2.png-fullpercent\"></p>\n<p><strong><em>一直走到最后</em></strong></p>\n<p><img src=\"https://qiniu.plusplus7.com/Undertale-Toriel-touch-head.jpg-fullpercent\"></p>\n<p><strong><em>因为有人真的很关心你</em></strong></p>\n<p><img src=\"https://qiniu.plusplus7.com/Undertale-lesbian.png-fullpercent\"></p>\n<p><strong><em>真爱组</em></strong></p>\n<p><img src=\"https://qiniu.plusplus7.com/Undertale-Friends.png-fullpercent\"></p>\n<p><strong><em>最后的时候只要有你们在，我就什么都不怕</em></strong></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://qiniu.plusplus7.com/undertale-tit.png-fullpercent\"></p>\n<p>我喜欢玩游戏。</p>\n<p>打开游戏，抛弃掉一切杂念，全身心地投入。就好像自己是一个旅人，在游戏作者的指引下，来到了一片新的世界。</p>\n<p>在这片新的世界里，你可以回到过去，与英雄豪杰结义金兰，并肩作战，豪夺天下；你可以踏上魔幻的大陆，来到极寒之巅，击败走向歧途的王子；你也可以进入童话故事，拥有一份真挚的友情，陪着朋友走过千山万水，而只是因为他说他要走；你甚至去到了未来世界，帮助一位即将离世的老人实现飞向月球的梦想；或者是你不小心跌落进深渊，来到了地下世界，然而却阴差阳错地遇到了一群性格迥异但心地善良的人（怪兽）们。</p>","more":"<p><img src=\"https://qiniu.plusplus7.com/FF9-because-of-you.jpg-fullpercent\"></p>\n<p><strong><em>《最终幻想9》</em></strong></p>\n<p>关掉游戏，游戏中的一幕幕故事情节在脑海中闪现，回味无穷。通过社交网络，我们还可以结交同好，交流游玩心得，进行二次创作，建立虚拟社区。</p>\n<p>游戏是一门艺术，它通过画面，音乐，人机交互等带给玩家的体验和乐趣应该是远超过电影、音乐、小说的。在我看来，一个美好的故事，通过游戏的表达方式更容易在人们心中留下深刻的印象。而作者通过游戏情节表达出的感动，更容易打动玩家的心；游戏故事中传播的正能量，更能够激励人们的成长。</p>\n<p>我最近玩了《Undertale》，便是这样一款游戏。</p>\n<p><img src=\"https://qiniu.plusplus7.com/Undertale-title.jpg-fullpercent\"></p>\n<p>《Undertale》的剧情演出堪称精妙，动作元素简单却不乏味，出场人物的故事刻画非常饱满，复古的8bit音乐，风格从电子乐、乡村到金属应有尽有。</p>\n<p>游戏的世界观是有一定深度的。作者并没有急于将故事全部塞给玩家，而是一步步地引导，根据玩家的选择进入不同的路线。每一个路线都内容充实，每一个选择都会对剧情产生影响。作者花了非常多的时间去雕琢细节，当你翻开攻略时，你肯定会惊讶于这个100多mb的游戏居然有3个主要结局，以及超过20种不同的结局分支。</p>\n<p><img src=\"https://qiniu.plusplus7.com/Undertale-Fighting.png-fullpercent\"></p>\n<p><strong><em>在大多数对战中，你可以选择攻击，互动或者宽容对方</em></strong></p>\n<p>作者对每一个角色的刻画都细致入微，每个角色都性格鲜明，有不同的爱好（怪癖）。显然在设计对话方面，作者做足了功夫。只要你愿意花时间和他们聊天，琢磨他们说的话，你可以发现很多有趣的细节，挖掘出很多隐藏着的小秘密。并且，如果你玩的是英文原版，那你会发现对话中有幽默的双关语、冷笑话以及后续剧情的包袱和铺垫。</p>\n<pre><code>比如冷笑话大师Sans：\nSans: 今天我可以做完了一篓子的工作了呢。一骷髅子的工作。(I&apos;ve done a ton of work. A skele-ton!)\n</code></pre><p>我个人对这个游戏有一个评价是“适合心里比较单纯的成年人玩”（不推荐给小孩子是害怕他们被如恐怖游戏般的真·实验室关卡给吓到了hhh）。因为这个游戏的剧本非常像一部童话，善恶分明，故事简单纯粹。也是因为这样，所以这款游戏可以带给玩家最纯粹的感动。这个感觉有点像是小时候看的子供番带来的那种感动，像《宝可梦》《数码宝贝》这类宣扬友谊，宣扬正能量的动画。在《Undertale》里，你可以和怪兽们认识，约会，交朋友，你也可以选择不惜一切地去拯救你的朋友，拯救世界。配上游戏精妙的演出效果，真结局线最后的情节非常令人感动，我几乎是含着泪打过最终boss。</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=39224651&auto=0&height=66\"></iframe>\n\n<p><strong><em>与真和平线最终boss中二羊Asriel对战的背景音乐叫《希望与梦想》(Hopes and Dreams)</em></strong></p>\n<p>这个游戏总体来说，是一个节奏偏慢的角色扮演游戏，很适合在一个悠闲的下午，花上一整块的时间独自细细品味。很长一段时间没有遇到这么精致的游戏了，所以感慨万千，希望这样一款好的游戏能够分享给更多人。</p>\n<p>来几张有意思的游戏截图</p>\n<p>======= <em>以下内容包含剧透 Spoiler Alert</em> =======</p>\n<p><img src=\"https://qiniu.plusplus7.com/Undertale-Undyne-hit-table.png-fullpercent\"></p>\n<p><strong><em>有些人外表强硬但是内心其实也很温柔</em></strong></p>\n<p><img src=\"https://qiniu.plusplus7.com/Undertale-Saving-page-diff.png-fullpercent\"></p>\n<p><strong><em>和大家做朋友之后，读档界面的画面和背景音乐都会有变化</em></strong></p>\n<p><img src=\"https://qiniu.plusplus7.com/Undertale-Toriel-together-1.png-fullpercent\"></p>\n<p><strong><em>有些人会一开始就牵着你的手</em></strong></p>\n<p><img src=\"https://qiniu.plusplus7.com/Undertale-Toriel-together-2.png-fullpercent\"></p>\n<p><strong><em>一直走到最后</em></strong></p>\n<p><img src=\"https://qiniu.plusplus7.com/Undertale-Toriel-touch-head.jpg-fullpercent\"></p>\n<p><strong><em>因为有人真的很关心你</em></strong></p>\n<p><img src=\"https://qiniu.plusplus7.com/Undertale-lesbian.png-fullpercent\"></p>\n<p><strong><em>真爱组</em></strong></p>\n<p><img src=\"https://qiniu.plusplus7.com/Undertale-Friends.png-fullpercent\"></p>\n<p><strong><em>最后的时候只要有你们在，我就什么都不怕</em></strong></p>"},{"layout":"post","title":"k-近邻分类——机器学习笔记（四）","date":"2013-10-16T17:21:00.000Z","comments":1,"reward":true,"_content":"\nk-近邻分类算法（k-Nearest Neighbor algorithm），是一种非常有效而且易于掌握的机器学习算法。k-近邻算法（简称kNN）采用测量不同特征值之间的距离方法进行分类。   \n    \n    优点：分类精度高、对异常值不敏感、无数据输入假定\n    缺点：算法时间复杂度和空间复杂度都很高\n    \n<!-- more -->\n\n## 算法实现分类的步骤\n\n* 计算已知类别数据集中的每个数据点到未知点的距离（如欧几里德距离，切比雪夫距离...）\n* 按照距离递增持续排序\n* 选择与未知点距离最近的前k个点\n* 统计前k个点中出现次数最多的分类标签作为分类结果\n\n## 关于数据的归一化\n\n在进行距离计算时，使用欧式距离：\n\n$dist= \\sqrt{(a_1-b_1)^2+(a_2-b_2)^2+...(a_n-b_n)^2}$\n\n但其中某一项数值差值最大的属性将会对计算出的结果造成较大影响。\n\n如：\n<table>\n<tr><td>房屋面积</td><td>房屋价格</td><td>房屋质量</td><td>分类结果</td></tr>\n<tr><td>300</td><td>1380000</td><td>99</td><td>别墅</td></tr>\n<tr><td>120</td><td>700000</td><td>87</td><td>公寓</td></tr>\n<tr><td>78</td><td>500000</td><td>50</td><td>公寓</td></tr>\n</table>\n\n显然对于以上数据进行距离测算时，房屋价格一项对距离会产生较大影响。\n\n在处理不同取值范围的特征值时，采用数值归一化。如把数值的取值范围处理为0-1之间或-1到1之间，有以下公式：\n\n$new = (old-min)/(max-min)$\n\n    我的代码中实现了MLiA书中网站约会预测的kNN算法。\n    以数据集前900项作为练习数据，后101项作为测试数据。准确率为93.0%左右\n    \n[C++代码实现][1]\n\n[1]:https://github.com/plusplus7/MachineLearning/blob/master/src/k-Nearest_Neighbors/k_NN.cc\n\n","source":"_posts/k-近邻分类——机器学习笔记（四）.md","raw":"---\nlayout: post\ntitle: k-近邻分类——机器学习笔记（四）\ndate: 2013-10-17 01:21\ncomments: true\nreward: true\ntags:\n    - Machine Learning\n---\n\nk-近邻分类算法（k-Nearest Neighbor algorithm），是一种非常有效而且易于掌握的机器学习算法。k-近邻算法（简称kNN）采用测量不同特征值之间的距离方法进行分类。   \n    \n    优点：分类精度高、对异常值不敏感、无数据输入假定\n    缺点：算法时间复杂度和空间复杂度都很高\n    \n<!-- more -->\n\n## 算法实现分类的步骤\n\n* 计算已知类别数据集中的每个数据点到未知点的距离（如欧几里德距离，切比雪夫距离...）\n* 按照距离递增持续排序\n* 选择与未知点距离最近的前k个点\n* 统计前k个点中出现次数最多的分类标签作为分类结果\n\n## 关于数据的归一化\n\n在进行距离计算时，使用欧式距离：\n\n$dist= \\sqrt{(a_1-b_1)^2+(a_2-b_2)^2+...(a_n-b_n)^2}$\n\n但其中某一项数值差值最大的属性将会对计算出的结果造成较大影响。\n\n如：\n<table>\n<tr><td>房屋面积</td><td>房屋价格</td><td>房屋质量</td><td>分类结果</td></tr>\n<tr><td>300</td><td>1380000</td><td>99</td><td>别墅</td></tr>\n<tr><td>120</td><td>700000</td><td>87</td><td>公寓</td></tr>\n<tr><td>78</td><td>500000</td><td>50</td><td>公寓</td></tr>\n</table>\n\n显然对于以上数据进行距离测算时，房屋价格一项对距离会产生较大影响。\n\n在处理不同取值范围的特征值时，采用数值归一化。如把数值的取值范围处理为0-1之间或-1到1之间，有以下公式：\n\n$new = (old-min)/(max-min)$\n\n    我的代码中实现了MLiA书中网站约会预测的kNN算法。\n    以数据集前900项作为练习数据，后101项作为测试数据。准确率为93.0%左右\n    \n[C++代码实现][1]\n\n[1]:https://github.com/plusplus7/MachineLearning/blob/master/src/k-Nearest_Neighbors/k_NN.cc\n\n","slug":"k-近邻分类——机器学习笔记（四）","published":1,"updated":"2018-05-23T14:45:26.924Z","photos":[],"link":"","_id":"cjhj92blx000re0vf5ozaj9t1","content":"<p>k-近邻分类算法（k-Nearest Neighbor algorithm），是一种非常有效而且易于掌握的机器学习算法。k-近邻算法（简称kNN）采用测量不同特征值之间的距离方法进行分类。   </p>\n<pre><code>优点：分类精度高、对异常值不敏感、无数据输入假定\n缺点：算法时间复杂度和空间复杂度都很高\n</code></pre><a id=\"more\"></a>\n<h2 id=\"算法实现分类的步骤\"><a href=\"#算法实现分类的步骤\" class=\"headerlink\" title=\"算法实现分类的步骤\"></a>算法实现分类的步骤</h2><ul>\n<li>计算已知类别数据集中的每个数据点到未知点的距离（如欧几里德距离，切比雪夫距离…）</li>\n<li>按照距离递增持续排序</li>\n<li>选择与未知点距离最近的前k个点</li>\n<li>统计前k个点中出现次数最多的分类标签作为分类结果</li>\n</ul>\n<h2 id=\"关于数据的归一化\"><a href=\"#关于数据的归一化\" class=\"headerlink\" title=\"关于数据的归一化\"></a>关于数据的归一化</h2><p>在进行距离计算时，使用欧式距离：</p>\n<p>$dist= \\sqrt{(a_1-b_1)^2+(a_2-b_2)^2+…(a_n-b_n)^2}$</p>\n<p>但其中某一项数值差值最大的属性将会对计算出的结果造成较大影响。</p>\n<p>如：</p>\n<table><br><tr><td>房屋面积</td><td>房屋价格</td><td>房屋质量</td><td>分类结果</td></tr><br><tr><td>300</td><td>1380000</td><td>99</td><td>别墅</td></tr><br><tr><td>120</td><td>700000</td><td>87</td><td>公寓</td></tr><br><tr><td>78</td><td>500000</td><td>50</td><td>公寓</td></tr><br></table>\n\n<p>显然对于以上数据进行距离测算时，房屋价格一项对距离会产生较大影响。</p>\n<p>在处理不同取值范围的特征值时，采用数值归一化。如把数值的取值范围处理为0-1之间或-1到1之间，有以下公式：</p>\n<p>$new = (old-min)/(max-min)$</p>\n<pre><code>我的代码中实现了MLiA书中网站约会预测的kNN算法。\n以数据集前900项作为练习数据，后101项作为测试数据。准确率为93.0%左右\n</code></pre><p><a href=\"https://github.com/plusplus7/MachineLearning/blob/master/src/k-Nearest_Neighbors/k_NN.cc\" target=\"_blank\" rel=\"noopener\">C++代码实现</a></p>\n","site":{"data":{}},"excerpt":"<p>k-近邻分类算法（k-Nearest Neighbor algorithm），是一种非常有效而且易于掌握的机器学习算法。k-近邻算法（简称kNN）采用测量不同特征值之间的距离方法进行分类。   </p>\n<pre><code>优点：分类精度高、对异常值不敏感、无数据输入假定\n缺点：算法时间复杂度和空间复杂度都很高\n</code></pre>","more":"<h2 id=\"算法实现分类的步骤\"><a href=\"#算法实现分类的步骤\" class=\"headerlink\" title=\"算法实现分类的步骤\"></a>算法实现分类的步骤</h2><ul>\n<li>计算已知类别数据集中的每个数据点到未知点的距离（如欧几里德距离，切比雪夫距离…）</li>\n<li>按照距离递增持续排序</li>\n<li>选择与未知点距离最近的前k个点</li>\n<li>统计前k个点中出现次数最多的分类标签作为分类结果</li>\n</ul>\n<h2 id=\"关于数据的归一化\"><a href=\"#关于数据的归一化\" class=\"headerlink\" title=\"关于数据的归一化\"></a>关于数据的归一化</h2><p>在进行距离计算时，使用欧式距离：</p>\n<p>$dist= \\sqrt{(a_1-b_1)^2+(a_2-b_2)^2+…(a_n-b_n)^2}$</p>\n<p>但其中某一项数值差值最大的属性将会对计算出的结果造成较大影响。</p>\n<p>如：</p>\n<table><br><tr><td>房屋面积</td><td>房屋价格</td><td>房屋质量</td><td>分类结果</td></tr><br><tr><td>300</td><td>1380000</td><td>99</td><td>别墅</td></tr><br><tr><td>120</td><td>700000</td><td>87</td><td>公寓</td></tr><br><tr><td>78</td><td>500000</td><td>50</td><td>公寓</td></tr><br></table>\n\n<p>显然对于以上数据进行距离测算时，房屋价格一项对距离会产生较大影响。</p>\n<p>在处理不同取值范围的特征值时，采用数值归一化。如把数值的取值范围处理为0-1之间或-1到1之间，有以下公式：</p>\n<p>$new = (old-min)/(max-min)$</p>\n<pre><code>我的代码中实现了MLiA书中网站约会预测的kNN算法。\n以数据集前900项作为练习数据，后101项作为测试数据。准确率为93.0%左右\n</code></pre><p><a href=\"https://github.com/plusplus7/MachineLearning/blob/master/src/k-Nearest_Neighbors/k_NN.cc\" target=\"_blank\" rel=\"noopener\">C++代码实现</a></p>"},{"layout":"post","title":"Volatile关键字","date":"2014-01-16T17:21:00.000Z","comments":1,"reward":true,"_content":"\n最近在看Linux的进程调度，其中进程描述符task_struct中有个变量state。这个变量是这样定义的：\n    volatile long state;\n\n由于之前不了解volatile关键字的用法，所以这里对volatile深究了一下。\n\n<!-- more -->\n\n## **一. volatile关键字**\n\nvolatile是一个类型修饰符（type specifier）。\n\n在程序设计中，尤其是在C语言、C++、C#和Java语言中，使用volatile关键字声明的变量或对象通常拥有和优化和（或）多线程相关的特殊属性。通常，volatile关键字用来阻止（伪）编译器对那些它认为变量的值不能“被代码本身”改变的代码上执行任何优化。 在C环境中，volatile关键字的真实定义和适用范围经常被误解，加之C++、C#和Java都从C中神秘地“继承”了volatile，在这些编程语言中，因此这些语言中volatile的用法和语义大相径庭。\n\n## **二. 从比赛中引出问题**\n\n 在正式ACM/ICPC比赛开始之前，参赛选手都会做一项测试OJ系统各项边界的工作，比如测试提交代码最大可以开多少的数组，能大概接受多少时间复杂度的算法...\n\n比如：\n\n    #include <stdio.h>\n    int main()\n    {\n        int i;\n        for (i=0; i<1000000000; i++);\n        return 0;\n    }\n\n显然，这段程序是在测试OJ能不能接受$O(10^9)$的算法,提交OJ返回的信息（**Accept** or **Time Limit Exceed**）来判断能否接受。\n\n通常情况下，这段代码提交上去都会被接受。\n\n因为在大多数OJ系统中，OJ在用gcc编译代码时，会自动加上-O2优化。结果就是，代码第5行的for循环被编译器优化掉了，最后不会被真正执行。\n\n这个情况在测试可以开多大数组中也会出现：编译器认为你开的数组没有被使用，所以就自动给优化了。\n\n于是通常的解决办法是，在循环中加一些赋值或其他的操作，来防止编译器自动优化。\n\n## **三. 从实例中分析问题**\n\n编写Linux信号处理程序遇到的一个问题。\n\n代码:\n\n\t#include <stdio.h>\n\t#include <signal.h>\n\tint a;\n\tvoid func(int signo)\n\t{\n\t\tprintf(\"SIGNO: %d\\n\",signo);\n\t\ta=1;\n\t\tprintf(\"%d\\n\",a);\n\t}\n\tint main()\n\t{\n\t\ta=0;\n\t\tsignal(SIGINT,func);\n\t\twhile (a != 1);\n\t\treturn 0;\n\t}\n\n这段程序设置进程接受到SIGINT信号（摁下ctrl+c）时的动作是调用func函数。\n\n之后程序便进入一个循环，知道a的值被赋为1时，结束。\n\n可以看看实际效果。\n\n<img src=\"http://bcs.duapp.com/blogbuk/volatile.png\"></img>\n\n当使用gcc编译不开启O3编译优化选项时，程序执行效果和预想的效果是一样的。\n\n当使用gcc编译开启O3编译优化选项时，摁下ctrl+c时，程序并没有终止，而是继续循环了下去...最后是发送SIGQUIT信号（摁下ctrl+\\）才停止的。\n\n使用gcc -S t.c命令生产t.s文件，t.s文件里面可以看到t.c通过gcc产生的汇编代码。\nFile t.s：\n\n\t\t.file\t\"t.c\"\n\t\t.comm\ta,4,4\n\t\t.section\t.rodata\n\t.LC0:\n\t\t.string\t\"SIGNO: %d\\n\"\n\t.LC1:\n\t\t.string\t\"%d\\n\"\n\t\t.text\n\t\t.globl\tfunc\n\t\t.type\tfunc, @function\n\tfunc:\n\t.LFB0:\n\t\t.cfi_startproc\n\t\tpushl\t%ebp\n\t\t.cfi_def_cfa_offset 8\n\t\t.cfi_offset 5, -8\n\t\tmovl\t%esp, %ebp\n\t\t.cfi_def_cfa_register 5\n\t\tsubl\t$24, %esp\n\t\tmovl\t8(%ebp), %eax\n\t\tmovl\t%eax, 4(%esp)\n\t\tmovl\t$.LC0, (%esp)\n\t\tcall\tprintf\n\t\tmovl\t$1, a\n\t\tmovl\ta, %eax\n\t\tmovl\t%eax, 4(%esp)\n\t\tmovl\t$.LC1, (%esp)\n\t\tcall\tprintf\n\t\tleave\n\t\t.cfi_restore 5\n\t\t.cfi_def_cfa 4, 4\n\t\tret\n\t\t.cfi_endproc\n\t.LFE0:\n\t\t.size\tfunc, .-func\n\t\t.globl\tmain\n\t\t.type\tmain, @function\n\tmain:\n\t.LFB1:\n\t\t.cfi_startproc\n\t\tpushl\t%ebp\n\t\t.cfi_def_cfa_offset 8\n\t\t.cfi_offset 5, -8\n\t\tmovl\t%esp, %ebp\n\t\t.cfi_def_cfa_register 5\n\t\tandl\t$-16, %esp\n\t\tsubl\t$16, %esp\n\t\tmovl\t$0, a\n\t\tmovl\t$func, 4(%esp)\n\t\tmovl\t$2, (%esp)\n\t\tcall\tsignal\n\t\tnop\n\t.L3:\n\t\tmovl\ta, %eax\n\t\tcmpl\t$1, %eax\n\t\tjne\t.L3\n\t\tmovl\t$0, %eax\n\t\tleave\n\t\t.cfi_restore 5\n\t\t.cfi_def_cfa 4, 4\n\t\tret\n\t\t.cfi_endproc\n\t.LFE1:\n\t\t.size\tmain, .-main\n\t\t.ident\t\"GCC: (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2\"\n\t\t.section\t.note.GNU-stack,\"\",@progbits\n\n第38行开始是main函数代码段。\n\n可以看到第53行到第56行是while循环代码段。\n\n第54行，把a传送到eax寄存器;\n\n第55行，比较数值1和eax寄存器中保存的值，即a;\n\n第56行，jne：若不相等则跳转到.L3;\n\n所以在汇编代码中，这个while循环是老老实实地执行了的。\n\n再使用gcc -S -O3 t.c -o t2.s 命令生产t2.s文件，t2.s文件里面可以看到t.c通过gcc并且经过O3编译优化之后产生的汇编代码。为了节省篇幅，就放从main之后的代码段。\nFile t2.s\n\n\t...\n\tmain:\n\t.LFB26:\n\t\t.cfi_startproc\n\t\tpushl\t%ebp\n\t\t.cfi_def_cfa_offset 8\n\t\t.cfi_offset 5, -8\n\t\tmovl\t%esp, %ebp\n\t\t.cfi_def_cfa_register 5\n\t\tandl\t$-16, %esp\n\t\tsubl\t$16, %esp\n\t\tmovl\t$func, 4(%esp)\n\t\tmovl\t$2, (%esp)\n\t\tmovl\t$0, a\n\t\tcall\tsignal\n\t\tcmpl\t$1, a\n\t\tje\t.L4\n\t.L6:\n\t\tjmp\t.L6\n\t\t.p2align 4,,7\n\t\t.p2align 3\n\t.L4:\n\t\txorl\t%eax, %eax\n\t\tleave\n\t\t.cfi_restore 5\n\t\t.cfi_def_cfa 4, 4\n\t\tret\n\t\t.cfi_endproc\n\t.LFE26:\n\t\t.size\tmain, .-main\n\t\t.comm\ta,4,4\n\t\t.ident\t\"GCC: (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2\"\n\t\t.section\t.note.GNU-stack,\"\",@progbits\n\n第15行，对比了a和1的大小；\n\n第16行，je：相等则跳转到.L4。因为a=2，所以显然这里的跳转不会执行。\n\n第18行，jmp：无条件跳转到L6。相当于是在不断地回跳，即死循环。\n\n由此可知到，编译器并不知道a的值是会发生变化的。\n\n## **四. 使用volatile解决问题**\n\nvolatile关键字就是要告诉编译器，这个变量时经常改变的，而且编译时不要进行代码优化，所以每次读写的时候都要到它所在的地址去读取。\n如：\n\n    volatile int a；\n\n\n这样写，编译器就不会再盲目地把原来的那个循环“优化”\n<im1g src=\"http://bcs.duapp.com/blogbuk/volatile2.jpg\"/>\n","source":"_posts/volatile关键字.md","raw":"---\nlayout: post\ntitle: Volatile关键字\ndate: 2014-1-17 01:21\ncomments: true\nreward: true\ntags:\n    - Linux\n---\n\n最近在看Linux的进程调度，其中进程描述符task_struct中有个变量state。这个变量是这样定义的：\n    volatile long state;\n\n由于之前不了解volatile关键字的用法，所以这里对volatile深究了一下。\n\n<!-- more -->\n\n## **一. volatile关键字**\n\nvolatile是一个类型修饰符（type specifier）。\n\n在程序设计中，尤其是在C语言、C++、C#和Java语言中，使用volatile关键字声明的变量或对象通常拥有和优化和（或）多线程相关的特殊属性。通常，volatile关键字用来阻止（伪）编译器对那些它认为变量的值不能“被代码本身”改变的代码上执行任何优化。 在C环境中，volatile关键字的真实定义和适用范围经常被误解，加之C++、C#和Java都从C中神秘地“继承”了volatile，在这些编程语言中，因此这些语言中volatile的用法和语义大相径庭。\n\n## **二. 从比赛中引出问题**\n\n 在正式ACM/ICPC比赛开始之前，参赛选手都会做一项测试OJ系统各项边界的工作，比如测试提交代码最大可以开多少的数组，能大概接受多少时间复杂度的算法...\n\n比如：\n\n    #include <stdio.h>\n    int main()\n    {\n        int i;\n        for (i=0; i<1000000000; i++);\n        return 0;\n    }\n\n显然，这段程序是在测试OJ能不能接受$O(10^9)$的算法,提交OJ返回的信息（**Accept** or **Time Limit Exceed**）来判断能否接受。\n\n通常情况下，这段代码提交上去都会被接受。\n\n因为在大多数OJ系统中，OJ在用gcc编译代码时，会自动加上-O2优化。结果就是，代码第5行的for循环被编译器优化掉了，最后不会被真正执行。\n\n这个情况在测试可以开多大数组中也会出现：编译器认为你开的数组没有被使用，所以就自动给优化了。\n\n于是通常的解决办法是，在循环中加一些赋值或其他的操作，来防止编译器自动优化。\n\n## **三. 从实例中分析问题**\n\n编写Linux信号处理程序遇到的一个问题。\n\n代码:\n\n\t#include <stdio.h>\n\t#include <signal.h>\n\tint a;\n\tvoid func(int signo)\n\t{\n\t\tprintf(\"SIGNO: %d\\n\",signo);\n\t\ta=1;\n\t\tprintf(\"%d\\n\",a);\n\t}\n\tint main()\n\t{\n\t\ta=0;\n\t\tsignal(SIGINT,func);\n\t\twhile (a != 1);\n\t\treturn 0;\n\t}\n\n这段程序设置进程接受到SIGINT信号（摁下ctrl+c）时的动作是调用func函数。\n\n之后程序便进入一个循环，知道a的值被赋为1时，结束。\n\n可以看看实际效果。\n\n<img src=\"http://bcs.duapp.com/blogbuk/volatile.png\"></img>\n\n当使用gcc编译不开启O3编译优化选项时，程序执行效果和预想的效果是一样的。\n\n当使用gcc编译开启O3编译优化选项时，摁下ctrl+c时，程序并没有终止，而是继续循环了下去...最后是发送SIGQUIT信号（摁下ctrl+\\）才停止的。\n\n使用gcc -S t.c命令生产t.s文件，t.s文件里面可以看到t.c通过gcc产生的汇编代码。\nFile t.s：\n\n\t\t.file\t\"t.c\"\n\t\t.comm\ta,4,4\n\t\t.section\t.rodata\n\t.LC0:\n\t\t.string\t\"SIGNO: %d\\n\"\n\t.LC1:\n\t\t.string\t\"%d\\n\"\n\t\t.text\n\t\t.globl\tfunc\n\t\t.type\tfunc, @function\n\tfunc:\n\t.LFB0:\n\t\t.cfi_startproc\n\t\tpushl\t%ebp\n\t\t.cfi_def_cfa_offset 8\n\t\t.cfi_offset 5, -8\n\t\tmovl\t%esp, %ebp\n\t\t.cfi_def_cfa_register 5\n\t\tsubl\t$24, %esp\n\t\tmovl\t8(%ebp), %eax\n\t\tmovl\t%eax, 4(%esp)\n\t\tmovl\t$.LC0, (%esp)\n\t\tcall\tprintf\n\t\tmovl\t$1, a\n\t\tmovl\ta, %eax\n\t\tmovl\t%eax, 4(%esp)\n\t\tmovl\t$.LC1, (%esp)\n\t\tcall\tprintf\n\t\tleave\n\t\t.cfi_restore 5\n\t\t.cfi_def_cfa 4, 4\n\t\tret\n\t\t.cfi_endproc\n\t.LFE0:\n\t\t.size\tfunc, .-func\n\t\t.globl\tmain\n\t\t.type\tmain, @function\n\tmain:\n\t.LFB1:\n\t\t.cfi_startproc\n\t\tpushl\t%ebp\n\t\t.cfi_def_cfa_offset 8\n\t\t.cfi_offset 5, -8\n\t\tmovl\t%esp, %ebp\n\t\t.cfi_def_cfa_register 5\n\t\tandl\t$-16, %esp\n\t\tsubl\t$16, %esp\n\t\tmovl\t$0, a\n\t\tmovl\t$func, 4(%esp)\n\t\tmovl\t$2, (%esp)\n\t\tcall\tsignal\n\t\tnop\n\t.L3:\n\t\tmovl\ta, %eax\n\t\tcmpl\t$1, %eax\n\t\tjne\t.L3\n\t\tmovl\t$0, %eax\n\t\tleave\n\t\t.cfi_restore 5\n\t\t.cfi_def_cfa 4, 4\n\t\tret\n\t\t.cfi_endproc\n\t.LFE1:\n\t\t.size\tmain, .-main\n\t\t.ident\t\"GCC: (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2\"\n\t\t.section\t.note.GNU-stack,\"\",@progbits\n\n第38行开始是main函数代码段。\n\n可以看到第53行到第56行是while循环代码段。\n\n第54行，把a传送到eax寄存器;\n\n第55行，比较数值1和eax寄存器中保存的值，即a;\n\n第56行，jne：若不相等则跳转到.L3;\n\n所以在汇编代码中，这个while循环是老老实实地执行了的。\n\n再使用gcc -S -O3 t.c -o t2.s 命令生产t2.s文件，t2.s文件里面可以看到t.c通过gcc并且经过O3编译优化之后产生的汇编代码。为了节省篇幅，就放从main之后的代码段。\nFile t2.s\n\n\t...\n\tmain:\n\t.LFB26:\n\t\t.cfi_startproc\n\t\tpushl\t%ebp\n\t\t.cfi_def_cfa_offset 8\n\t\t.cfi_offset 5, -8\n\t\tmovl\t%esp, %ebp\n\t\t.cfi_def_cfa_register 5\n\t\tandl\t$-16, %esp\n\t\tsubl\t$16, %esp\n\t\tmovl\t$func, 4(%esp)\n\t\tmovl\t$2, (%esp)\n\t\tmovl\t$0, a\n\t\tcall\tsignal\n\t\tcmpl\t$1, a\n\t\tje\t.L4\n\t.L6:\n\t\tjmp\t.L6\n\t\t.p2align 4,,7\n\t\t.p2align 3\n\t.L4:\n\t\txorl\t%eax, %eax\n\t\tleave\n\t\t.cfi_restore 5\n\t\t.cfi_def_cfa 4, 4\n\t\tret\n\t\t.cfi_endproc\n\t.LFE26:\n\t\t.size\tmain, .-main\n\t\t.comm\ta,4,4\n\t\t.ident\t\"GCC: (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2\"\n\t\t.section\t.note.GNU-stack,\"\",@progbits\n\n第15行，对比了a和1的大小；\n\n第16行，je：相等则跳转到.L4。因为a=2，所以显然这里的跳转不会执行。\n\n第18行，jmp：无条件跳转到L6。相当于是在不断地回跳，即死循环。\n\n由此可知到，编译器并不知道a的值是会发生变化的。\n\n## **四. 使用volatile解决问题**\n\nvolatile关键字就是要告诉编译器，这个变量时经常改变的，而且编译时不要进行代码优化，所以每次读写的时候都要到它所在的地址去读取。\n如：\n\n    volatile int a；\n\n\n这样写，编译器就不会再盲目地把原来的那个循环“优化”\n<im1g src=\"http://bcs.duapp.com/blogbuk/volatile2.jpg\"/>\n","slug":"volatile关键字","published":1,"updated":"2018-05-23T14:45:27.048Z","photos":[],"link":"","_id":"cjhj92bm2000ve0vf6e8m56oq","content":"<p>最近在看Linux的进程调度，其中进程描述符task_struct中有个变量state。这个变量是这样定义的：<br>    volatile long state;</p>\n<p>由于之前不了解volatile关键字的用法，所以这里对volatile深究了一下。</p>\n<a id=\"more\"></a>\n<h2 id=\"一-volatile关键字\"><a href=\"#一-volatile关键字\" class=\"headerlink\" title=\"一. volatile关键字\"></a><strong>一. volatile关键字</strong></h2><p>volatile是一个类型修饰符（type specifier）。</p>\n<p>在程序设计中，尤其是在C语言、C++、C#和Java语言中，使用volatile关键字声明的变量或对象通常拥有和优化和（或）多线程相关的特殊属性。通常，volatile关键字用来阻止（伪）编译器对那些它认为变量的值不能“被代码本身”改变的代码上执行任何优化。 在C环境中，volatile关键字的真实定义和适用范围经常被误解，加之C++、C#和Java都从C中神秘地“继承”了volatile，在这些编程语言中，因此这些语言中volatile的用法和语义大相径庭。</p>\n<h2 id=\"二-从比赛中引出问题\"><a href=\"#二-从比赛中引出问题\" class=\"headerlink\" title=\"二. 从比赛中引出问题\"></a><strong>二. 从比赛中引出问题</strong></h2><p> 在正式ACM/ICPC比赛开始之前，参赛选手都会做一项测试OJ系统各项边界的工作，比如测试提交代码最大可以开多少的数组，能大概接受多少时间复杂度的算法…</p>\n<p>比如：</p>\n<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    int i;\n    for (i=0; i&lt;1000000000; i++);\n    return 0;\n}\n</code></pre><p>显然，这段程序是在测试OJ能不能接受$O(10^9)$的算法,提交OJ返回的信息（<strong>Accept</strong> or <strong>Time Limit Exceed</strong>）来判断能否接受。</p>\n<p>通常情况下，这段代码提交上去都会被接受。</p>\n<p>因为在大多数OJ系统中，OJ在用gcc编译代码时，会自动加上-O2优化。结果就是，代码第5行的for循环被编译器优化掉了，最后不会被真正执行。</p>\n<p>这个情况在测试可以开多大数组中也会出现：编译器认为你开的数组没有被使用，所以就自动给优化了。</p>\n<p>于是通常的解决办法是，在循环中加一些赋值或其他的操作，来防止编译器自动优化。</p>\n<h2 id=\"三-从实例中分析问题\"><a href=\"#三-从实例中分析问题\" class=\"headerlink\" title=\"三. 从实例中分析问题\"></a><strong>三. 从实例中分析问题</strong></h2><p>编写Linux信号处理程序遇到的一个问题。</p>\n<p>代码:</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;signal.h&gt;\nint a;\nvoid func(int signo)\n{\n    printf(&quot;SIGNO: %d\\n&quot;,signo);\n    a=1;\n    printf(&quot;%d\\n&quot;,a);\n}\nint main()\n{\n    a=0;\n    signal(SIGINT,func);\n    while (a != 1);\n    return 0;\n}\n</code></pre><p>这段程序设置进程接受到SIGINT信号（摁下ctrl+c）时的动作是调用func函数。</p>\n<p>之后程序便进入一个循环，知道a的值被赋为1时，结束。</p>\n<p>可以看看实际效果。</p>\n<p><img src=\"http://bcs.duapp.com/blogbuk/volatile.png\"></p>\n<p>当使用gcc编译不开启O3编译优化选项时，程序执行效果和预想的效果是一样的。</p>\n<p>当使用gcc编译开启O3编译优化选项时，摁下ctrl+c时，程序并没有终止，而是继续循环了下去…最后是发送SIGQUIT信号（摁下ctrl+\\）才停止的。</p>\n<p>使用gcc -S t.c命令生产t.s文件，t.s文件里面可以看到t.c通过gcc产生的汇编代码。<br>File t.s：</p>\n<pre><code>    .file    &quot;t.c&quot;\n    .comm    a,4,4\n    .section    .rodata\n.LC0:\n    .string    &quot;SIGNO: %d\\n&quot;\n.LC1:\n    .string    &quot;%d\\n&quot;\n    .text\n    .globl    func\n    .type    func, @function\nfunc:\n.LFB0:\n    .cfi_startproc\n    pushl    %ebp\n    .cfi_def_cfa_offset 8\n    .cfi_offset 5, -8\n    movl    %esp, %ebp\n    .cfi_def_cfa_register 5\n    subl    $24, %esp\n    movl    8(%ebp), %eax\n    movl    %eax, 4(%esp)\n    movl    $.LC0, (%esp)\n    call    printf\n    movl    $1, a\n    movl    a, %eax\n    movl    %eax, 4(%esp)\n    movl    $.LC1, (%esp)\n    call    printf\n    leave\n    .cfi_restore 5\n    .cfi_def_cfa 4, 4\n    ret\n    .cfi_endproc\n.LFE0:\n    .size    func, .-func\n    .globl    main\n    .type    main, @function\nmain:\n.LFB1:\n    .cfi_startproc\n    pushl    %ebp\n    .cfi_def_cfa_offset 8\n    .cfi_offset 5, -8\n    movl    %esp, %ebp\n    .cfi_def_cfa_register 5\n    andl    $-16, %esp\n    subl    $16, %esp\n    movl    $0, a\n    movl    $func, 4(%esp)\n    movl    $2, (%esp)\n    call    signal\n    nop\n.L3:\n    movl    a, %eax\n    cmpl    $1, %eax\n    jne    .L3\n    movl    $0, %eax\n    leave\n    .cfi_restore 5\n    .cfi_def_cfa 4, 4\n    ret\n    .cfi_endproc\n.LFE1:\n    .size    main, .-main\n    .ident    &quot;GCC: (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2&quot;\n    .section    .note.GNU-stack,&quot;&quot;,@progbits\n</code></pre><p>第38行开始是main函数代码段。</p>\n<p>可以看到第53行到第56行是while循环代码段。</p>\n<p>第54行，把a传送到eax寄存器;</p>\n<p>第55行，比较数值1和eax寄存器中保存的值，即a;</p>\n<p>第56行，jne：若不相等则跳转到.L3;</p>\n<p>所以在汇编代码中，这个while循环是老老实实地执行了的。</p>\n<p>再使用gcc -S -O3 t.c -o t2.s 命令生产t2.s文件，t2.s文件里面可以看到t.c通过gcc并且经过O3编译优化之后产生的汇编代码。为了节省篇幅，就放从main之后的代码段。<br>File t2.s</p>\n<pre><code>...\nmain:\n.LFB26:\n    .cfi_startproc\n    pushl    %ebp\n    .cfi_def_cfa_offset 8\n    .cfi_offset 5, -8\n    movl    %esp, %ebp\n    .cfi_def_cfa_register 5\n    andl    $-16, %esp\n    subl    $16, %esp\n    movl    $func, 4(%esp)\n    movl    $2, (%esp)\n    movl    $0, a\n    call    signal\n    cmpl    $1, a\n    je    .L4\n.L6:\n    jmp    .L6\n    .p2align 4,,7\n    .p2align 3\n.L4:\n    xorl    %eax, %eax\n    leave\n    .cfi_restore 5\n    .cfi_def_cfa 4, 4\n    ret\n    .cfi_endproc\n.LFE26:\n    .size    main, .-main\n    .comm    a,4,4\n    .ident    &quot;GCC: (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2&quot;\n    .section    .note.GNU-stack,&quot;&quot;,@progbits\n</code></pre><p>第15行，对比了a和1的大小；</p>\n<p>第16行，je：相等则跳转到.L4。因为a=2，所以显然这里的跳转不会执行。</p>\n<p>第18行，jmp：无条件跳转到L6。相当于是在不断地回跳，即死循环。</p>\n<p>由此可知到，编译器并不知道a的值是会发生变化的。</p>\n<h2 id=\"四-使用volatile解决问题\"><a href=\"#四-使用volatile解决问题\" class=\"headerlink\" title=\"四. 使用volatile解决问题\"></a><strong>四. 使用volatile解决问题</strong></h2><p>volatile关键字就是要告诉编译器，这个变量时经常改变的，而且编译时不要进行代码优化，所以每次读写的时候都要到它所在的地址去读取。<br>如：</p>\n<pre><code>volatile int a；\n</code></pre><p>这样写，编译器就不会再盲目地把原来的那个循环“优化”</p>\n<im1g src=\"http://bcs.duapp.com/blogbuk/volatile2.jpg\">\n</im1g>","site":{"data":{}},"excerpt":"<p>最近在看Linux的进程调度，其中进程描述符task_struct中有个变量state。这个变量是这样定义的：<br>    volatile long state;</p>\n<p>由于之前不了解volatile关键字的用法，所以这里对volatile深究了一下。</p>","more":"<h2 id=\"一-volatile关键字\"><a href=\"#一-volatile关键字\" class=\"headerlink\" title=\"一. volatile关键字\"></a><strong>一. volatile关键字</strong></h2><p>volatile是一个类型修饰符（type specifier）。</p>\n<p>在程序设计中，尤其是在C语言、C++、C#和Java语言中，使用volatile关键字声明的变量或对象通常拥有和优化和（或）多线程相关的特殊属性。通常，volatile关键字用来阻止（伪）编译器对那些它认为变量的值不能“被代码本身”改变的代码上执行任何优化。 在C环境中，volatile关键字的真实定义和适用范围经常被误解，加之C++、C#和Java都从C中神秘地“继承”了volatile，在这些编程语言中，因此这些语言中volatile的用法和语义大相径庭。</p>\n<h2 id=\"二-从比赛中引出问题\"><a href=\"#二-从比赛中引出问题\" class=\"headerlink\" title=\"二. 从比赛中引出问题\"></a><strong>二. 从比赛中引出问题</strong></h2><p> 在正式ACM/ICPC比赛开始之前，参赛选手都会做一项测试OJ系统各项边界的工作，比如测试提交代码最大可以开多少的数组，能大概接受多少时间复杂度的算法…</p>\n<p>比如：</p>\n<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    int i;\n    for (i=0; i&lt;1000000000; i++);\n    return 0;\n}\n</code></pre><p>显然，这段程序是在测试OJ能不能接受$O(10^9)$的算法,提交OJ返回的信息（<strong>Accept</strong> or <strong>Time Limit Exceed</strong>）来判断能否接受。</p>\n<p>通常情况下，这段代码提交上去都会被接受。</p>\n<p>因为在大多数OJ系统中，OJ在用gcc编译代码时，会自动加上-O2优化。结果就是，代码第5行的for循环被编译器优化掉了，最后不会被真正执行。</p>\n<p>这个情况在测试可以开多大数组中也会出现：编译器认为你开的数组没有被使用，所以就自动给优化了。</p>\n<p>于是通常的解决办法是，在循环中加一些赋值或其他的操作，来防止编译器自动优化。</p>\n<h2 id=\"三-从实例中分析问题\"><a href=\"#三-从实例中分析问题\" class=\"headerlink\" title=\"三. 从实例中分析问题\"></a><strong>三. 从实例中分析问题</strong></h2><p>编写Linux信号处理程序遇到的一个问题。</p>\n<p>代码:</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;signal.h&gt;\nint a;\nvoid func(int signo)\n{\n    printf(&quot;SIGNO: %d\\n&quot;,signo);\n    a=1;\n    printf(&quot;%d\\n&quot;,a);\n}\nint main()\n{\n    a=0;\n    signal(SIGINT,func);\n    while (a != 1);\n    return 0;\n}\n</code></pre><p>这段程序设置进程接受到SIGINT信号（摁下ctrl+c）时的动作是调用func函数。</p>\n<p>之后程序便进入一个循环，知道a的值被赋为1时，结束。</p>\n<p>可以看看实际效果。</p>\n<p><img src=\"http://bcs.duapp.com/blogbuk/volatile.png\"></p>\n<p>当使用gcc编译不开启O3编译优化选项时，程序执行效果和预想的效果是一样的。</p>\n<p>当使用gcc编译开启O3编译优化选项时，摁下ctrl+c时，程序并没有终止，而是继续循环了下去…最后是发送SIGQUIT信号（摁下ctrl+\\）才停止的。</p>\n<p>使用gcc -S t.c命令生产t.s文件，t.s文件里面可以看到t.c通过gcc产生的汇编代码。<br>File t.s：</p>\n<pre><code>    .file    &quot;t.c&quot;\n    .comm    a,4,4\n    .section    .rodata\n.LC0:\n    .string    &quot;SIGNO: %d\\n&quot;\n.LC1:\n    .string    &quot;%d\\n&quot;\n    .text\n    .globl    func\n    .type    func, @function\nfunc:\n.LFB0:\n    .cfi_startproc\n    pushl    %ebp\n    .cfi_def_cfa_offset 8\n    .cfi_offset 5, -8\n    movl    %esp, %ebp\n    .cfi_def_cfa_register 5\n    subl    $24, %esp\n    movl    8(%ebp), %eax\n    movl    %eax, 4(%esp)\n    movl    $.LC0, (%esp)\n    call    printf\n    movl    $1, a\n    movl    a, %eax\n    movl    %eax, 4(%esp)\n    movl    $.LC1, (%esp)\n    call    printf\n    leave\n    .cfi_restore 5\n    .cfi_def_cfa 4, 4\n    ret\n    .cfi_endproc\n.LFE0:\n    .size    func, .-func\n    .globl    main\n    .type    main, @function\nmain:\n.LFB1:\n    .cfi_startproc\n    pushl    %ebp\n    .cfi_def_cfa_offset 8\n    .cfi_offset 5, -8\n    movl    %esp, %ebp\n    .cfi_def_cfa_register 5\n    andl    $-16, %esp\n    subl    $16, %esp\n    movl    $0, a\n    movl    $func, 4(%esp)\n    movl    $2, (%esp)\n    call    signal\n    nop\n.L3:\n    movl    a, %eax\n    cmpl    $1, %eax\n    jne    .L3\n    movl    $0, %eax\n    leave\n    .cfi_restore 5\n    .cfi_def_cfa 4, 4\n    ret\n    .cfi_endproc\n.LFE1:\n    .size    main, .-main\n    .ident    &quot;GCC: (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2&quot;\n    .section    .note.GNU-stack,&quot;&quot;,@progbits\n</code></pre><p>第38行开始是main函数代码段。</p>\n<p>可以看到第53行到第56行是while循环代码段。</p>\n<p>第54行，把a传送到eax寄存器;</p>\n<p>第55行，比较数值1和eax寄存器中保存的值，即a;</p>\n<p>第56行，jne：若不相等则跳转到.L3;</p>\n<p>所以在汇编代码中，这个while循环是老老实实地执行了的。</p>\n<p>再使用gcc -S -O3 t.c -o t2.s 命令生产t2.s文件，t2.s文件里面可以看到t.c通过gcc并且经过O3编译优化之后产生的汇编代码。为了节省篇幅，就放从main之后的代码段。<br>File t2.s</p>\n<pre><code>...\nmain:\n.LFB26:\n    .cfi_startproc\n    pushl    %ebp\n    .cfi_def_cfa_offset 8\n    .cfi_offset 5, -8\n    movl    %esp, %ebp\n    .cfi_def_cfa_register 5\n    andl    $-16, %esp\n    subl    $16, %esp\n    movl    $func, 4(%esp)\n    movl    $2, (%esp)\n    movl    $0, a\n    call    signal\n    cmpl    $1, a\n    je    .L4\n.L6:\n    jmp    .L6\n    .p2align 4,,7\n    .p2align 3\n.L4:\n    xorl    %eax, %eax\n    leave\n    .cfi_restore 5\n    .cfi_def_cfa 4, 4\n    ret\n    .cfi_endproc\n.LFE26:\n    .size    main, .-main\n    .comm    a,4,4\n    .ident    &quot;GCC: (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2&quot;\n    .section    .note.GNU-stack,&quot;&quot;,@progbits\n</code></pre><p>第15行，对比了a和1的大小；</p>\n<p>第16行，je：相等则跳转到.L4。因为a=2，所以显然这里的跳转不会执行。</p>\n<p>第18行，jmp：无条件跳转到L6。相当于是在不断地回跳，即死循环。</p>\n<p>由此可知到，编译器并不知道a的值是会发生变化的。</p>\n<h2 id=\"四-使用volatile解决问题\"><a href=\"#四-使用volatile解决问题\" class=\"headerlink\" title=\"四. 使用volatile解决问题\"></a><strong>四. 使用volatile解决问题</strong></h2><p>volatile关键字就是要告诉编译器，这个变量时经常改变的，而且编译时不要进行代码优化，所以每次读写的时候都要到它所在的地址去读取。<br>如：</p>\n<pre><code>volatile int a；\n</code></pre><p>这样写，编译器就不会再盲目地把原来的那个循环“优化”</p>\n<im1g src=\"http://bcs.duapp.com/blogbuk/volatile2.jpg\">\n</im1g>"},{"layout":"post","title":"【总结】2013年，再见 ACM/ICPC","date":"2013-11-30T17:21:00.000Z","comments":1,"reward":true,"_content":"\n在整理旧博客的文章时，偶然翻到了去年这个时候写的总结[【总结】2012年，很水的一年][1]，于是便想也写个今年的总结。\n\n去年的那篇总结是写于去年打完ACM/ICPC亚洲区域赛成都赛区后。那时，我和[Aikilis][3]，小灯组队，队名叫3dmin/三弟马克思，满怀希望，以为能拿下学校的第一块亚洲区域赛奖牌......可惜正如那篇总结里面说得“其实我们本来就是在走钢丝”，我们最后打铁了。\n\n<!-- more -->\n\n在那之后，我开始每晚在[bnuoj][2]刷题，刷USACO刷SGU。就在过了几个月之后，某傻逼说他要去考研，而小灯也不打了。于是今年我和wyp，萌萌学长(花花，小徐子)组队打比赛。就在写这篇总结的几天前，某傻逼说他又不考研了，跑去工作去了，呵呵......\n\n之后的半年就是我加入syc，和小伙伴们各种开心地玩耍......\n\n在之后应该就是今年的区域赛......在成都赛区的时候，我们卡题了，卡了整场比赛，别的队都AC了，最后悲剧重演...随后的一个月里，我感觉挺难熬的。我之前觉得我们这次肯定能拿牌，心里面都考虑着各种安排，但是打完之后我感觉天都蹋了，计划全部都打乱了。于是只能寄希望于长沙赛区，如果长沙不能拿牌，那么我就会非常尴尬。感谢Catherine学姐在这个时候，给我说了很多，让我稳定了心态。真的很感谢学姐，她在工作中还时常牵挂着学校的acm。\n\n最后在长沙我们终于成功地拿到学校的第一块亚洲区域赛奖牌，真的很开心。\n\n感谢bia，purplest两位队友，感谢xyjian教练，感谢支持着我们的队友们、同学们、老师们、小伙伴们。\n\n学校的ICPC刚刚起步，要走的路还很长。\n\n每年这个时候都会又很多退役贴，于是我这篇总结也算作是我的退役贴吧。\n\n我的算法竞赛最初是从高中NOIP开始的。为了参加高中时的noip比赛，学校组织了一个班，培训我们参加noip。虽然最后成绩很尴尬，但我因此认识了很多朋友。而且我还听说大学有个比赛叫ACM，并且当时也高三了，挺紧张的，所以也没太留恋。后来上了大学，向欣欣学姐寻问了ACM方面的事。得知我们学校有ACM校队时，我很开心，于是向她要了xyjian教练的联系方式，开始了我的ACM之旅。\n\n我没想那么多，直接搞起。参加ACM并没有什么特定的目的，也没有什么要求，只是为了弥补高中时留下的遗憾。之后的奋斗过程并不想小说里写得那么精彩，但是却算是我大学生涯里一段难忘的回忆。最后的结果也算是圆满。我见证了我们学校从无到有，也为自己的算法竞赛划上了一个圆满的句号。\n\n再见ACM/ICPC。\n[1]:http://blog.csdn.net/sssogs/article/details/8174822\n[2]:http://acm.bnu.edu.cn\n[3]:http://aikilis.com\n","source":"_posts/【总结】2013年，再见 ACM:ICPC.md","raw":"---\nlayout: post\ntitle: 【总结】2013年，再见 ACM/ICPC\ndate: 2013-12-1 01:21\ncomments: true\nreward: true\ntags:\n    - Life\n---\n\n在整理旧博客的文章时，偶然翻到了去年这个时候写的总结[【总结】2012年，很水的一年][1]，于是便想也写个今年的总结。\n\n去年的那篇总结是写于去年打完ACM/ICPC亚洲区域赛成都赛区后。那时，我和[Aikilis][3]，小灯组队，队名叫3dmin/三弟马克思，满怀希望，以为能拿下学校的第一块亚洲区域赛奖牌......可惜正如那篇总结里面说得“其实我们本来就是在走钢丝”，我们最后打铁了。\n\n<!-- more -->\n\n在那之后，我开始每晚在[bnuoj][2]刷题，刷USACO刷SGU。就在过了几个月之后，某傻逼说他要去考研，而小灯也不打了。于是今年我和wyp，萌萌学长(花花，小徐子)组队打比赛。就在写这篇总结的几天前，某傻逼说他又不考研了，跑去工作去了，呵呵......\n\n之后的半年就是我加入syc，和小伙伴们各种开心地玩耍......\n\n在之后应该就是今年的区域赛......在成都赛区的时候，我们卡题了，卡了整场比赛，别的队都AC了，最后悲剧重演...随后的一个月里，我感觉挺难熬的。我之前觉得我们这次肯定能拿牌，心里面都考虑着各种安排，但是打完之后我感觉天都蹋了，计划全部都打乱了。于是只能寄希望于长沙赛区，如果长沙不能拿牌，那么我就会非常尴尬。感谢Catherine学姐在这个时候，给我说了很多，让我稳定了心态。真的很感谢学姐，她在工作中还时常牵挂着学校的acm。\n\n最后在长沙我们终于成功地拿到学校的第一块亚洲区域赛奖牌，真的很开心。\n\n感谢bia，purplest两位队友，感谢xyjian教练，感谢支持着我们的队友们、同学们、老师们、小伙伴们。\n\n学校的ICPC刚刚起步，要走的路还很长。\n\n每年这个时候都会又很多退役贴，于是我这篇总结也算作是我的退役贴吧。\n\n我的算法竞赛最初是从高中NOIP开始的。为了参加高中时的noip比赛，学校组织了一个班，培训我们参加noip。虽然最后成绩很尴尬，但我因此认识了很多朋友。而且我还听说大学有个比赛叫ACM，并且当时也高三了，挺紧张的，所以也没太留恋。后来上了大学，向欣欣学姐寻问了ACM方面的事。得知我们学校有ACM校队时，我很开心，于是向她要了xyjian教练的联系方式，开始了我的ACM之旅。\n\n我没想那么多，直接搞起。参加ACM并没有什么特定的目的，也没有什么要求，只是为了弥补高中时留下的遗憾。之后的奋斗过程并不想小说里写得那么精彩，但是却算是我大学生涯里一段难忘的回忆。最后的结果也算是圆满。我见证了我们学校从无到有，也为自己的算法竞赛划上了一个圆满的句号。\n\n再见ACM/ICPC。\n[1]:http://blog.csdn.net/sssogs/article/details/8174822\n[2]:http://acm.bnu.edu.cn\n[3]:http://aikilis.com\n","slug":"【总结】2013年，再见 ACM:ICPC","published":1,"updated":"2018-05-23T14:45:27.079Z","photos":[],"link":"","_id":"cjhj92bm7000ye0vfmgpfae2c","content":"<p>在整理旧博客的文章时，偶然翻到了去年这个时候写的总结<a href=\"http://blog.csdn.net/sssogs/article/details/8174822\" target=\"_blank\" rel=\"noopener\">【总结】2012年，很水的一年</a>，于是便想也写个今年的总结。</p>\n<p>去年的那篇总结是写于去年打完ACM/ICPC亚洲区域赛成都赛区后。那时，我和<a href=\"http://aikilis.com\" target=\"_blank\" rel=\"noopener\">Aikilis</a>，小灯组队，队名叫3dmin/三弟马克思，满怀希望，以为能拿下学校的第一块亚洲区域赛奖牌……可惜正如那篇总结里面说得“其实我们本来就是在走钢丝”，我们最后打铁了。</p>\n<a id=\"more\"></a>\n<p>在那之后，我开始每晚在<a href=\"http://acm.bnu.edu.cn\" target=\"_blank\" rel=\"noopener\">bnuoj</a>刷题，刷USACO刷SGU。就在过了几个月之后，某傻逼说他要去考研，而小灯也不打了。于是今年我和wyp，萌萌学长(花花，小徐子)组队打比赛。就在写这篇总结的几天前，某傻逼说他又不考研了，跑去工作去了，呵呵……</p>\n<p>之后的半年就是我加入syc，和小伙伴们各种开心地玩耍……</p>\n<p>在之后应该就是今年的区域赛……在成都赛区的时候，我们卡题了，卡了整场比赛，别的队都AC了，最后悲剧重演…随后的一个月里，我感觉挺难熬的。我之前觉得我们这次肯定能拿牌，心里面都考虑着各种安排，但是打完之后我感觉天都蹋了，计划全部都打乱了。于是只能寄希望于长沙赛区，如果长沙不能拿牌，那么我就会非常尴尬。感谢Catherine学姐在这个时候，给我说了很多，让我稳定了心态。真的很感谢学姐，她在工作中还时常牵挂着学校的acm。</p>\n<p>最后在长沙我们终于成功地拿到学校的第一块亚洲区域赛奖牌，真的很开心。</p>\n<p>感谢bia，purplest两位队友，感谢xyjian教练，感谢支持着我们的队友们、同学们、老师们、小伙伴们。</p>\n<p>学校的ICPC刚刚起步，要走的路还很长。</p>\n<p>每年这个时候都会又很多退役贴，于是我这篇总结也算作是我的退役贴吧。</p>\n<p>我的算法竞赛最初是从高中NOIP开始的。为了参加高中时的noip比赛，学校组织了一个班，培训我们参加noip。虽然最后成绩很尴尬，但我因此认识了很多朋友。而且我还听说大学有个比赛叫ACM，并且当时也高三了，挺紧张的，所以也没太留恋。后来上了大学，向欣欣学姐寻问了ACM方面的事。得知我们学校有ACM校队时，我很开心，于是向她要了xyjian教练的联系方式，开始了我的ACM之旅。</p>\n<p>我没想那么多，直接搞起。参加ACM并没有什么特定的目的，也没有什么要求，只是为了弥补高中时留下的遗憾。之后的奋斗过程并不想小说里写得那么精彩，但是却算是我大学生涯里一段难忘的回忆。最后的结果也算是圆满。我见证了我们学校从无到有，也为自己的算法竞赛划上了一个圆满的句号。</p>\n<p>再见ACM/ICPC。</p>\n","site":{"data":{}},"excerpt":"<p>在整理旧博客的文章时，偶然翻到了去年这个时候写的总结<a href=\"http://blog.csdn.net/sssogs/article/details/8174822\" target=\"_blank\" rel=\"noopener\">【总结】2012年，很水的一年</a>，于是便想也写个今年的总结。</p>\n<p>去年的那篇总结是写于去年打完ACM/ICPC亚洲区域赛成都赛区后。那时，我和<a href=\"http://aikilis.com\" target=\"_blank\" rel=\"noopener\">Aikilis</a>，小灯组队，队名叫3dmin/三弟马克思，满怀希望，以为能拿下学校的第一块亚洲区域赛奖牌……可惜正如那篇总结里面说得“其实我们本来就是在走钢丝”，我们最后打铁了。</p>","more":"<p>在那之后，我开始每晚在<a href=\"http://acm.bnu.edu.cn\" target=\"_blank\" rel=\"noopener\">bnuoj</a>刷题，刷USACO刷SGU。就在过了几个月之后，某傻逼说他要去考研，而小灯也不打了。于是今年我和wyp，萌萌学长(花花，小徐子)组队打比赛。就在写这篇总结的几天前，某傻逼说他又不考研了，跑去工作去了，呵呵……</p>\n<p>之后的半年就是我加入syc，和小伙伴们各种开心地玩耍……</p>\n<p>在之后应该就是今年的区域赛……在成都赛区的时候，我们卡题了，卡了整场比赛，别的队都AC了，最后悲剧重演…随后的一个月里，我感觉挺难熬的。我之前觉得我们这次肯定能拿牌，心里面都考虑着各种安排，但是打完之后我感觉天都蹋了，计划全部都打乱了。于是只能寄希望于长沙赛区，如果长沙不能拿牌，那么我就会非常尴尬。感谢Catherine学姐在这个时候，给我说了很多，让我稳定了心态。真的很感谢学姐，她在工作中还时常牵挂着学校的acm。</p>\n<p>最后在长沙我们终于成功地拿到学校的第一块亚洲区域赛奖牌，真的很开心。</p>\n<p>感谢bia，purplest两位队友，感谢xyjian教练，感谢支持着我们的队友们、同学们、老师们、小伙伴们。</p>\n<p>学校的ICPC刚刚起步，要走的路还很长。</p>\n<p>每年这个时候都会又很多退役贴，于是我这篇总结也算作是我的退役贴吧。</p>\n<p>我的算法竞赛最初是从高中NOIP开始的。为了参加高中时的noip比赛，学校组织了一个班，培训我们参加noip。虽然最后成绩很尴尬，但我因此认识了很多朋友。而且我还听说大学有个比赛叫ACM，并且当时也高三了，挺紧张的，所以也没太留恋。后来上了大学，向欣欣学姐寻问了ACM方面的事。得知我们学校有ACM校队时，我很开心，于是向她要了xyjian教练的联系方式，开始了我的ACM之旅。</p>\n<p>我没想那么多，直接搞起。参加ACM并没有什么特定的目的，也没有什么要求，只是为了弥补高中时留下的遗憾。之后的奋斗过程并不想小说里写得那么精彩，但是却算是我大学生涯里一段难忘的回忆。最后的结果也算是圆满。我见证了我们学校从无到有，也为自己的算法竞赛划上了一个圆满的句号。</p>\n<p>再见ACM/ICPC。</p>"},{"layout":"post","title":"【星月之旅】15年6月土耳其12天毕业旅行图文游记","date":"2016-01-22T17:21:00.000Z","comments":1,"reward":true,"_content":"\n### I. 前言\n\n距离旅行结束，已经过了几个月了。终于还是想要写点东西来稍微纪念一下，第一次孤身一人去千里之外的陌生国度旅行，第一次去夜店，第一次去海边，对了！还有第一次乘坐热气球～\n\n土耳其，位于亚欧交界地似亚似欧的国家。选这里作为毕业旅行目的地的原因主要是，1.签证好办花费不高，2.想去看看传说中的暗黑2下水道原型（地下水宫）和星球大战月球取景地（格雷梅国家公园），3.热气球～\n\n嘛～本文将以图文并茂地方式来记录这次旅程中令人印象深刻的地方，希望轻松的文字和图片能够让读者感受到一个神秘而充满魅力的土国。\n\n<!-- more -->\n\n### II. 行程总览\n\n计划行程是12天，从成都出发，经阿联酋转机，到伊斯坦布尔，回程也是从伊斯坦布尔出发，经阿联酋转机，回到成都。\n\n机票买的阿提哈德航空的联程票，4168人民币。吃喝住宿什么的没有事先计划，我不太喜欢有细致的计划来规定我什么时候必须离开，怎么花费开销，所以我是走到一个地方，想玩多久就玩多久，属于比较奔放的\"自由行\"，哈哈.....\n\n本次预计花费在9k左右，但是实际情况是玩得比较嗨，超出了不少...\n\n旅行结束后，我把我走过的地方在地图上大概的轨迹是这样的。\n\n<img src=\"https://qiniu.plusplus7.com/turkeypath.png-fullpercent\"/>\n\n### III. 蓝色印象\n\n抵达土耳其，到达酒店时正好是下午。当打开窗户时，眼前的景象是土耳其给我的第一印象。\n\n<img src=\"https://qiniu.plusplus7.com/IMG_0068_sy.jpg-fullpercent\"/>\n\n醉心的蓝色，洗去了长达21个小时飞行的疲惫\n\n<img src=\"https://qiniu.plusplus7.com/IMG_1227_sy.jpg-fullpercent\"/>\n\n古老的城市，博斯普鲁斯海峡，加拉塔大桥\n\n<img src=\"https://qiniu.plusplus7.com/IMG_0138_sy.jpg-fullpercent\"/>\n\n费特希耶的沙滩\n\n<img src=\"https://qiniu.plusplus7.com/IMG_0689_sy.jpg-fullpercent\"/>\n\n蓝色清真寺\n\n<img src=\"https://qiniu.plusplus7.com/IMG_1245_sy.jpg-fullpercent\"/>\n\n独立大街\n\n<img src=\"https://qiniu.plusplus7.com/IMG_0702_sy.jpg-fullpercent\"/>\n\n暗黑2下水道原型 - 地下水宫\n\n<img src=\"https://qiniu.plusplus7.com/IMG_0995_sy.jpg-fullpercent\"/>\n\n地球上最接近月球表面的地方 - 格雷梅的岩石地貌\n\n### IV. 杂记\n\n几张好看的旅游图片发完了，接下来就随便说说旅游中发生的好玩的一些事情吧～\n\n* 两个书呆子的尴尬夜店游\n\n    在伊斯坦布尔的时候，遇到住同一个酒店的学生。他是在迪拜读大学暑假一个人出来旅行，想来土耳其体验热气球的。他是一个偏内向的大学生，学的专业，虽然我没有听太懂，但是应该是和物理有关的，我瞬间就想到TBBT...后来，我说我没去夜店玩过，想去看一看。结果他也表示没去过=_=||，然后我们俩就说结伴一起去会安全一些。\n    后来我们就去独立大街附近一家看起来还比较靠谱，位于主道上的，人比较多的夜店...进去之后，发现也没什么特别的，就是舞曲电音循环播放，什么江南style，gentleman之类的，还有一些长得很丑的大妈在跳舞......因为我们俩都没什么经验，于是就点了两杯最便宜的酒，坐在一个门口的桌子边上，因为他说靠门口的桌子安全一些，发生什么事情可以马上开溜......旁边table的人倒是玩得非常high，各种跳跳唱唱的，我们俩就尴尬地喝酒自嗨。喝完之后发现夜店一点也不好玩，然后就去独立大街逛了逛，聊了一下各自的国家，然后就回酒店了。后来才知道他是塔吉克斯坦人，他之前跟我说“炸鸡个四蛋”，我一下子想不起来，于是只能表示不明觉厉...\n\n* 番红花城小记\n\n    番红花城，感觉这个地方中国人和韩国人日本人非常喜欢去，这里的店家甚至有的都会说中文。这里的建筑风格是古代奥斯曼帝国时期的建筑，非常古老的感觉，在这里的住宿我特地选择了民居，一个穆斯林开的旅店，也算是感受了一下穆斯林的文化。和我住一个人家的有个韩国人，是和妹子一起出来玩的。和他认识了之后，他就感叹了一下“像我这样的中国人独自出游的非常少，中国人都喜欢抱团旅行”。\n    番红花城的小镇和中国的乡镇很接近，很多东西都比较过时。我刚到那家穆斯林旅店的时候，就发现老板用的电脑是vista的系统，还有她的儿子正在玩GTA3...镇上的网吧，这里有英雄联盟的推广海报，有很多小孩子在里面玩得很high=.=\n\n* 暂时想不到了，先写到这里吧～\n\n在土耳其的十二天里，我每天都做了游记视频，可以在我的[bilibili视频空间][1]和[youku视频空间][2]观看～\n\n[1]: http://www.bilibili.com/video/av2588625/\n[2]: http://v.youku.com/v_show/id_XMTI2Nzk0NTQxNg==.html\n","source":"_posts/【星月之旅】15年6月土耳其12天毕业旅行图文游记.md","raw":"---\nlayout: post\ntitle: 【星月之旅】15年6月土耳其12天毕业旅行图文游记\ndate: 2016-1-23 01:21\ncomments: true\nreward: true\ntags:\n    - Life\n---\n\n### I. 前言\n\n距离旅行结束，已经过了几个月了。终于还是想要写点东西来稍微纪念一下，第一次孤身一人去千里之外的陌生国度旅行，第一次去夜店，第一次去海边，对了！还有第一次乘坐热气球～\n\n土耳其，位于亚欧交界地似亚似欧的国家。选这里作为毕业旅行目的地的原因主要是，1.签证好办花费不高，2.想去看看传说中的暗黑2下水道原型（地下水宫）和星球大战月球取景地（格雷梅国家公园），3.热气球～\n\n嘛～本文将以图文并茂地方式来记录这次旅程中令人印象深刻的地方，希望轻松的文字和图片能够让读者感受到一个神秘而充满魅力的土国。\n\n<!-- more -->\n\n### II. 行程总览\n\n计划行程是12天，从成都出发，经阿联酋转机，到伊斯坦布尔，回程也是从伊斯坦布尔出发，经阿联酋转机，回到成都。\n\n机票买的阿提哈德航空的联程票，4168人民币。吃喝住宿什么的没有事先计划，我不太喜欢有细致的计划来规定我什么时候必须离开，怎么花费开销，所以我是走到一个地方，想玩多久就玩多久，属于比较奔放的\"自由行\"，哈哈.....\n\n本次预计花费在9k左右，但是实际情况是玩得比较嗨，超出了不少...\n\n旅行结束后，我把我走过的地方在地图上大概的轨迹是这样的。\n\n<img src=\"https://qiniu.plusplus7.com/turkeypath.png-fullpercent\"/>\n\n### III. 蓝色印象\n\n抵达土耳其，到达酒店时正好是下午。当打开窗户时，眼前的景象是土耳其给我的第一印象。\n\n<img src=\"https://qiniu.plusplus7.com/IMG_0068_sy.jpg-fullpercent\"/>\n\n醉心的蓝色，洗去了长达21个小时飞行的疲惫\n\n<img src=\"https://qiniu.plusplus7.com/IMG_1227_sy.jpg-fullpercent\"/>\n\n古老的城市，博斯普鲁斯海峡，加拉塔大桥\n\n<img src=\"https://qiniu.plusplus7.com/IMG_0138_sy.jpg-fullpercent\"/>\n\n费特希耶的沙滩\n\n<img src=\"https://qiniu.plusplus7.com/IMG_0689_sy.jpg-fullpercent\"/>\n\n蓝色清真寺\n\n<img src=\"https://qiniu.plusplus7.com/IMG_1245_sy.jpg-fullpercent\"/>\n\n独立大街\n\n<img src=\"https://qiniu.plusplus7.com/IMG_0702_sy.jpg-fullpercent\"/>\n\n暗黑2下水道原型 - 地下水宫\n\n<img src=\"https://qiniu.plusplus7.com/IMG_0995_sy.jpg-fullpercent\"/>\n\n地球上最接近月球表面的地方 - 格雷梅的岩石地貌\n\n### IV. 杂记\n\n几张好看的旅游图片发完了，接下来就随便说说旅游中发生的好玩的一些事情吧～\n\n* 两个书呆子的尴尬夜店游\n\n    在伊斯坦布尔的时候，遇到住同一个酒店的学生。他是在迪拜读大学暑假一个人出来旅行，想来土耳其体验热气球的。他是一个偏内向的大学生，学的专业，虽然我没有听太懂，但是应该是和物理有关的，我瞬间就想到TBBT...后来，我说我没去夜店玩过，想去看一看。结果他也表示没去过=_=||，然后我们俩就说结伴一起去会安全一些。\n    后来我们就去独立大街附近一家看起来还比较靠谱，位于主道上的，人比较多的夜店...进去之后，发现也没什么特别的，就是舞曲电音循环播放，什么江南style，gentleman之类的，还有一些长得很丑的大妈在跳舞......因为我们俩都没什么经验，于是就点了两杯最便宜的酒，坐在一个门口的桌子边上，因为他说靠门口的桌子安全一些，发生什么事情可以马上开溜......旁边table的人倒是玩得非常high，各种跳跳唱唱的，我们俩就尴尬地喝酒自嗨。喝完之后发现夜店一点也不好玩，然后就去独立大街逛了逛，聊了一下各自的国家，然后就回酒店了。后来才知道他是塔吉克斯坦人，他之前跟我说“炸鸡个四蛋”，我一下子想不起来，于是只能表示不明觉厉...\n\n* 番红花城小记\n\n    番红花城，感觉这个地方中国人和韩国人日本人非常喜欢去，这里的店家甚至有的都会说中文。这里的建筑风格是古代奥斯曼帝国时期的建筑，非常古老的感觉，在这里的住宿我特地选择了民居，一个穆斯林开的旅店，也算是感受了一下穆斯林的文化。和我住一个人家的有个韩国人，是和妹子一起出来玩的。和他认识了之后，他就感叹了一下“像我这样的中国人独自出游的非常少，中国人都喜欢抱团旅行”。\n    番红花城的小镇和中国的乡镇很接近，很多东西都比较过时。我刚到那家穆斯林旅店的时候，就发现老板用的电脑是vista的系统，还有她的儿子正在玩GTA3...镇上的网吧，这里有英雄联盟的推广海报，有很多小孩子在里面玩得很high=.=\n\n* 暂时想不到了，先写到这里吧～\n\n在土耳其的十二天里，我每天都做了游记视频，可以在我的[bilibili视频空间][1]和[youku视频空间][2]观看～\n\n[1]: http://www.bilibili.com/video/av2588625/\n[2]: http://v.youku.com/v_show/id_XMTI2Nzk0NTQxNg==.html\n","slug":"【星月之旅】15年6月土耳其12天毕业旅行图文游记","published":1,"updated":"2019-01-14T17:09:22.715Z","_id":"cjhj92bmk0011e0vfs3k4di3n","photos":[],"link":"","content":"<h3 id=\"I-前言\"><a href=\"#I-前言\" class=\"headerlink\" title=\"I. 前言\"></a>I. 前言</h3><p>距离旅行结束，已经过了几个月了。终于还是想要写点东西来稍微纪念一下，第一次孤身一人去千里之外的陌生国度旅行，第一次去夜店，第一次去海边，对了！还有第一次乘坐热气球～</p>\n<p>土耳其，位于亚欧交界地似亚似欧的国家。选这里作为毕业旅行目的地的原因主要是，1.签证好办花费不高，2.想去看看传说中的暗黑2下水道原型（地下水宫）和星球大战月球取景地（格雷梅国家公园），3.热气球～</p>\n<p>嘛～本文将以图文并茂地方式来记录这次旅程中令人印象深刻的地方，希望轻松的文字和图片能够让读者感受到一个神秘而充满魅力的土国。</p>\n<a id=\"more\"></a>\n<h3 id=\"II-行程总览\"><a href=\"#II-行程总览\" class=\"headerlink\" title=\"II. 行程总览\"></a>II. 行程总览</h3><p>计划行程是12天，从成都出发，经阿联酋转机，到伊斯坦布尔，回程也是从伊斯坦布尔出发，经阿联酋转机，回到成都。</p>\n<p>机票买的阿提哈德航空的联程票，4168人民币。吃喝住宿什么的没有事先计划，我不太喜欢有细致的计划来规定我什么时候必须离开，怎么花费开销，所以我是走到一个地方，想玩多久就玩多久，属于比较奔放的”自由行”，哈哈…..</p>\n<p>本次预计花费在9k左右，但是实际情况是玩得比较嗨，超出了不少…</p>\n<p>旅行结束后，我把我走过的地方在地图上大概的轨迹是这样的。</p>\n<p><img src=\"https://qiniu.plusplus7.com/turkeypath.png-fullpercent\"></p>\n<h3 id=\"III-蓝色印象\"><a href=\"#III-蓝色印象\" class=\"headerlink\" title=\"III. 蓝色印象\"></a>III. 蓝色印象</h3><p>抵达土耳其，到达酒店时正好是下午。当打开窗户时，眼前的景象是土耳其给我的第一印象。</p>\n<p><img src=\"https://qiniu.plusplus7.com/IMG_0068_sy.jpg-fullpercent\"></p>\n<p>醉心的蓝色，洗去了长达21个小时飞行的疲惫</p>\n<p><img src=\"https://qiniu.plusplus7.com/IMG_1227_sy.jpg-fullpercent\"></p>\n<p>古老的城市，博斯普鲁斯海峡，加拉塔大桥</p>\n<p><img src=\"https://qiniu.plusplus7.com/IMG_0138_sy.jpg-fullpercent\"></p>\n<p>费特希耶的沙滩</p>\n<p><img src=\"https://qiniu.plusplus7.com/IMG_0689_sy.jpg-fullpercent\"></p>\n<p>蓝色清真寺</p>\n<p><img src=\"https://qiniu.plusplus7.com/IMG_1245_sy.jpg-fullpercent\"></p>\n<p>独立大街</p>\n<p><img src=\"https://qiniu.plusplus7.com/IMG_0702_sy.jpg-fullpercent\"></p>\n<p>暗黑2下水道原型 - 地下水宫</p>\n<p><img src=\"https://qiniu.plusplus7.com/IMG_0995_sy.jpg-fullpercent\"></p>\n<p>地球上最接近月球表面的地方 - 格雷梅的岩石地貌</p>\n<h3 id=\"IV-杂记\"><a href=\"#IV-杂记\" class=\"headerlink\" title=\"IV. 杂记\"></a>IV. 杂记</h3><p>几张好看的旅游图片发完了，接下来就随便说说旅游中发生的好玩的一些事情吧～</p>\n<ul>\n<li><p>两个书呆子的尴尬夜店游</p>\n<p>  在伊斯坦布尔的时候，遇到住同一个酒店的学生。他是在迪拜读大学暑假一个人出来旅行，想来土耳其体验热气球的。他是一个偏内向的大学生，学的专业，虽然我没有听太懂，但是应该是和物理有关的，我瞬间就想到TBBT…后来，我说我没去夜店玩过，想去看一看。结果他也表示没去过=_=||，然后我们俩就说结伴一起去会安全一些。<br>  后来我们就去独立大街附近一家看起来还比较靠谱，位于主道上的，人比较多的夜店…进去之后，发现也没什么特别的，就是舞曲电音循环播放，什么江南style，gentleman之类的，还有一些长得很丑的大妈在跳舞……因为我们俩都没什么经验，于是就点了两杯最便宜的酒，坐在一个门口的桌子边上，因为他说靠门口的桌子安全一些，发生什么事情可以马上开溜……旁边table的人倒是玩得非常high，各种跳跳唱唱的，我们俩就尴尬地喝酒自嗨。喝完之后发现夜店一点也不好玩，然后就去独立大街逛了逛，聊了一下各自的国家，然后就回酒店了。后来才知道他是塔吉克斯坦人，他之前跟我说“炸鸡个四蛋”，我一下子想不起来，于是只能表示不明觉厉…</p>\n</li>\n<li><p>番红花城小记</p>\n<p>  番红花城，感觉这个地方中国人和韩国人日本人非常喜欢去，这里的店家甚至有的都会说中文。这里的建筑风格是古代奥斯曼帝国时期的建筑，非常古老的感觉，在这里的住宿我特地选择了民居，一个穆斯林开的旅店，也算是感受了一下穆斯林的文化。和我住一个人家的有个韩国人，是和妹子一起出来玩的。和他认识了之后，他就感叹了一下“像我这样的中国人独自出游的非常少，中国人都喜欢抱团旅行”。<br>  番红花城的小镇和中国的乡镇很接近，很多东西都比较过时。我刚到那家穆斯林旅店的时候，就发现老板用的电脑是vista的系统，还有她的儿子正在玩GTA3…镇上的网吧，这里有英雄联盟的推广海报，有很多小孩子在里面玩得很high=.=</p>\n</li>\n<li><p>暂时想不到了，先写到这里吧～</p>\n</li>\n</ul>\n<p>在土耳其的十二天里，我每天都做了游记视频，可以在我的<a href=\"http://www.bilibili.com/video/av2588625/\" target=\"_blank\" rel=\"noopener\">bilibili视频空间</a>和<a href=\"http://v.youku.com/v_show/id_XMTI2Nzk0NTQxNg==.html\" target=\"_blank\" rel=\"noopener\">youku视频空间</a>观看～</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"I-前言\"><a href=\"#I-前言\" class=\"headerlink\" title=\"I. 前言\"></a>I. 前言</h3><p>距离旅行结束，已经过了几个月了。终于还是想要写点东西来稍微纪念一下，第一次孤身一人去千里之外的陌生国度旅行，第一次去夜店，第一次去海边，对了！还有第一次乘坐热气球～</p>\n<p>土耳其，位于亚欧交界地似亚似欧的国家。选这里作为毕业旅行目的地的原因主要是，1.签证好办花费不高，2.想去看看传说中的暗黑2下水道原型（地下水宫）和星球大战月球取景地（格雷梅国家公园），3.热气球～</p>\n<p>嘛～本文将以图文并茂地方式来记录这次旅程中令人印象深刻的地方，希望轻松的文字和图片能够让读者感受到一个神秘而充满魅力的土国。</p>","more":"<h3 id=\"II-行程总览\"><a href=\"#II-行程总览\" class=\"headerlink\" title=\"II. 行程总览\"></a>II. 行程总览</h3><p>计划行程是12天，从成都出发，经阿联酋转机，到伊斯坦布尔，回程也是从伊斯坦布尔出发，经阿联酋转机，回到成都。</p>\n<p>机票买的阿提哈德航空的联程票，4168人民币。吃喝住宿什么的没有事先计划，我不太喜欢有细致的计划来规定我什么时候必须离开，怎么花费开销，所以我是走到一个地方，想玩多久就玩多久，属于比较奔放的”自由行”，哈哈…..</p>\n<p>本次预计花费在9k左右，但是实际情况是玩得比较嗨，超出了不少…</p>\n<p>旅行结束后，我把我走过的地方在地图上大概的轨迹是这样的。</p>\n<p><img src=\"https://qiniu.plusplus7.com/turkeypath.png-fullpercent\"></p>\n<h3 id=\"III-蓝色印象\"><a href=\"#III-蓝色印象\" class=\"headerlink\" title=\"III. 蓝色印象\"></a>III. 蓝色印象</h3><p>抵达土耳其，到达酒店时正好是下午。当打开窗户时，眼前的景象是土耳其给我的第一印象。</p>\n<p><img src=\"https://qiniu.plusplus7.com/IMG_0068_sy.jpg-fullpercent\"></p>\n<p>醉心的蓝色，洗去了长达21个小时飞行的疲惫</p>\n<p><img src=\"https://qiniu.plusplus7.com/IMG_1227_sy.jpg-fullpercent\"></p>\n<p>古老的城市，博斯普鲁斯海峡，加拉塔大桥</p>\n<p><img src=\"https://qiniu.plusplus7.com/IMG_0138_sy.jpg-fullpercent\"></p>\n<p>费特希耶的沙滩</p>\n<p><img src=\"https://qiniu.plusplus7.com/IMG_0689_sy.jpg-fullpercent\"></p>\n<p>蓝色清真寺</p>\n<p><img src=\"https://qiniu.plusplus7.com/IMG_1245_sy.jpg-fullpercent\"></p>\n<p>独立大街</p>\n<p><img src=\"https://qiniu.plusplus7.com/IMG_0702_sy.jpg-fullpercent\"></p>\n<p>暗黑2下水道原型 - 地下水宫</p>\n<p><img src=\"https://qiniu.plusplus7.com/IMG_0995_sy.jpg-fullpercent\"></p>\n<p>地球上最接近月球表面的地方 - 格雷梅的岩石地貌</p>\n<h3 id=\"IV-杂记\"><a href=\"#IV-杂记\" class=\"headerlink\" title=\"IV. 杂记\"></a>IV. 杂记</h3><p>几张好看的旅游图片发完了，接下来就随便说说旅游中发生的好玩的一些事情吧～</p>\n<ul>\n<li><p>两个书呆子的尴尬夜店游</p>\n<p>  在伊斯坦布尔的时候，遇到住同一个酒店的学生。他是在迪拜读大学暑假一个人出来旅行，想来土耳其体验热气球的。他是一个偏内向的大学生，学的专业，虽然我没有听太懂，但是应该是和物理有关的，我瞬间就想到TBBT…后来，我说我没去夜店玩过，想去看一看。结果他也表示没去过=_=||，然后我们俩就说结伴一起去会安全一些。<br>  后来我们就去独立大街附近一家看起来还比较靠谱，位于主道上的，人比较多的夜店…进去之后，发现也没什么特别的，就是舞曲电音循环播放，什么江南style，gentleman之类的，还有一些长得很丑的大妈在跳舞……因为我们俩都没什么经验，于是就点了两杯最便宜的酒，坐在一个门口的桌子边上，因为他说靠门口的桌子安全一些，发生什么事情可以马上开溜……旁边table的人倒是玩得非常high，各种跳跳唱唱的，我们俩就尴尬地喝酒自嗨。喝完之后发现夜店一点也不好玩，然后就去独立大街逛了逛，聊了一下各自的国家，然后就回酒店了。后来才知道他是塔吉克斯坦人，他之前跟我说“炸鸡个四蛋”，我一下子想不起来，于是只能表示不明觉厉…</p>\n</li>\n<li><p>番红花城小记</p>\n<p>  番红花城，感觉这个地方中国人和韩国人日本人非常喜欢去，这里的店家甚至有的都会说中文。这里的建筑风格是古代奥斯曼帝国时期的建筑，非常古老的感觉，在这里的住宿我特地选择了民居，一个穆斯林开的旅店，也算是感受了一下穆斯林的文化。和我住一个人家的有个韩国人，是和妹子一起出来玩的。和他认识了之后，他就感叹了一下“像我这样的中国人独自出游的非常少，中国人都喜欢抱团旅行”。<br>  番红花城的小镇和中国的乡镇很接近，很多东西都比较过时。我刚到那家穆斯林旅店的时候，就发现老板用的电脑是vista的系统，还有她的儿子正在玩GTA3…镇上的网吧，这里有英雄联盟的推广海报，有很多小孩子在里面玩得很high=.=</p>\n</li>\n<li><p>暂时想不到了，先写到这里吧～</p>\n</li>\n</ul>\n<p>在土耳其的十二天里，我每天都做了游记视频，可以在我的<a href=\"http://www.bilibili.com/video/av2588625/\" target=\"_blank\" rel=\"noopener\">bilibili视频空间</a>和<a href=\"http://v.youku.com/v_show/id_XMTI2Nzk0NTQxNg==.html\" target=\"_blank\" rel=\"noopener\">youku视频空间</a>观看～</p>"},{"layout":"post","title":"一个业余游戏解说的自我修养(一)","date":"2015-02-10T17:21:00.000Z","comments":1,"reward":true,"_content":"\n其实第一次听说要做解说呢，我是拒绝的，因为不能你让我做，我就马上去做......啊哈哈哈，借成龙大哥的广告梗来开个玩笑。\n\n好的，那么亲爱的观众朋友们，大家好啊，我是佳麒。\n\n<!-- more -->\n\n今年是2015年，在这一年刚开始的时候，微信朋友圈，qq空间很多地方都能看见同学朋友们发的“新年计划”，有什么“骑行从丽江到昆明”啊，“爬峨眉山”啊，“抢打折机票来一场说走就走”，总之是各种富有吸引力，充满活力的计划。\n后来我就想了一下，要不要也搞个什么新年计划，好像很流行的样子呀。再后来我就真的搞个新年计划，其中有一项呢，就是能够稳定地制作视频，尽可能一星期一部。\n\n其实我是从高中毕业暑假开始的做视频。\n\n那会儿，我受好基友大头的影响特别喜欢玩魔兽争霸3的建筑solo，在vs平台上玩了很久，水平比较菜，当时积分先是输成了负分，后来打成了正分，最多好像是玩到了vs5级，直到我接触了dota...到现在变成了玩dota2，不过不变的是水平还是那么菜哈哈哈哈。\n\n我记得我是先尝试着录war3的圣骑火枪流对抗疯狂电脑，当时还不太好意思开口说话。到后来，我出了一部猎人日记，内容是我玩怪物猎人的菜鸟讨伐流程，算是真正意义上的第一部解说视频了吧。\n\n那会儿对于录视频我觉得是一件很费精力的事，各种找录制软件，剪辑软件教程，当时我普通话很糟糕的，也不太会说话，结结巴巴的，搞一部满意的视频需要剪很久。后来我又录了一次war3，录了一个黄帽的视频，之后出视频的速度就放慢了，一方面是沉迷打acm确实没时间搞这个费精力的事，另一方面是当时在大学宿舍，大家关系很不错，比较能high，所以环境也是比较吵，不太适合录视频，我也不希望同学因为我要录视频而特地静音。再后来我就基本没怎么做解说了，大概一年一部吧，12年出了三国战记，13年出了个龙王战士，玩了胧村正，只出了一些boss战的攻略视频，没有解说。\n\n再后来就是2015年了，现在我在外地实习，有一个还算安静的地方，能满足做视频的这个需求，所以这算是“重操旧业”么（别问旧业是谁...\n\n现在刚刚1个月过去了，我按照计划基本每个星期都能出视频。但是我会经常不知道该做点什么视频好啊哈哈哈哈，有时还会因此而纠结好几天哈哈…视频做得不好，但是比起以前还是有不少进步的，比如以前说话老是撸不直舌头，结结巴巴的，最近已经可以做到全程解说不停，也不用后期再修修剪剪了，大大地提高了效率啊哈哈哈…\n\n之后我还是会好好做视频的，非常感谢朋友们的支持，好菊友龙哥，么么哒长城，腹黑学弟亨，霸道队友bia，还有不少默默为我点赞的同学朋友…特别是前天学弟小祝，id是dreameracm，他在qq上说想看一路少年忌谭的第二集，问我怎么看....当时我就特别的感动...\n\n好的，说得太多了，我要去录这个最终幻想3的第二集了啊哈哈哈，我们下期节目再见咯～拜拜，我是佳麒～\n","source":"_posts/一个业余游戏解说的自我修养(一).md","raw":"---\nlayout: post\ntitle: 一个业余游戏解说的自我修养(一)\ndate: 2015-2-11 01:21\ncomments: true\nreward: true\ntags:\n    - Games\n---\n\n其实第一次听说要做解说呢，我是拒绝的，因为不能你让我做，我就马上去做......啊哈哈哈，借成龙大哥的广告梗来开个玩笑。\n\n好的，那么亲爱的观众朋友们，大家好啊，我是佳麒。\n\n<!-- more -->\n\n今年是2015年，在这一年刚开始的时候，微信朋友圈，qq空间很多地方都能看见同学朋友们发的“新年计划”，有什么“骑行从丽江到昆明”啊，“爬峨眉山”啊，“抢打折机票来一场说走就走”，总之是各种富有吸引力，充满活力的计划。\n后来我就想了一下，要不要也搞个什么新年计划，好像很流行的样子呀。再后来我就真的搞个新年计划，其中有一项呢，就是能够稳定地制作视频，尽可能一星期一部。\n\n其实我是从高中毕业暑假开始的做视频。\n\n那会儿，我受好基友大头的影响特别喜欢玩魔兽争霸3的建筑solo，在vs平台上玩了很久，水平比较菜，当时积分先是输成了负分，后来打成了正分，最多好像是玩到了vs5级，直到我接触了dota...到现在变成了玩dota2，不过不变的是水平还是那么菜哈哈哈哈。\n\n我记得我是先尝试着录war3的圣骑火枪流对抗疯狂电脑，当时还不太好意思开口说话。到后来，我出了一部猎人日记，内容是我玩怪物猎人的菜鸟讨伐流程，算是真正意义上的第一部解说视频了吧。\n\n那会儿对于录视频我觉得是一件很费精力的事，各种找录制软件，剪辑软件教程，当时我普通话很糟糕的，也不太会说话，结结巴巴的，搞一部满意的视频需要剪很久。后来我又录了一次war3，录了一个黄帽的视频，之后出视频的速度就放慢了，一方面是沉迷打acm确实没时间搞这个费精力的事，另一方面是当时在大学宿舍，大家关系很不错，比较能high，所以环境也是比较吵，不太适合录视频，我也不希望同学因为我要录视频而特地静音。再后来我就基本没怎么做解说了，大概一年一部吧，12年出了三国战记，13年出了个龙王战士，玩了胧村正，只出了一些boss战的攻略视频，没有解说。\n\n再后来就是2015年了，现在我在外地实习，有一个还算安静的地方，能满足做视频的这个需求，所以这算是“重操旧业”么（别问旧业是谁...\n\n现在刚刚1个月过去了，我按照计划基本每个星期都能出视频。但是我会经常不知道该做点什么视频好啊哈哈哈哈，有时还会因此而纠结好几天哈哈…视频做得不好，但是比起以前还是有不少进步的，比如以前说话老是撸不直舌头，结结巴巴的，最近已经可以做到全程解说不停，也不用后期再修修剪剪了，大大地提高了效率啊哈哈哈…\n\n之后我还是会好好做视频的，非常感谢朋友们的支持，好菊友龙哥，么么哒长城，腹黑学弟亨，霸道队友bia，还有不少默默为我点赞的同学朋友…特别是前天学弟小祝，id是dreameracm，他在qq上说想看一路少年忌谭的第二集，问我怎么看....当时我就特别的感动...\n\n好的，说得太多了，我要去录这个最终幻想3的第二集了啊哈哈哈，我们下期节目再见咯～拜拜，我是佳麒～\n","slug":"一个业余游戏解说的自我修养(一)","published":1,"updated":"2018-05-23T14:45:27.144Z","photos":[],"link":"","_id":"cjhj92bms0014e0vfbae2i2pw","content":"<p>其实第一次听说要做解说呢，我是拒绝的，因为不能你让我做，我就马上去做……啊哈哈哈，借成龙大哥的广告梗来开个玩笑。</p>\n<p>好的，那么亲爱的观众朋友们，大家好啊，我是佳麒。</p>\n<a id=\"more\"></a>\n<p>今年是2015年，在这一年刚开始的时候，微信朋友圈，qq空间很多地方都能看见同学朋友们发的“新年计划”，有什么“骑行从丽江到昆明”啊，“爬峨眉山”啊，“抢打折机票来一场说走就走”，总之是各种富有吸引力，充满活力的计划。<br>后来我就想了一下，要不要也搞个什么新年计划，好像很流行的样子呀。再后来我就真的搞个新年计划，其中有一项呢，就是能够稳定地制作视频，尽可能一星期一部。</p>\n<p>其实我是从高中毕业暑假开始的做视频。</p>\n<p>那会儿，我受好基友大头的影响特别喜欢玩魔兽争霸3的建筑solo，在vs平台上玩了很久，水平比较菜，当时积分先是输成了负分，后来打成了正分，最多好像是玩到了vs5级，直到我接触了dota…到现在变成了玩dota2，不过不变的是水平还是那么菜哈哈哈哈。</p>\n<p>我记得我是先尝试着录war3的圣骑火枪流对抗疯狂电脑，当时还不太好意思开口说话。到后来，我出了一部猎人日记，内容是我玩怪物猎人的菜鸟讨伐流程，算是真正意义上的第一部解说视频了吧。</p>\n<p>那会儿对于录视频我觉得是一件很费精力的事，各种找录制软件，剪辑软件教程，当时我普通话很糟糕的，也不太会说话，结结巴巴的，搞一部满意的视频需要剪很久。后来我又录了一次war3，录了一个黄帽的视频，之后出视频的速度就放慢了，一方面是沉迷打acm确实没时间搞这个费精力的事，另一方面是当时在大学宿舍，大家关系很不错，比较能high，所以环境也是比较吵，不太适合录视频，我也不希望同学因为我要录视频而特地静音。再后来我就基本没怎么做解说了，大概一年一部吧，12年出了三国战记，13年出了个龙王战士，玩了胧村正，只出了一些boss战的攻略视频，没有解说。</p>\n<p>再后来就是2015年了，现在我在外地实习，有一个还算安静的地方，能满足做视频的这个需求，所以这算是“重操旧业”么（别问旧业是谁…</p>\n<p>现在刚刚1个月过去了，我按照计划基本每个星期都能出视频。但是我会经常不知道该做点什么视频好啊哈哈哈哈，有时还会因此而纠结好几天哈哈…视频做得不好，但是比起以前还是有不少进步的，比如以前说话老是撸不直舌头，结结巴巴的，最近已经可以做到全程解说不停，也不用后期再修修剪剪了，大大地提高了效率啊哈哈哈…</p>\n<p>之后我还是会好好做视频的，非常感谢朋友们的支持，好菊友龙哥，么么哒长城，腹黑学弟亨，霸道队友bia，还有不少默默为我点赞的同学朋友…特别是前天学弟小祝，id是dreameracm，他在qq上说想看一路少年忌谭的第二集，问我怎么看….当时我就特别的感动…</p>\n<p>好的，说得太多了，我要去录这个最终幻想3的第二集了啊哈哈哈，我们下期节目再见咯～拜拜，我是佳麒～</p>\n","site":{"data":{}},"excerpt":"<p>其实第一次听说要做解说呢，我是拒绝的，因为不能你让我做，我就马上去做……啊哈哈哈，借成龙大哥的广告梗来开个玩笑。</p>\n<p>好的，那么亲爱的观众朋友们，大家好啊，我是佳麒。</p>","more":"<p>今年是2015年，在这一年刚开始的时候，微信朋友圈，qq空间很多地方都能看见同学朋友们发的“新年计划”，有什么“骑行从丽江到昆明”啊，“爬峨眉山”啊，“抢打折机票来一场说走就走”，总之是各种富有吸引力，充满活力的计划。<br>后来我就想了一下，要不要也搞个什么新年计划，好像很流行的样子呀。再后来我就真的搞个新年计划，其中有一项呢，就是能够稳定地制作视频，尽可能一星期一部。</p>\n<p>其实我是从高中毕业暑假开始的做视频。</p>\n<p>那会儿，我受好基友大头的影响特别喜欢玩魔兽争霸3的建筑solo，在vs平台上玩了很久，水平比较菜，当时积分先是输成了负分，后来打成了正分，最多好像是玩到了vs5级，直到我接触了dota…到现在变成了玩dota2，不过不变的是水平还是那么菜哈哈哈哈。</p>\n<p>我记得我是先尝试着录war3的圣骑火枪流对抗疯狂电脑，当时还不太好意思开口说话。到后来，我出了一部猎人日记，内容是我玩怪物猎人的菜鸟讨伐流程，算是真正意义上的第一部解说视频了吧。</p>\n<p>那会儿对于录视频我觉得是一件很费精力的事，各种找录制软件，剪辑软件教程，当时我普通话很糟糕的，也不太会说话，结结巴巴的，搞一部满意的视频需要剪很久。后来我又录了一次war3，录了一个黄帽的视频，之后出视频的速度就放慢了，一方面是沉迷打acm确实没时间搞这个费精力的事，另一方面是当时在大学宿舍，大家关系很不错，比较能high，所以环境也是比较吵，不太适合录视频，我也不希望同学因为我要录视频而特地静音。再后来我就基本没怎么做解说了，大概一年一部吧，12年出了三国战记，13年出了个龙王战士，玩了胧村正，只出了一些boss战的攻略视频，没有解说。</p>\n<p>再后来就是2015年了，现在我在外地实习，有一个还算安静的地方，能满足做视频的这个需求，所以这算是“重操旧业”么（别问旧业是谁…</p>\n<p>现在刚刚1个月过去了，我按照计划基本每个星期都能出视频。但是我会经常不知道该做点什么视频好啊哈哈哈哈，有时还会因此而纠结好几天哈哈…视频做得不好，但是比起以前还是有不少进步的，比如以前说话老是撸不直舌头，结结巴巴的，最近已经可以做到全程解说不停，也不用后期再修修剪剪了，大大地提高了效率啊哈哈哈…</p>\n<p>之后我还是会好好做视频的，非常感谢朋友们的支持，好菊友龙哥，么么哒长城，腹黑学弟亨，霸道队友bia，还有不少默默为我点赞的同学朋友…特别是前天学弟小祝，id是dreameracm，他在qq上说想看一路少年忌谭的第二集，问我怎么看….当时我就特别的感动…</p>\n<p>好的，说得太多了，我要去录这个最终幻想3的第二集了啊哈哈哈，我们下期节目再见咯～拜拜，我是佳麒～</p>"},{"layout":"post","title":"一个业余游戏解说的自我修养(二)","date":"2016-01-01T17:21:00.000Z","comments":1,"reward":true,"_content":"\n作为一个非专业娱乐向游戏解说，今年算是我正式开始的第一年。本着和别人一起分享游戏的乐趣，推荐好玩的冷门游戏的初衷，我今年一共做了64部视频，刚好是个整数（误…)。除了中途回学校毕业，有两个月的时间没有出视频，其他时间基本上都能够达到每周一部视频的频率。所以算勉强完成目标吧\\*\\\\(^o^)/\\*散花。\n\n<!-- more -->\n\n年初刚刚确定要做视频的时候，一开始不知道做什么视频好，所以做了很多零散的视频。其中《史丹利的寓言》是一部非常值得推荐的游戏，通过“旁白引导”的方式来启发玩家对现实世界的种种思考，哲♂学向的游戏。后来玩《一路少年忌谭》的时候，我才慢慢找到边玩边解说的感觉，刚开始，解说和游戏几乎不能同时进行。再后来，我尝试了一部个人非常喜爱的游戏《最终幻想3》，而且一做就是18部，非常带感～后来的《Ori与迷失之森》，这一部游戏实况是个人感觉最满意的一部实况视频了。《Ori》本身游戏质量非常高，精致的画面，优美的背景，爽快的操作，以至于我到今天都还在玩这款游戏，最近刚刚达成了不死之身的成就（在没有死亡的情况下完成整个游戏）。后来的马里奥，随后就是回学校毕业的两个月时间了。毕业旅行，做了一个旅游视频的解说系列。最后就是年终大戏《数码暴龙世界3》。今年有数码宝贝的新电影上映，所以就做了这个游戏的视频，来给这个电影先预热一下。游戏类型是经典回合制RPG，语言是英文，于是我也顺便体验了一下实况英语字幕的游戏。\n<table>\n<tr><td>视频标题</td><td>时间</td><td>集数</td></tr>\n<tr><td>【东方红魔乡】灵梦A Normal混关</td><td>2015.01.03</td><td>1</td></tr>\n<tr><td>【加七解说】随便打打之黄帽</td><td>2015.01.11</td><td>1</td></tr>\n<tr><td>【加七解说】史丹利的寓言 实况</td><td>2015.01.14</td><td>1</td></tr>\n<tr><td>【神剑伏魔录】葛天雷-武林大会 加七解说</td><td>2015.01.23</td><td>1</td></tr>\n<tr><td>【加七实况】猫里奥通关 实况解说</td><td>2015.01.25</td><td>1</td></tr>\n<tr><td>【恐怖小游戏实况】一路少年忌谭 加七实况(完结)</td><td>2015.01.31</td><td>3</td></tr>\n<tr><td>【加七解说】最终幻想3重制版 流程实况 光之大陆篇</td><td>2015.02.07~2015.02.27</td><td>8</td></tr>\n<tr><td>【加七解说】最终幻想3重制版 流程实况 暗之大陆篇</td><td>2015.02.27~2015.03.12</td><td>9</td></tr>\n<tr><td>【实况解说】Ori与迷失之森 加七实况(完结)</td><td>2015.03.21~2015.04.07</td><td>9</td></tr>\n<tr><td>【加七实况】超级马里奥兄弟2日版</td><td>2015.04.12</td><td>1</td></tr>\n<tr><td>【毕业旅行】“色情”解说的土耳其游记</td><td>2015.07.18</td><td>11</td></tr>\n<tr><td>【加七实况】数码暴龙世界3 实况（完结）</td><td>2015.08.18~2015.11.20</td><td>18</td></tr>\n</table>\nSteam平台在今年圣诞节搞活动，刚上Steam不久的我，显然没能经受住诱惑，买了一堆游戏…明年已经囤了不少游戏了，所以应该暂时不会遇到没游戏玩的窘境。明年我也希望我能保持现在这样出视频的速度，顺便周末在斗鱼上稳定地直播游戏。\n\n所以，16年也要加油做视频哟(^o^)，好的，我是+7，我们下期再见～\n\n","source":"_posts/一个业余游戏解说的自我修养(二).md","raw":"---\nlayout: post\ntitle: 一个业余游戏解说的自我修养(二)\ndate: 2016-1-2 01:21\ncomments: true\nreward: true\ntags:\n    - Games\n---\n\n作为一个非专业娱乐向游戏解说，今年算是我正式开始的第一年。本着和别人一起分享游戏的乐趣，推荐好玩的冷门游戏的初衷，我今年一共做了64部视频，刚好是个整数（误…)。除了中途回学校毕业，有两个月的时间没有出视频，其他时间基本上都能够达到每周一部视频的频率。所以算勉强完成目标吧\\*\\\\(^o^)/\\*散花。\n\n<!-- more -->\n\n年初刚刚确定要做视频的时候，一开始不知道做什么视频好，所以做了很多零散的视频。其中《史丹利的寓言》是一部非常值得推荐的游戏，通过“旁白引导”的方式来启发玩家对现实世界的种种思考，哲♂学向的游戏。后来玩《一路少年忌谭》的时候，我才慢慢找到边玩边解说的感觉，刚开始，解说和游戏几乎不能同时进行。再后来，我尝试了一部个人非常喜爱的游戏《最终幻想3》，而且一做就是18部，非常带感～后来的《Ori与迷失之森》，这一部游戏实况是个人感觉最满意的一部实况视频了。《Ori》本身游戏质量非常高，精致的画面，优美的背景，爽快的操作，以至于我到今天都还在玩这款游戏，最近刚刚达成了不死之身的成就（在没有死亡的情况下完成整个游戏）。后来的马里奥，随后就是回学校毕业的两个月时间了。毕业旅行，做了一个旅游视频的解说系列。最后就是年终大戏《数码暴龙世界3》。今年有数码宝贝的新电影上映，所以就做了这个游戏的视频，来给这个电影先预热一下。游戏类型是经典回合制RPG，语言是英文，于是我也顺便体验了一下实况英语字幕的游戏。\n<table>\n<tr><td>视频标题</td><td>时间</td><td>集数</td></tr>\n<tr><td>【东方红魔乡】灵梦A Normal混关</td><td>2015.01.03</td><td>1</td></tr>\n<tr><td>【加七解说】随便打打之黄帽</td><td>2015.01.11</td><td>1</td></tr>\n<tr><td>【加七解说】史丹利的寓言 实况</td><td>2015.01.14</td><td>1</td></tr>\n<tr><td>【神剑伏魔录】葛天雷-武林大会 加七解说</td><td>2015.01.23</td><td>1</td></tr>\n<tr><td>【加七实况】猫里奥通关 实况解说</td><td>2015.01.25</td><td>1</td></tr>\n<tr><td>【恐怖小游戏实况】一路少年忌谭 加七实况(完结)</td><td>2015.01.31</td><td>3</td></tr>\n<tr><td>【加七解说】最终幻想3重制版 流程实况 光之大陆篇</td><td>2015.02.07~2015.02.27</td><td>8</td></tr>\n<tr><td>【加七解说】最终幻想3重制版 流程实况 暗之大陆篇</td><td>2015.02.27~2015.03.12</td><td>9</td></tr>\n<tr><td>【实况解说】Ori与迷失之森 加七实况(完结)</td><td>2015.03.21~2015.04.07</td><td>9</td></tr>\n<tr><td>【加七实况】超级马里奥兄弟2日版</td><td>2015.04.12</td><td>1</td></tr>\n<tr><td>【毕业旅行】“色情”解说的土耳其游记</td><td>2015.07.18</td><td>11</td></tr>\n<tr><td>【加七实况】数码暴龙世界3 实况（完结）</td><td>2015.08.18~2015.11.20</td><td>18</td></tr>\n</table>\nSteam平台在今年圣诞节搞活动，刚上Steam不久的我，显然没能经受住诱惑，买了一堆游戏…明年已经囤了不少游戏了，所以应该暂时不会遇到没游戏玩的窘境。明年我也希望我能保持现在这样出视频的速度，顺便周末在斗鱼上稳定地直播游戏。\n\n所以，16年也要加油做视频哟(^o^)，好的，我是+7，我们下期再见～\n\n","slug":"一个业余游戏解说的自我修养(二)","published":1,"updated":"2018-05-23T14:45:27.173Z","photos":[],"link":"","_id":"cjhj92bmx0018e0vfpyb1ean1","content":"<p>作为一个非专业娱乐向游戏解说，今年算是我正式开始的第一年。本着和别人一起分享游戏的乐趣，推荐好玩的冷门游戏的初衷，我今年一共做了64部视频，刚好是个整数（误…)。除了中途回学校毕业，有两个月的时间没有出视频，其他时间基本上都能够达到每周一部视频的频率。所以算勉强完成目标吧*\\(^o^)/*散花。</p>\n<a id=\"more\"></a>\n<p>年初刚刚确定要做视频的时候，一开始不知道做什么视频好，所以做了很多零散的视频。其中《史丹利的寓言》是一部非常值得推荐的游戏，通过“旁白引导”的方式来启发玩家对现实世界的种种思考，哲♂学向的游戏。后来玩《一路少年忌谭》的时候，我才慢慢找到边玩边解说的感觉，刚开始，解说和游戏几乎不能同时进行。再后来，我尝试了一部个人非常喜爱的游戏《最终幻想3》，而且一做就是18部，非常带感～后来的《Ori与迷失之森》，这一部游戏实况是个人感觉最满意的一部实况视频了。《Ori》本身游戏质量非常高，精致的画面，优美的背景，爽快的操作，以至于我到今天都还在玩这款游戏，最近刚刚达成了不死之身的成就（在没有死亡的情况下完成整个游戏）。后来的马里奥，随后就是回学校毕业的两个月时间了。毕业旅行，做了一个旅游视频的解说系列。最后就是年终大戏《数码暴龙世界3》。今年有数码宝贝的新电影上映，所以就做了这个游戏的视频，来给这个电影先预热一下。游戏类型是经典回合制RPG，语言是英文，于是我也顺便体验了一下实况英语字幕的游戏。</p>\n<p><table></table></p>\n<p><tr><td>视频标题</td><td>时间</td><td>集数</td></tr></p>\n<p><tr><td>【东方红魔乡】灵梦A Normal混关</td><td>2015.01.03</td><td>1</td></tr></p>\n<p><tr><td>【加七解说】随便打打之黄帽</td><td>2015.01.11</td><td>1</td></tr></p>\n<p><tr><td>【加七解说】史丹利的寓言 实况</td><td>2015.01.14</td><td>1</td></tr></p>\n<p><tr><td>【神剑伏魔录】葛天雷-武林大会 加七解说</td><td>2015.01.23</td><td>1</td></tr></p>\n<p><tr><td>【加七实况】猫里奥通关 实况解说</td><td>2015.01.25</td><td>1</td></tr></p>\n<p><tr><td>【恐怖小游戏实况】一路少年忌谭 加七实况(完结)</td><td>2015.01.31</td><td>3</td></tr></p>\n<p><tr><td>【加七解说】最终幻想3重制版 流程实况 光之大陆篇</td><td>2015.02.07~2015.02.27</td><td>8</td></tr></p>\n<p><tr><td>【加七解说】最终幻想3重制版 流程实况 暗之大陆篇</td><td>2015.02.27~2015.03.12</td><td>9</td></tr></p>\n<p><tr><td>【实况解说】Ori与迷失之森 加七实况(完结)</td><td>2015.03.21~2015.04.07</td><td>9</td></tr></p>\n<p><tr><td>【加七实况】超级马里奥兄弟2日版</td><td>2015.04.12</td><td>1</td></tr></p>\n<p><tr><td>【毕业旅行】“色情”解说的土耳其游记</td><td>2015.07.18</td><td>11</td></tr></p>\n<p><tr><td>【加七实况】数码暴龙世界3 实况（完结）</td><td>2015.08.18~2015.11.20</td><td>18</td></tr><br><br>Steam平台在今年圣诞节搞活动，刚上Steam不久的我，显然没能经受住诱惑，买了一堆游戏…明年已经囤了不少游戏了，所以应该暂时不会遇到没游戏玩的窘境。明年我也希望我能保持现在这样出视频的速度，顺便周末在斗鱼上稳定地直播游戏。</p>\n<p>所以，16年也要加油做视频哟(^o^)，好的，我是+7，我们下期再见～</p>\n","site":{"data":{}},"excerpt":"<p>作为一个非专业娱乐向游戏解说，今年算是我正式开始的第一年。本着和别人一起分享游戏的乐趣，推荐好玩的冷门游戏的初衷，我今年一共做了64部视频，刚好是个整数（误…)。除了中途回学校毕业，有两个月的时间没有出视频，其他时间基本上都能够达到每周一部视频的频率。所以算勉强完成目标吧*\\(^o^)/*散花。</p>","more":"<p>年初刚刚确定要做视频的时候，一开始不知道做什么视频好，所以做了很多零散的视频。其中《史丹利的寓言》是一部非常值得推荐的游戏，通过“旁白引导”的方式来启发玩家对现实世界的种种思考，哲♂学向的游戏。后来玩《一路少年忌谭》的时候，我才慢慢找到边玩边解说的感觉，刚开始，解说和游戏几乎不能同时进行。再后来，我尝试了一部个人非常喜爱的游戏《最终幻想3》，而且一做就是18部，非常带感～后来的《Ori与迷失之森》，这一部游戏实况是个人感觉最满意的一部实况视频了。《Ori》本身游戏质量非常高，精致的画面，优美的背景，爽快的操作，以至于我到今天都还在玩这款游戏，最近刚刚达成了不死之身的成就（在没有死亡的情况下完成整个游戏）。后来的马里奥，随后就是回学校毕业的两个月时间了。毕业旅行，做了一个旅游视频的解说系列。最后就是年终大戏《数码暴龙世界3》。今年有数码宝贝的新电影上映，所以就做了这个游戏的视频，来给这个电影先预热一下。游戏类型是经典回合制RPG，语言是英文，于是我也顺便体验了一下实况英语字幕的游戏。</p>\n<p><table></table></p>\n<p><tr><td>视频标题</td><td>时间</td><td>集数</td></tr></p>\n<p><tr><td>【东方红魔乡】灵梦A Normal混关</td><td>2015.01.03</td><td>1</td></tr></p>\n<p><tr><td>【加七解说】随便打打之黄帽</td><td>2015.01.11</td><td>1</td></tr></p>\n<p><tr><td>【加七解说】史丹利的寓言 实况</td><td>2015.01.14</td><td>1</td></tr></p>\n<p><tr><td>【神剑伏魔录】葛天雷-武林大会 加七解说</td><td>2015.01.23</td><td>1</td></tr></p>\n<p><tr><td>【加七实况】猫里奥通关 实况解说</td><td>2015.01.25</td><td>1</td></tr></p>\n<p><tr><td>【恐怖小游戏实况】一路少年忌谭 加七实况(完结)</td><td>2015.01.31</td><td>3</td></tr></p>\n<p><tr><td>【加七解说】最终幻想3重制版 流程实况 光之大陆篇</td><td>2015.02.07~2015.02.27</td><td>8</td></tr></p>\n<p><tr><td>【加七解说】最终幻想3重制版 流程实况 暗之大陆篇</td><td>2015.02.27~2015.03.12</td><td>9</td></tr></p>\n<p><tr><td>【实况解说】Ori与迷失之森 加七实况(完结)</td><td>2015.03.21~2015.04.07</td><td>9</td></tr></p>\n<p><tr><td>【加七实况】超级马里奥兄弟2日版</td><td>2015.04.12</td><td>1</td></tr></p>\n<p><tr><td>【毕业旅行】“色情”解说的土耳其游记</td><td>2015.07.18</td><td>11</td></tr></p>\n<p><tr><td>【加七实况】数码暴龙世界3 实况（完结）</td><td>2015.08.18~2015.11.20</td><td>18</td></tr><br><br>Steam平台在今年圣诞节搞活动，刚上Steam不久的我，显然没能经受住诱惑，买了一堆游戏…明年已经囤了不少游戏了，所以应该暂时不会遇到没游戏玩的窘境。明年我也希望我能保持现在这样出视频的速度，顺便周末在斗鱼上稳定地直播游戏。</p>\n<p>所以，16年也要加油做视频哟(^o^)，好的，我是+7，我们下期再见～</p>"},{"layout":"post","title":"八数码问题的n种境界","date":"2014-12-16T17:21:00.000Z","comments":1,"reward":true,"_content":"\n今年的极客大挑战有道题是这样的，给你一个3*3的拼图，不过顺序是乱的，可以移动拼图，问把原图拼出来，最少要多少步。\n\n很显然这题可以转化成一道八数码问题，因为极客大挑战对时间空间没有特别要求，所以用普通搜索就能很快解决。正好现在空闲的时间比较多，来总结一下八数码问题的学习笔记。\n\n<!-- more -->\n\n以前看过一篇博文叫《八数码的八境界》，详细地介绍了八数码的各种解法，给了我很大的启发。然而这里我想总结一下我熟悉的几种解法。\n\n直接讨论经典问题感觉挺空洞的，还是直接拿ACM题来说吧。\n\n[POJ 1077][1] 应该是最基本的八数码问题，数据不是很强，题意就简述一下了，就是给了一个3*3的宫格，问移动最少多少步能移动成最初形态,如\n\n     1  2  3      =>         1 2 3\n     x  4  6      =>         4 5 6\n     7  5  8      =>         7 8 x\n\n###NOTE 1.单向BFS+Hash\n\n------- \n\nBFS很好想到，移动的方向只有4种，上下左右。直接上BFS的话肯定不行，会TLE。加上hash能让程序快不少。\n\n如果记录每一位的信息，那么Hash数组的大小将达到$$10^9$$，用大质数减少碰撞，加上手写静态链表前向星什么的应该是能够接受的。\n\n这里介绍一种巧妙的Hash方法减少空间开销。\n\n观察一下可以发现，把x替换为9，那么3*3的宫格内的数依次写下来其实就是1～9的全排列，种类数有9!=362880种。\n\n康托展开是构建哈希表时压缩空间常用的一种方法。康托展开实质上是计算当前排列在所有由小到大全排列中的顺序，因此是可逆的。计算方法如下：\n\n数列a[n]是1～n的全排列，b[i]是表示第i位之后大于a[i]的数的个数。\nX=b[n]*(n-1)!+b[n-1]*(n-2)!+...+b[i]*(i-1)!+...+b[1]*0!\n\n如：排列3 5 7 4 1 2 9 6 8 展开为 98884。因为X=2*8!+3*7!+4*6!+2*5!+0*4!+0*3!+2*2!+0*1!+0*0!=98884.\n\n排列的第一位是3，比3小的数有两个，以这样的数开始的排列有8!个，因此第一项为2*8!\n\n排列的第二位是5，比5小的数有1、2、3、4，由于3已经出现，因此共有3个比5小的数，这样的排列有7!个，因此第二项为3*7!\n以此类推，直至0*0!\n\n所以对于BFS时，搜到的每一种状态，用康托展开进行Hash，就可以放到一个大小为9!的哈希表中进行判重。\n\n网上很多人都是这样做的，为了宝贵的空间，所以这里就不发代码了。\n###NOTE 2.双向BFS+Hash\n\n------- \n\n因为这道题的终态是固定的\n\n    1 2 3 \n    4 5 6\n    7 8 x\n\n所以我们可以从这个状态和输入的初始状态开始双向BFS。\n\n用两个队列，一个队列保存从终态开始BFS，所保存的状态节点；另一个保存从始态开始BFS，所保存的状态节点。哪个队列的节点数少，就展开哪个节点。再加上Hash，所以应该会很快搜到一个可行解。\n\n这里推荐一道双向BFS的题目和解题报告\n[LA 3618 Cubic Eight-Puzzle-立体八数码][2]  以及 [解题报告][3]\n\n###NOTE 3.A*搜索+Hash\n\n------- \n\n此题状态很明确，而且分支不算多，估价函数也很好找。\n\n曼哈顿距离，对于坐标(x1,y1)和坐标(x2,y2)，曼哈顿距离就是$|x1-x2|+|y1-y2|$。\n\n拿每个方格到它的目标方格的曼哈顿距离作为估价函数h，加上当前的搜索深度作为启发函数f，进行A*搜索。搜索的时候需要加上Hash判重，遇到状态相同，保留启发函数值较小的那个即可，加上堆/优先队列，每次展开f值最小的节点，这样便能用A*搜索AC此题。\n\n###NOTE 4. IDA*搜索\n\n------- \n\nIDA*搜索，其实是迭代加深版的A*搜索。\n\n迭代加深(Iterative Deepening)，也是一种搜索的策略。适用于解在搜索树中的深度不是很深，然而搜索树的分支特别多的情况下使用。具体的做法是：限定一个最大深度dmax，再进行DFS，一旦搜索的深度达到了dmax就退出。如果没有搜到，就把dmax+1，再进行DFS，直到搜索到解为止。由此避免了DFS搜索深度过深，而找不到正确解。\n\n推荐一道迭代加深搜索的题目[POJ 2870 Light Up][4] 以及 [解题报告][5]\n\n迭代加深版的A*搜索，其实就是在迭代加深时，计算当前状态h值，加上当前深度，算出f值，一旦f值大于dmax就推出。\n\nIDA*搜索的代码编写较A*来说要简单得多。A*代码多，主要在于用来判重的Hash表和对f值排序的堆。然而IDA*是DFS，所以根本不用判重，也不需要对f值进行排序，也减少了空间消费。\n\n代码在这里：[LA 5506 Eight][6]\n### NOTE 5.求逆序数判断是否有解\n\n------- \n\n现在来考虑一道新的问题，[HDU 4021][7]\n\n此题实际上并没有要求我们找到一组正确的解，而是询问是否有解。\n\n对于八数码问题来说，如果方格和空格上下左右移动，对于数列逆序数的奇偶性是不会变的。\n\n上下移动相当于此数在数列中向前或向后移动了2个位置，要么两个数都比它大，逆序数+2，要么都比它小，逆序数-2，要么一大一小，逆序数的奇偶性不变。\n\n左右移动，此数在数列中的位置不变，奇偶性不变。\n\n总的来说逆序数的奇偶性是不变的。\n\n有了这个判定，可以让我们在搜索一开始便对数列的有解性进行一个判断。\n\n对于n维的n*n-1问题来说，有这样的结论：\n\n    N为奇数时，初始状态与指定状态逆序数奇偶性相同即有解；\n    N为偶数时，先计算出从初始状态到指定状态，空位要移动的行数m，如果初始状态的逆序数加上m与指定状态的逆序数奇偶性相同，则有解。\n\n\n[2]:http://poj.org/problem?id=3131\n[3]:http://blog.csdn.net/sssogs/article/details/8836617     \n[1]:http://poj.org/problem?id=1077\n[4]:http://poj.org/problem?id=2870\n[5]:http://blog.csdn.net/sssogs/article/details/8836291\n[6]:http://blog.csdn.net/sssogs/article/details/8813386\n[7]:http://acm.hdu.edu.cn/showproblem.php?pid=4021\n","source":"_posts/八数码问题的n种境界.md","raw":"---\nlayout: post\ntitle: 八数码问题的n种境界\ndate: 2014-12-17 01:21\ncomments: true\nreward: true\ntags:\n    - Algorithm\n---\n\n今年的极客大挑战有道题是这样的，给你一个3*3的拼图，不过顺序是乱的，可以移动拼图，问把原图拼出来，最少要多少步。\n\n很显然这题可以转化成一道八数码问题，因为极客大挑战对时间空间没有特别要求，所以用普通搜索就能很快解决。正好现在空闲的时间比较多，来总结一下八数码问题的学习笔记。\n\n<!-- more -->\n\n以前看过一篇博文叫《八数码的八境界》，详细地介绍了八数码的各种解法，给了我很大的启发。然而这里我想总结一下我熟悉的几种解法。\n\n直接讨论经典问题感觉挺空洞的，还是直接拿ACM题来说吧。\n\n[POJ 1077][1] 应该是最基本的八数码问题，数据不是很强，题意就简述一下了，就是给了一个3*3的宫格，问移动最少多少步能移动成最初形态,如\n\n     1  2  3      =>         1 2 3\n     x  4  6      =>         4 5 6\n     7  5  8      =>         7 8 x\n\n###NOTE 1.单向BFS+Hash\n\n------- \n\nBFS很好想到，移动的方向只有4种，上下左右。直接上BFS的话肯定不行，会TLE。加上hash能让程序快不少。\n\n如果记录每一位的信息，那么Hash数组的大小将达到$$10^9$$，用大质数减少碰撞，加上手写静态链表前向星什么的应该是能够接受的。\n\n这里介绍一种巧妙的Hash方法减少空间开销。\n\n观察一下可以发现，把x替换为9，那么3*3的宫格内的数依次写下来其实就是1～9的全排列，种类数有9!=362880种。\n\n康托展开是构建哈希表时压缩空间常用的一种方法。康托展开实质上是计算当前排列在所有由小到大全排列中的顺序，因此是可逆的。计算方法如下：\n\n数列a[n]是1～n的全排列，b[i]是表示第i位之后大于a[i]的数的个数。\nX=b[n]*(n-1)!+b[n-1]*(n-2)!+...+b[i]*(i-1)!+...+b[1]*0!\n\n如：排列3 5 7 4 1 2 9 6 8 展开为 98884。因为X=2*8!+3*7!+4*6!+2*5!+0*4!+0*3!+2*2!+0*1!+0*0!=98884.\n\n排列的第一位是3，比3小的数有两个，以这样的数开始的排列有8!个，因此第一项为2*8!\n\n排列的第二位是5，比5小的数有1、2、3、4，由于3已经出现，因此共有3个比5小的数，这样的排列有7!个，因此第二项为3*7!\n以此类推，直至0*0!\n\n所以对于BFS时，搜到的每一种状态，用康托展开进行Hash，就可以放到一个大小为9!的哈希表中进行判重。\n\n网上很多人都是这样做的，为了宝贵的空间，所以这里就不发代码了。\n###NOTE 2.双向BFS+Hash\n\n------- \n\n因为这道题的终态是固定的\n\n    1 2 3 \n    4 5 6\n    7 8 x\n\n所以我们可以从这个状态和输入的初始状态开始双向BFS。\n\n用两个队列，一个队列保存从终态开始BFS，所保存的状态节点；另一个保存从始态开始BFS，所保存的状态节点。哪个队列的节点数少，就展开哪个节点。再加上Hash，所以应该会很快搜到一个可行解。\n\n这里推荐一道双向BFS的题目和解题报告\n[LA 3618 Cubic Eight-Puzzle-立体八数码][2]  以及 [解题报告][3]\n\n###NOTE 3.A*搜索+Hash\n\n------- \n\n此题状态很明确，而且分支不算多，估价函数也很好找。\n\n曼哈顿距离，对于坐标(x1,y1)和坐标(x2,y2)，曼哈顿距离就是$|x1-x2|+|y1-y2|$。\n\n拿每个方格到它的目标方格的曼哈顿距离作为估价函数h，加上当前的搜索深度作为启发函数f，进行A*搜索。搜索的时候需要加上Hash判重，遇到状态相同，保留启发函数值较小的那个即可，加上堆/优先队列，每次展开f值最小的节点，这样便能用A*搜索AC此题。\n\n###NOTE 4. IDA*搜索\n\n------- \n\nIDA*搜索，其实是迭代加深版的A*搜索。\n\n迭代加深(Iterative Deepening)，也是一种搜索的策略。适用于解在搜索树中的深度不是很深，然而搜索树的分支特别多的情况下使用。具体的做法是：限定一个最大深度dmax，再进行DFS，一旦搜索的深度达到了dmax就退出。如果没有搜到，就把dmax+1，再进行DFS，直到搜索到解为止。由此避免了DFS搜索深度过深，而找不到正确解。\n\n推荐一道迭代加深搜索的题目[POJ 2870 Light Up][4] 以及 [解题报告][5]\n\n迭代加深版的A*搜索，其实就是在迭代加深时，计算当前状态h值，加上当前深度，算出f值，一旦f值大于dmax就推出。\n\nIDA*搜索的代码编写较A*来说要简单得多。A*代码多，主要在于用来判重的Hash表和对f值排序的堆。然而IDA*是DFS，所以根本不用判重，也不需要对f值进行排序，也减少了空间消费。\n\n代码在这里：[LA 5506 Eight][6]\n### NOTE 5.求逆序数判断是否有解\n\n------- \n\n现在来考虑一道新的问题，[HDU 4021][7]\n\n此题实际上并没有要求我们找到一组正确的解，而是询问是否有解。\n\n对于八数码问题来说，如果方格和空格上下左右移动，对于数列逆序数的奇偶性是不会变的。\n\n上下移动相当于此数在数列中向前或向后移动了2个位置，要么两个数都比它大，逆序数+2，要么都比它小，逆序数-2，要么一大一小，逆序数的奇偶性不变。\n\n左右移动，此数在数列中的位置不变，奇偶性不变。\n\n总的来说逆序数的奇偶性是不变的。\n\n有了这个判定，可以让我们在搜索一开始便对数列的有解性进行一个判断。\n\n对于n维的n*n-1问题来说，有这样的结论：\n\n    N为奇数时，初始状态与指定状态逆序数奇偶性相同即有解；\n    N为偶数时，先计算出从初始状态到指定状态，空位要移动的行数m，如果初始状态的逆序数加上m与指定状态的逆序数奇偶性相同，则有解。\n\n\n[2]:http://poj.org/problem?id=3131\n[3]:http://blog.csdn.net/sssogs/article/details/8836617     \n[1]:http://poj.org/problem?id=1077\n[4]:http://poj.org/problem?id=2870\n[5]:http://blog.csdn.net/sssogs/article/details/8836291\n[6]:http://blog.csdn.net/sssogs/article/details/8813386\n[7]:http://acm.hdu.edu.cn/showproblem.php?pid=4021\n","slug":"八数码问题的n种境界","published":1,"updated":"2018-05-23T14:45:27.202Z","photos":[],"link":"","_id":"cjhj92bna001be0vfl4vl5npx","content":"<p>今年的极客大挑战有道题是这样的，给你一个3*3的拼图，不过顺序是乱的，可以移动拼图，问把原图拼出来，最少要多少步。</p>\n<p>很显然这题可以转化成一道八数码问题，因为极客大挑战对时间空间没有特别要求，所以用普通搜索就能很快解决。正好现在空闲的时间比较多，来总结一下八数码问题的学习笔记。</p>\n<a id=\"more\"></a>\n<p>以前看过一篇博文叫《八数码的八境界》，详细地介绍了八数码的各种解法，给了我很大的启发。然而这里我想总结一下我熟悉的几种解法。</p>\n<p>直接讨论经典问题感觉挺空洞的，还是直接拿ACM题来说吧。</p>\n<p><a href=\"http://poj.org/problem?id=1077\" target=\"_blank\" rel=\"noopener\">POJ 1077</a> 应该是最基本的八数码问题，数据不是很强，题意就简述一下了，就是给了一个3*3的宫格，问移动最少多少步能移动成最初形态,如</p>\n<pre><code>1  2  3      =&gt;         1 2 3\nx  4  6      =&gt;         4 5 6\n7  5  8      =&gt;         7 8 x\n</code></pre><p>###NOTE 1.单向BFS+Hash</p>\n<hr>\n<p>BFS很好想到，移动的方向只有4种，上下左右。直接上BFS的话肯定不行，会TLE。加上hash能让程序快不少。</p>\n<p>如果记录每一位的信息，那么Hash数组的大小将达到$$10^9$$，用大质数减少碰撞，加上手写静态链表前向星什么的应该是能够接受的。</p>\n<p>这里介绍一种巧妙的Hash方法减少空间开销。</p>\n<p>观察一下可以发现，把x替换为9，那么3*3的宫格内的数依次写下来其实就是1～9的全排列，种类数有9!=362880种。</p>\n<p>康托展开是构建哈希表时压缩空间常用的一种方法。康托展开实质上是计算当前排列在所有由小到大全排列中的顺序，因此是可逆的。计算方法如下：</p>\n<p>数列a[n]是1～n的全排列，b[i]是表示第i位之后大于a[i]的数的个数。<br>X=b[n]<em>(n-1)!+b[n-1]</em>(n-2)!+…+b[i]<em>(i-1)!+…+b<a href=\"http://poj.org/problem?id=1077\" target=\"_blank\" rel=\"noopener\">1</a></em>0!</p>\n<p>如：排列3 5 7 4 1 2 9 6 8 展开为 98884。因为X=2<em>8!+3</em>7!+4<em>6!+2</em>5!+0<em>4!+0</em>3!+2<em>2!+0</em>1!+0*0!=98884.</p>\n<p>排列的第一位是3，比3小的数有两个，以这样的数开始的排列有8!个，因此第一项为2*8!</p>\n<p>排列的第二位是5，比5小的数有1、2、3、4，由于3已经出现，因此共有3个比5小的数，这样的排列有7!个，因此第二项为3<em>7!<br>以此类推，直至0</em>0!</p>\n<p>所以对于BFS时，搜到的每一种状态，用康托展开进行Hash，就可以放到一个大小为9!的哈希表中进行判重。</p>\n<p>网上很多人都是这样做的，为了宝贵的空间，所以这里就不发代码了。</p>\n<p>###NOTE 2.双向BFS+Hash</p>\n<hr>\n<p>因为这道题的终态是固定的</p>\n<pre><code>1 2 3 \n4 5 6\n7 8 x\n</code></pre><p>所以我们可以从这个状态和输入的初始状态开始双向BFS。</p>\n<p>用两个队列，一个队列保存从终态开始BFS，所保存的状态节点；另一个保存从始态开始BFS，所保存的状态节点。哪个队列的节点数少，就展开哪个节点。再加上Hash，所以应该会很快搜到一个可行解。</p>\n<p>这里推荐一道双向BFS的题目和解题报告<br><a href=\"http://poj.org/problem?id=3131\" target=\"_blank\" rel=\"noopener\">LA 3618 Cubic Eight-Puzzle-立体八数码</a>  以及 <a href=\"http://blog.csdn.net/sssogs/article/details/8836617\" target=\"_blank\" rel=\"noopener\">解题报告</a></p>\n<p>###NOTE 3.A*搜索+Hash</p>\n<hr>\n<p>此题状态很明确，而且分支不算多，估价函数也很好找。</p>\n<p>曼哈顿距离，对于坐标(x1,y1)和坐标(x2,y2)，曼哈顿距离就是$|x1-x2|+|y1-y2|$。</p>\n<p>拿每个方格到它的目标方格的曼哈顿距离作为估价函数h，加上当前的搜索深度作为启发函数f，进行A<em>搜索。搜索的时候需要加上Hash判重，遇到状态相同，保留启发函数值较小的那个即可，加上堆/优先队列，每次展开f值最小的节点，这样便能用A</em>搜索AC此题。</p>\n<p>###NOTE 4. IDA*搜索</p>\n<hr>\n<p>IDA<em>搜索，其实是迭代加深版的A</em>搜索。</p>\n<p>迭代加深(Iterative Deepening)，也是一种搜索的策略。适用于解在搜索树中的深度不是很深，然而搜索树的分支特别多的情况下使用。具体的做法是：限定一个最大深度dmax，再进行DFS，一旦搜索的深度达到了dmax就退出。如果没有搜到，就把dmax+1，再进行DFS，直到搜索到解为止。由此避免了DFS搜索深度过深，而找不到正确解。</p>\n<p>推荐一道迭代加深搜索的题目<a href=\"http://poj.org/problem?id=2870\" target=\"_blank\" rel=\"noopener\">POJ 2870 Light Up</a> 以及 <a href=\"http://blog.csdn.net/sssogs/article/details/8836291\" target=\"_blank\" rel=\"noopener\">解题报告</a></p>\n<p>迭代加深版的A*搜索，其实就是在迭代加深时，计算当前状态h值，加上当前深度，算出f值，一旦f值大于dmax就推出。</p>\n<p>IDA<em>搜索的代码编写较A</em>来说要简单得多。A<em>代码多，主要在于用来判重的Hash表和对f值排序的堆。然而IDA</em>是DFS，所以根本不用判重，也不需要对f值进行排序，也减少了空间消费。</p>\n<p>代码在这里：<a href=\"http://blog.csdn.net/sssogs/article/details/8813386\" target=\"_blank\" rel=\"noopener\">LA 5506 Eight</a></p>\n<h3 id=\"NOTE-5-求逆序数判断是否有解\"><a href=\"#NOTE-5-求逆序数判断是否有解\" class=\"headerlink\" title=\"NOTE 5.求逆序数判断是否有解\"></a>NOTE 5.求逆序数判断是否有解</h3><hr>\n<p>现在来考虑一道新的问题，<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4021\" target=\"_blank\" rel=\"noopener\">HDU 4021</a></p>\n<p>此题实际上并没有要求我们找到一组正确的解，而是询问是否有解。</p>\n<p>对于八数码问题来说，如果方格和空格上下左右移动，对于数列逆序数的奇偶性是不会变的。</p>\n<p>上下移动相当于此数在数列中向前或向后移动了2个位置，要么两个数都比它大，逆序数+2，要么都比它小，逆序数-2，要么一大一小，逆序数的奇偶性不变。</p>\n<p>左右移动，此数在数列中的位置不变，奇偶性不变。</p>\n<p>总的来说逆序数的奇偶性是不变的。</p>\n<p>有了这个判定，可以让我们在搜索一开始便对数列的有解性进行一个判断。</p>\n<p>对于n维的n*n-1问题来说，有这样的结论：</p>\n<pre><code>N为奇数时，初始状态与指定状态逆序数奇偶性相同即有解；\nN为偶数时，先计算出从初始状态到指定状态，空位要移动的行数m，如果初始状态的逆序数加上m与指定状态的逆序数奇偶性相同，则有解。\n</code></pre>","site":{"data":{}},"excerpt":"<p>今年的极客大挑战有道题是这样的，给你一个3*3的拼图，不过顺序是乱的，可以移动拼图，问把原图拼出来，最少要多少步。</p>\n<p>很显然这题可以转化成一道八数码问题，因为极客大挑战对时间空间没有特别要求，所以用普通搜索就能很快解决。正好现在空闲的时间比较多，来总结一下八数码问题的学习笔记。</p>","more":"<p>以前看过一篇博文叫《八数码的八境界》，详细地介绍了八数码的各种解法，给了我很大的启发。然而这里我想总结一下我熟悉的几种解法。</p>\n<p>直接讨论经典问题感觉挺空洞的，还是直接拿ACM题来说吧。</p>\n<p><a href=\"http://poj.org/problem?id=1077\" target=\"_blank\" rel=\"noopener\">POJ 1077</a> 应该是最基本的八数码问题，数据不是很强，题意就简述一下了，就是给了一个3*3的宫格，问移动最少多少步能移动成最初形态,如</p>\n<pre><code>1  2  3      =&gt;         1 2 3\nx  4  6      =&gt;         4 5 6\n7  5  8      =&gt;         7 8 x\n</code></pre><p>###NOTE 1.单向BFS+Hash</p>\n<hr>\n<p>BFS很好想到，移动的方向只有4种，上下左右。直接上BFS的话肯定不行，会TLE。加上hash能让程序快不少。</p>\n<p>如果记录每一位的信息，那么Hash数组的大小将达到$$10^9$$，用大质数减少碰撞，加上手写静态链表前向星什么的应该是能够接受的。</p>\n<p>这里介绍一种巧妙的Hash方法减少空间开销。</p>\n<p>观察一下可以发现，把x替换为9，那么3*3的宫格内的数依次写下来其实就是1～9的全排列，种类数有9!=362880种。</p>\n<p>康托展开是构建哈希表时压缩空间常用的一种方法。康托展开实质上是计算当前排列在所有由小到大全排列中的顺序，因此是可逆的。计算方法如下：</p>\n<p>数列a[n]是1～n的全排列，b[i]是表示第i位之后大于a[i]的数的个数。<br>X=b[n]<em>(n-1)!+b[n-1]</em>(n-2)!+…+b[i]<em>(i-1)!+…+b<a href=\"http://poj.org/problem?id=1077\" target=\"_blank\" rel=\"noopener\">1</a></em>0!</p>\n<p>如：排列3 5 7 4 1 2 9 6 8 展开为 98884。因为X=2<em>8!+3</em>7!+4<em>6!+2</em>5!+0<em>4!+0</em>3!+2<em>2!+0</em>1!+0*0!=98884.</p>\n<p>排列的第一位是3，比3小的数有两个，以这样的数开始的排列有8!个，因此第一项为2*8!</p>\n<p>排列的第二位是5，比5小的数有1、2、3、4，由于3已经出现，因此共有3个比5小的数，这样的排列有7!个，因此第二项为3<em>7!<br>以此类推，直至0</em>0!</p>\n<p>所以对于BFS时，搜到的每一种状态，用康托展开进行Hash，就可以放到一个大小为9!的哈希表中进行判重。</p>\n<p>网上很多人都是这样做的，为了宝贵的空间，所以这里就不发代码了。</p>\n<p>###NOTE 2.双向BFS+Hash</p>\n<hr>\n<p>因为这道题的终态是固定的</p>\n<pre><code>1 2 3 \n4 5 6\n7 8 x\n</code></pre><p>所以我们可以从这个状态和输入的初始状态开始双向BFS。</p>\n<p>用两个队列，一个队列保存从终态开始BFS，所保存的状态节点；另一个保存从始态开始BFS，所保存的状态节点。哪个队列的节点数少，就展开哪个节点。再加上Hash，所以应该会很快搜到一个可行解。</p>\n<p>这里推荐一道双向BFS的题目和解题报告<br><a href=\"http://poj.org/problem?id=3131\" target=\"_blank\" rel=\"noopener\">LA 3618 Cubic Eight-Puzzle-立体八数码</a>  以及 <a href=\"http://blog.csdn.net/sssogs/article/details/8836617\" target=\"_blank\" rel=\"noopener\">解题报告</a></p>\n<p>###NOTE 3.A*搜索+Hash</p>\n<hr>\n<p>此题状态很明确，而且分支不算多，估价函数也很好找。</p>\n<p>曼哈顿距离，对于坐标(x1,y1)和坐标(x2,y2)，曼哈顿距离就是$|x1-x2|+|y1-y2|$。</p>\n<p>拿每个方格到它的目标方格的曼哈顿距离作为估价函数h，加上当前的搜索深度作为启发函数f，进行A<em>搜索。搜索的时候需要加上Hash判重，遇到状态相同，保留启发函数值较小的那个即可，加上堆/优先队列，每次展开f值最小的节点，这样便能用A</em>搜索AC此题。</p>\n<p>###NOTE 4. IDA*搜索</p>\n<hr>\n<p>IDA<em>搜索，其实是迭代加深版的A</em>搜索。</p>\n<p>迭代加深(Iterative Deepening)，也是一种搜索的策略。适用于解在搜索树中的深度不是很深，然而搜索树的分支特别多的情况下使用。具体的做法是：限定一个最大深度dmax，再进行DFS，一旦搜索的深度达到了dmax就退出。如果没有搜到，就把dmax+1，再进行DFS，直到搜索到解为止。由此避免了DFS搜索深度过深，而找不到正确解。</p>\n<p>推荐一道迭代加深搜索的题目<a href=\"http://poj.org/problem?id=2870\" target=\"_blank\" rel=\"noopener\">POJ 2870 Light Up</a> 以及 <a href=\"http://blog.csdn.net/sssogs/article/details/8836291\" target=\"_blank\" rel=\"noopener\">解题报告</a></p>\n<p>迭代加深版的A*搜索，其实就是在迭代加深时，计算当前状态h值，加上当前深度，算出f值，一旦f值大于dmax就推出。</p>\n<p>IDA<em>搜索的代码编写较A</em>来说要简单得多。A<em>代码多，主要在于用来判重的Hash表和对f值排序的堆。然而IDA</em>是DFS，所以根本不用判重，也不需要对f值进行排序，也减少了空间消费。</p>\n<p>代码在这里：<a href=\"http://blog.csdn.net/sssogs/article/details/8813386\" target=\"_blank\" rel=\"noopener\">LA 5506 Eight</a></p>\n<h3 id=\"NOTE-5-求逆序数判断是否有解\"><a href=\"#NOTE-5-求逆序数判断是否有解\" class=\"headerlink\" title=\"NOTE 5.求逆序数判断是否有解\"></a>NOTE 5.求逆序数判断是否有解</h3><hr>\n<p>现在来考虑一道新的问题，<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4021\" target=\"_blank\" rel=\"noopener\">HDU 4021</a></p>\n<p>此题实际上并没有要求我们找到一组正确的解，而是询问是否有解。</p>\n<p>对于八数码问题来说，如果方格和空格上下左右移动，对于数列逆序数的奇偶性是不会变的。</p>\n<p>上下移动相当于此数在数列中向前或向后移动了2个位置，要么两个数都比它大，逆序数+2，要么都比它小，逆序数-2，要么一大一小，逆序数的奇偶性不变。</p>\n<p>左右移动，此数在数列中的位置不变，奇偶性不变。</p>\n<p>总的来说逆序数的奇偶性是不变的。</p>\n<p>有了这个判定，可以让我们在搜索一开始便对数列的有解性进行一个判断。</p>\n<p>对于n维的n*n-1问题来说，有这样的结论：</p>\n<pre><code>N为奇数时，初始状态与指定状态逆序数奇偶性相同即有解；\nN为偶数时，先计算出从初始状态到指定状态，空位要移动的行数m，如果初始状态的逆序数加上m与指定状态的逆序数奇偶性相同，则有解。\n</code></pre>"},{"layout":"post","title":"博客系统更新日志(2015年09月05日更新)","date":"2015-09-04T17:21:00.000Z","comments":1,"reward":true,"_content":"\n<p>\n又是一版新博客...<br/>\n这个日志算对plusplus7.com网站系统的发展历程做一个简单的纪录。<br/>\n作为一个后台开发汪，写前端代码感觉非常的力不从心。Whatever，我还是按照自己的想法，使用临时学的新技术，请教了不少前端的朋友，搭了一个勉强能满足自己需求的网站系统。非常感谢朋友们对我的帮助。<br/>\n那么，和之前的旧博客系统相比，去掉了些无聊的功能，比如标签云...新博客采用了比之前更轻量的架构，使用起来更方便。<br/>\n</p>\n\n<!-- more -->\n\n* 2015年09月05日更新\n\n现在的博客是在阿里云上了，域名从godaddy赚到了万网。换了个前端风格，感觉还是很丑。。。\n\n谢谢[Running-snail][3]萌妹子\n\n* 2014年02月16日更新\n\n总算是把博客搞到红帽云上去了，弄了一上午...\n\n由于国内是不能直接访问红帽空间的额，所以还得配配CDN啥的...等一切搞完就写篇博客来记录一下做了些啥\n\n======补完吐槽======\n\n配CDN简直是不能麻烦更多。。。\n\n* 2013年12月16日更新\n\n今天是2013年12月16日，给blog文章列表的显示换成了ajax动态加载。删除了上一页下一页的两个按钮。\n\n* 2013年11月24日更新\n\n今天是2013年11月24日，新加了一个公告栏，以及阅读量的统计功能\n\n* 2013年11月13日更新\n\n今天是2013年11月13日，旧的[CSDN博客][1]是我参加ACM/ICPC比赛时期的解题报告，现已经完全停止更新，这是新博客的第一篇文章~\n\nHello, My Blog!\n\n买不起虚拟主机于是就用了duapp。\n\n现在的版本是ver 1.0，系统很simple，但没关系，ACM退役后时间应该会变得很充裕，我会慢慢完善系统的。\n\n文章内容是用的markdown编写的，文章的显示效果还是能够看的。\n\n如，插入图片，视频神马的...\n\n为了偶尔装装B，写点数学相关的东西，我还去配上了LaTeX数学排版系统。\n像这样：\n$$e^{\\pi i} + 1 = 0$$\n\n哈哈，真是太好玩了...\n\n\n最后，本博客的搭建要感谢好基友[fluyy][2]，从tornado的使用到godaddy的域名解析都离不开他的帮助和指点。\n\n\n\n[1]:http://blog.csdn.net/sssogs\n[2]:http://fluyy.net\n[3]:http://snailsky.me/\n","source":"_posts/博客系统更新日志(2015年09月05日更新).md","raw":"---\nlayout: post\ntitle: 博客系统更新日志(2015年09月05日更新)\ndate: 2015-9-5 01:21\ncomments: true\nreward: true\ntags:\n    - Blog\n---\n\n<p>\n又是一版新博客...<br/>\n这个日志算对plusplus7.com网站系统的发展历程做一个简单的纪录。<br/>\n作为一个后台开发汪，写前端代码感觉非常的力不从心。Whatever，我还是按照自己的想法，使用临时学的新技术，请教了不少前端的朋友，搭了一个勉强能满足自己需求的网站系统。非常感谢朋友们对我的帮助。<br/>\n那么，和之前的旧博客系统相比，去掉了些无聊的功能，比如标签云...新博客采用了比之前更轻量的架构，使用起来更方便。<br/>\n</p>\n\n<!-- more -->\n\n* 2015年09月05日更新\n\n现在的博客是在阿里云上了，域名从godaddy赚到了万网。换了个前端风格，感觉还是很丑。。。\n\n谢谢[Running-snail][3]萌妹子\n\n* 2014年02月16日更新\n\n总算是把博客搞到红帽云上去了，弄了一上午...\n\n由于国内是不能直接访问红帽空间的额，所以还得配配CDN啥的...等一切搞完就写篇博客来记录一下做了些啥\n\n======补完吐槽======\n\n配CDN简直是不能麻烦更多。。。\n\n* 2013年12月16日更新\n\n今天是2013年12月16日，给blog文章列表的显示换成了ajax动态加载。删除了上一页下一页的两个按钮。\n\n* 2013年11月24日更新\n\n今天是2013年11月24日，新加了一个公告栏，以及阅读量的统计功能\n\n* 2013年11月13日更新\n\n今天是2013年11月13日，旧的[CSDN博客][1]是我参加ACM/ICPC比赛时期的解题报告，现已经完全停止更新，这是新博客的第一篇文章~\n\nHello, My Blog!\n\n买不起虚拟主机于是就用了duapp。\n\n现在的版本是ver 1.0，系统很simple，但没关系，ACM退役后时间应该会变得很充裕，我会慢慢完善系统的。\n\n文章内容是用的markdown编写的，文章的显示效果还是能够看的。\n\n如，插入图片，视频神马的...\n\n为了偶尔装装B，写点数学相关的东西，我还去配上了LaTeX数学排版系统。\n像这样：\n$$e^{\\pi i} + 1 = 0$$\n\n哈哈，真是太好玩了...\n\n\n最后，本博客的搭建要感谢好基友[fluyy][2]，从tornado的使用到godaddy的域名解析都离不开他的帮助和指点。\n\n\n\n[1]:http://blog.csdn.net/sssogs\n[2]:http://fluyy.net\n[3]:http://snailsky.me/\n","slug":"博客系统更新日志(2015年09月05日更新)","published":1,"updated":"2018-05-23T14:45:27.232Z","photos":[],"link":"","_id":"cjhj92bni001ee0vfpkepp71j","content":"<p><br>又是一版新博客…<br><br>这个日志算对plusplus7.com网站系统的发展历程做一个简单的纪录。<br><br>作为一个后台开发汪，写前端代码感觉非常的力不从心。Whatever，我还是按照自己的想法，使用临时学的新技术，请教了不少前端的朋友，搭了一个勉强能满足自己需求的网站系统。非常感谢朋友们对我的帮助。<br><br>那么，和之前的旧博客系统相比，去掉了些无聊的功能，比如标签云…新博客采用了比之前更轻量的架构，使用起来更方便。<br><br></p>\n\n<a id=\"more\"></a>\n<ul>\n<li>2015年09月05日更新</li>\n</ul>\n<p>现在的博客是在阿里云上了，域名从godaddy赚到了万网。换了个前端风格，感觉还是很丑。。。</p>\n<p>谢谢<a href=\"http://snailsky.me/\" target=\"_blank\" rel=\"noopener\">Running-snail</a>萌妹子</p>\n<ul>\n<li>2014年02月16日更新</li>\n</ul>\n<p>总算是把博客搞到红帽云上去了，弄了一上午…</p>\n<p>由于国内是不能直接访问红帽空间的额，所以还得配配CDN啥的…等一切搞完就写篇博客来记录一下做了些啥</p>\n<p>======补完吐槽======</p>\n<p>配CDN简直是不能麻烦更多。。。</p>\n<ul>\n<li>2013年12月16日更新</li>\n</ul>\n<p>今天是2013年12月16日，给blog文章列表的显示换成了ajax动态加载。删除了上一页下一页的两个按钮。</p>\n<ul>\n<li>2013年11月24日更新</li>\n</ul>\n<p>今天是2013年11月24日，新加了一个公告栏，以及阅读量的统计功能</p>\n<ul>\n<li>2013年11月13日更新</li>\n</ul>\n<p>今天是2013年11月13日，旧的<a href=\"http://blog.csdn.net/sssogs\" target=\"_blank\" rel=\"noopener\">CSDN博客</a>是我参加ACM/ICPC比赛时期的解题报告，现已经完全停止更新，这是新博客的第一篇文章~</p>\n<p>Hello, My Blog!</p>\n<p>买不起虚拟主机于是就用了duapp。</p>\n<p>现在的版本是ver 1.0，系统很simple，但没关系，ACM退役后时间应该会变得很充裕，我会慢慢完善系统的。</p>\n<p>文章内容是用的markdown编写的，文章的显示效果还是能够看的。</p>\n<p>如，插入图片，视频神马的…</p>\n<p>为了偶尔装装B，写点数学相关的东西，我还去配上了LaTeX数学排版系统。<br>像这样：<br>$$e^{\\pi i} + 1 = 0$$</p>\n<p>哈哈，真是太好玩了…</p>\n<p>最后，本博客的搭建要感谢好基友<a href=\"http://fluyy.net\" target=\"_blank\" rel=\"noopener\">fluyy</a>，从tornado的使用到godaddy的域名解析都离不开他的帮助和指点。</p>\n","site":{"data":{}},"excerpt":"<p><br>又是一版新博客…<br><br>这个日志算对plusplus7.com网站系统的发展历程做一个简单的纪录。<br><br>作为一个后台开发汪，写前端代码感觉非常的力不从心。Whatever，我还是按照自己的想法，使用临时学的新技术，请教了不少前端的朋友，搭了一个勉强能满足自己需求的网站系统。非常感谢朋友们对我的帮助。<br><br>那么，和之前的旧博客系统相比，去掉了些无聊的功能，比如标签云…新博客采用了比之前更轻量的架构，使用起来更方便。<br><br></p>","more":"<ul>\n<li>2015年09月05日更新</li>\n</ul>\n<p>现在的博客是在阿里云上了，域名从godaddy赚到了万网。换了个前端风格，感觉还是很丑。。。</p>\n<p>谢谢<a href=\"http://snailsky.me/\" target=\"_blank\" rel=\"noopener\">Running-snail</a>萌妹子</p>\n<ul>\n<li>2014年02月16日更新</li>\n</ul>\n<p>总算是把博客搞到红帽云上去了，弄了一上午…</p>\n<p>由于国内是不能直接访问红帽空间的额，所以还得配配CDN啥的…等一切搞完就写篇博客来记录一下做了些啥</p>\n<p>======补完吐槽======</p>\n<p>配CDN简直是不能麻烦更多。。。</p>\n<ul>\n<li>2013年12月16日更新</li>\n</ul>\n<p>今天是2013年12月16日，给blog文章列表的显示换成了ajax动态加载。删除了上一页下一页的两个按钮。</p>\n<ul>\n<li>2013年11月24日更新</li>\n</ul>\n<p>今天是2013年11月24日，新加了一个公告栏，以及阅读量的统计功能</p>\n<ul>\n<li>2013年11月13日更新</li>\n</ul>\n<p>今天是2013年11月13日，旧的<a href=\"http://blog.csdn.net/sssogs\" target=\"_blank\" rel=\"noopener\">CSDN博客</a>是我参加ACM/ICPC比赛时期的解题报告，现已经完全停止更新，这是新博客的第一篇文章~</p>\n<p>Hello, My Blog!</p>\n<p>买不起虚拟主机于是就用了duapp。</p>\n<p>现在的版本是ver 1.0，系统很simple，但没关系，ACM退役后时间应该会变得很充裕，我会慢慢完善系统的。</p>\n<p>文章内容是用的markdown编写的，文章的显示效果还是能够看的。</p>\n<p>如，插入图片，视频神马的…</p>\n<p>为了偶尔装装B，写点数学相关的东西，我还去配上了LaTeX数学排版系统。<br>像这样：<br>$$e^{\\pi i} + 1 = 0$$</p>\n<p>哈哈，真是太好玩了…</p>\n<p>最后，本博客的搭建要感谢好基友<a href=\"http://fluyy.net\" target=\"_blank\" rel=\"noopener\">fluyy</a>，从tornado的使用到godaddy的域名解析都离不开他的帮助和指点。</p>"},{"layout":"post","title":"奥里与迷失之森","date":"2017-09-16T17:21:00.000Z","comments":1,"reward":true,"_content":"\n奥里与迷失之森，Ori and the blind forest，是由Moon Studios GmbH研发的一款动作游戏，于2015年3月11日发行。该游戏采用的是2D画面，但是有3D效果，和《雷曼》颇有几分相似之处，只不过色调更加阴暗。游戏讲述的是奥里（Ori）在一场暴风雨中被吹离了世界树后的一次次奇遇。\n\n<!-- more -->\n\n<embed id=\"STK_137722048114034\" width=\"640\" height=\"480\" wmode=\"transparent\" quality=\"high\" allowfullscreen=\"true\" flashvars=\"playMovie=true&auto=1\" pluginspage=\"http://get.adobe.com/cn/flashplayer/\" allowscriptaccess=\"never\" src=\"http://static.hdslb.com/miniloader.swf?aid=2129528&page=1\" type=\"application/x-shockwave-flash\" style=\"visibility: visible;\"></embed>\n","source":"_posts/奥里与迷失之森.md","raw":"---\nlayout: post\ntitle: 奥里与迷失之森\ndate: 2017-9-17 01:21\ncomments: true\nreward: true\ntags:\n    - Games\n---\n\n奥里与迷失之森，Ori and the blind forest，是由Moon Studios GmbH研发的一款动作游戏，于2015年3月11日发行。该游戏采用的是2D画面，但是有3D效果，和《雷曼》颇有几分相似之处，只不过色调更加阴暗。游戏讲述的是奥里（Ori）在一场暴风雨中被吹离了世界树后的一次次奇遇。\n\n<!-- more -->\n\n<embed id=\"STK_137722048114034\" width=\"640\" height=\"480\" wmode=\"transparent\" quality=\"high\" allowfullscreen=\"true\" flashvars=\"playMovie=true&auto=1\" pluginspage=\"http://get.adobe.com/cn/flashplayer/\" allowscriptaccess=\"never\" src=\"http://static.hdslb.com/miniloader.swf?aid=2129528&page=1\" type=\"application/x-shockwave-flash\" style=\"visibility: visible;\"></embed>\n","slug":"奥里与迷失之森","published":1,"updated":"2018-05-23T14:45:27.262Z","photos":[],"link":"","_id":"cjhj92bnm001ie0vf46tpe96c","content":"<p>奥里与迷失之森，Ori and the blind forest，是由Moon Studios GmbH研发的一款动作游戏，于2015年3月11日发行。该游戏采用的是2D画面，但是有3D效果，和《雷曼》颇有几分相似之处，只不过色调更加阴暗。游戏讲述的是奥里（Ori）在一场暴风雨中被吹离了世界树后的一次次奇遇。</p>\n<a id=\"more\"></a>\n<embed id=\"STK_137722048114034\" width=\"640\" height=\"480\" wmode=\"transparent\" quality=\"high\" allowfullscreen=\"true\" flashvars=\"playMovie=true&auto=1\" pluginspage=\"http://get.adobe.com/cn/flashplayer/\" allowscriptaccess=\"never\" src=\"http://static.hdslb.com/miniloader.swf?aid=2129528&page=1\" type=\"application/x-shockwave-flash\" style=\"visibility: visible;\">\n","site":{"data":{}},"excerpt":"<p>奥里与迷失之森，Ori and the blind forest，是由Moon Studios GmbH研发的一款动作游戏，于2015年3月11日发行。该游戏采用的是2D画面，但是有3D效果，和《雷曼》颇有几分相似之处，只不过色调更加阴暗。游戏讲述的是奥里（Ori）在一场暴风雨中被吹离了世界树后的一次次奇遇。</p>","more":"<embed id=\"STK_137722048114034\" width=\"640\" height=\"480\" wmode=\"transparent\" quality=\"high\" allowfullscreen=\"true\" flashvars=\"playMovie=true&auto=1\" pluginspage=\"http://get.adobe.com/cn/flashplayer/\" allowscriptaccess=\"never\" src=\"http://static.hdslb.com/miniloader.swf?aid=2129528&page=1\" type=\"application/x-shockwave-flash\" style=\"visibility: visible;\">"},{"layout":"post","title":"密码学学习笔记","date":"2014-09-16T17:21:00.000Z","comments":1,"reward":true,"_content":"\n准备学学密码学的一些算法，并且写写代码来实现一下。\n\n<!-- more -->\n\n* 2014/04/10 星期四 Base64算法加密解密\n\nBase64是一种基于64个可打印字符来表示二进制数据的表示方法。\n\n由于2的6次方等于64，所以每6个位元为一个单元，对应某个可打印字符。三个字节有24个位元，对应于4个Base64单元，即3个字节需要用4个可打印字符来表示。它可用来作为电子邮件的传输编码。在Base64中的可打印字符包括字母A-Z、a-z、数字0-9，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。一些如uuencode的其他编码方法，和之后binhex的版本使用不同的64字符集来代表6个二进制数字，但是它们不叫Base64。\n\n[Base64算法 c语言代码][base64]\n\n* 2014/04/09 星期三 AES算法加密解密\n\n高级加密标准（Advanced Encryption Standard，AES），在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。\n\n这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。\n\n大多数AES计算是在一个特别的有限域完成的。\n\nAES加密过程是在一个4×4的字节矩阵上运作，这个矩阵又称为“体（state）”，其初值就是一个明文区块（矩阵中一个元素大小就是明文区块中的一个Byte）。加密时，各轮AES加密循环（除最后一轮外）均包含4个步骤：\n\nAddRoundKey — 矩阵中的每一个字节都与该次回合密钥（round key）做XOR运算；每个子密钥由密钥生成方案产生。\nSubBytes — 通过一个非线性的替换函数，用查找表的方式把每个字节替换成对应的字节。\nShiftRows — 将矩阵中的每个横列进行循环式移位。\nMixColumns — 为了充分混合矩阵中各个直行的操作。这个步骤使用线性转换来混合每内联的四个字节。\n最后一个加密循环中省略MixColumns步骤，而以另一个AddRoundKey取代。\n\n[AES算法 c语言代码][aes]\n\n* 2014/04/01 星期二 DES算法加密解密\n\nDES算法为密码体制中的对称密码体制，又被成为美国数据加密标准，是1972年美国IBM公司研制的对称密码体制加密算法。\n\n其密钥长度为56位，明文按64位进行分组，将分组后的明文组和56位的密钥按位替代或交换的方法形成密文组的加密方法。DES加密算法特点：分组比较短、密钥太短、密码生命周期短、运算速度较慢。\n    \n[DES算法 c语言代码][des]\n    \n\n[base64]:https://github.com/plusplus7/EncryptionAlgorithm/blob/master/EncryptionAlgorithm/base64.c\n[aes]:https://github.com/plusplus7/EncryptionAlgorithm/blob/master/EncryptionAlgorithm/aes.c\n[des]:https://github.com/plusplus7/EncryptionAlgorithm/blob/master/EncryptionAlgorithm/des.c\n","source":"_posts/密码学算法学习笔记.md","raw":"---\nlayout: post\ntitle: 密码学学习笔记\ndate: 2014-9-17 01:21\ncomments: true\nreward: true\ntags:\n    - Security\n---\n\n准备学学密码学的一些算法，并且写写代码来实现一下。\n\n<!-- more -->\n\n* 2014/04/10 星期四 Base64算法加密解密\n\nBase64是一种基于64个可打印字符来表示二进制数据的表示方法。\n\n由于2的6次方等于64，所以每6个位元为一个单元，对应某个可打印字符。三个字节有24个位元，对应于4个Base64单元，即3个字节需要用4个可打印字符来表示。它可用来作为电子邮件的传输编码。在Base64中的可打印字符包括字母A-Z、a-z、数字0-9，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。一些如uuencode的其他编码方法，和之后binhex的版本使用不同的64字符集来代表6个二进制数字，但是它们不叫Base64。\n\n[Base64算法 c语言代码][base64]\n\n* 2014/04/09 星期三 AES算法加密解密\n\n高级加密标准（Advanced Encryption Standard，AES），在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。\n\n这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。\n\n大多数AES计算是在一个特别的有限域完成的。\n\nAES加密过程是在一个4×4的字节矩阵上运作，这个矩阵又称为“体（state）”，其初值就是一个明文区块（矩阵中一个元素大小就是明文区块中的一个Byte）。加密时，各轮AES加密循环（除最后一轮外）均包含4个步骤：\n\nAddRoundKey — 矩阵中的每一个字节都与该次回合密钥（round key）做XOR运算；每个子密钥由密钥生成方案产生。\nSubBytes — 通过一个非线性的替换函数，用查找表的方式把每个字节替换成对应的字节。\nShiftRows — 将矩阵中的每个横列进行循环式移位。\nMixColumns — 为了充分混合矩阵中各个直行的操作。这个步骤使用线性转换来混合每内联的四个字节。\n最后一个加密循环中省略MixColumns步骤，而以另一个AddRoundKey取代。\n\n[AES算法 c语言代码][aes]\n\n* 2014/04/01 星期二 DES算法加密解密\n\nDES算法为密码体制中的对称密码体制，又被成为美国数据加密标准，是1972年美国IBM公司研制的对称密码体制加密算法。\n\n其密钥长度为56位，明文按64位进行分组，将分组后的明文组和56位的密钥按位替代或交换的方法形成密文组的加密方法。DES加密算法特点：分组比较短、密钥太短、密码生命周期短、运算速度较慢。\n    \n[DES算法 c语言代码][des]\n    \n\n[base64]:https://github.com/plusplus7/EncryptionAlgorithm/blob/master/EncryptionAlgorithm/base64.c\n[aes]:https://github.com/plusplus7/EncryptionAlgorithm/blob/master/EncryptionAlgorithm/aes.c\n[des]:https://github.com/plusplus7/EncryptionAlgorithm/blob/master/EncryptionAlgorithm/des.c\n","slug":"密码学算法学习笔记","published":1,"updated":"2018-05-23T14:45:27.291Z","photos":[],"link":"","_id":"cjhj92bnq001ke0vf424w4fsn","content":"<p>准备学学密码学的一些算法，并且写写代码来实现一下。</p>\n<a id=\"more\"></a>\n<ul>\n<li>2014/04/10 星期四 Base64算法加密解密</li>\n</ul>\n<p>Base64是一种基于64个可打印字符来表示二进制数据的表示方法。</p>\n<p>由于2的6次方等于64，所以每6个位元为一个单元，对应某个可打印字符。三个字节有24个位元，对应于4个Base64单元，即3个字节需要用4个可打印字符来表示。它可用来作为电子邮件的传输编码。在Base64中的可打印字符包括字母A-Z、a-z、数字0-9，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。一些如uuencode的其他编码方法，和之后binhex的版本使用不同的64字符集来代表6个二进制数字，但是它们不叫Base64。</p>\n<p><a href=\"https://github.com/plusplus7/EncryptionAlgorithm/blob/master/EncryptionAlgorithm/base64.c\" target=\"_blank\" rel=\"noopener\">Base64算法 c语言代码</a></p>\n<ul>\n<li>2014/04/09 星期三 AES算法加密解密</li>\n</ul>\n<p>高级加密标准（Advanced Encryption Standard，AES），在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。</p>\n<p>这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。</p>\n<p>大多数AES计算是在一个特别的有限域完成的。</p>\n<p>AES加密过程是在一个4×4的字节矩阵上运作，这个矩阵又称为“体（state）”，其初值就是一个明文区块（矩阵中一个元素大小就是明文区块中的一个Byte）。加密时，各轮AES加密循环（除最后一轮外）均包含4个步骤：</p>\n<p>AddRoundKey — 矩阵中的每一个字节都与该次回合密钥（round key）做XOR运算；每个子密钥由密钥生成方案产生。<br>SubBytes — 通过一个非线性的替换函数，用查找表的方式把每个字节替换成对应的字节。<br>ShiftRows — 将矩阵中的每个横列进行循环式移位。<br>MixColumns — 为了充分混合矩阵中各个直行的操作。这个步骤使用线性转换来混合每内联的四个字节。<br>最后一个加密循环中省略MixColumns步骤，而以另一个AddRoundKey取代。</p>\n<p><a href=\"https://github.com/plusplus7/EncryptionAlgorithm/blob/master/EncryptionAlgorithm/aes.c\" target=\"_blank\" rel=\"noopener\">AES算法 c语言代码</a></p>\n<ul>\n<li>2014/04/01 星期二 DES算法加密解密</li>\n</ul>\n<p>DES算法为密码体制中的对称密码体制，又被成为美国数据加密标准，是1972年美国IBM公司研制的对称密码体制加密算法。</p>\n<p>其密钥长度为56位，明文按64位进行分组，将分组后的明文组和56位的密钥按位替代或交换的方法形成密文组的加密方法。DES加密算法特点：分组比较短、密钥太短、密码生命周期短、运算速度较慢。</p>\n<p><a href=\"https://github.com/plusplus7/EncryptionAlgorithm/blob/master/EncryptionAlgorithm/des.c\" target=\"_blank\" rel=\"noopener\">DES算法 c语言代码</a></p>\n","site":{"data":{}},"excerpt":"<p>准备学学密码学的一些算法，并且写写代码来实现一下。</p>","more":"<ul>\n<li>2014/04/10 星期四 Base64算法加密解密</li>\n</ul>\n<p>Base64是一种基于64个可打印字符来表示二进制数据的表示方法。</p>\n<p>由于2的6次方等于64，所以每6个位元为一个单元，对应某个可打印字符。三个字节有24个位元，对应于4个Base64单元，即3个字节需要用4个可打印字符来表示。它可用来作为电子邮件的传输编码。在Base64中的可打印字符包括字母A-Z、a-z、数字0-9，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。一些如uuencode的其他编码方法，和之后binhex的版本使用不同的64字符集来代表6个二进制数字，但是它们不叫Base64。</p>\n<p><a href=\"https://github.com/plusplus7/EncryptionAlgorithm/blob/master/EncryptionAlgorithm/base64.c\" target=\"_blank\" rel=\"noopener\">Base64算法 c语言代码</a></p>\n<ul>\n<li>2014/04/09 星期三 AES算法加密解密</li>\n</ul>\n<p>高级加密标准（Advanced Encryption Standard，AES），在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。</p>\n<p>这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。</p>\n<p>大多数AES计算是在一个特别的有限域完成的。</p>\n<p>AES加密过程是在一个4×4的字节矩阵上运作，这个矩阵又称为“体（state）”，其初值就是一个明文区块（矩阵中一个元素大小就是明文区块中的一个Byte）。加密时，各轮AES加密循环（除最后一轮外）均包含4个步骤：</p>\n<p>AddRoundKey — 矩阵中的每一个字节都与该次回合密钥（round key）做XOR运算；每个子密钥由密钥生成方案产生。<br>SubBytes — 通过一个非线性的替换函数，用查找表的方式把每个字节替换成对应的字节。<br>ShiftRows — 将矩阵中的每个横列进行循环式移位。<br>MixColumns — 为了充分混合矩阵中各个直行的操作。这个步骤使用线性转换来混合每内联的四个字节。<br>最后一个加密循环中省略MixColumns步骤，而以另一个AddRoundKey取代。</p>\n<p><a href=\"https://github.com/plusplus7/EncryptionAlgorithm/blob/master/EncryptionAlgorithm/aes.c\" target=\"_blank\" rel=\"noopener\">AES算法 c语言代码</a></p>\n<ul>\n<li>2014/04/01 星期二 DES算法加密解密</li>\n</ul>\n<p>DES算法为密码体制中的对称密码体制，又被成为美国数据加密标准，是1972年美国IBM公司研制的对称密码体制加密算法。</p>\n<p>其密钥长度为56位，明文按64位进行分组，将分组后的明文组和56位的密钥按位替代或交换的方法形成密文组的加密方法。DES加密算法特点：分组比较短、密钥太短、密码生命周期短、运算速度较慢。</p>\n<p><a href=\"https://github.com/plusplus7/EncryptionAlgorithm/blob/master/EncryptionAlgorithm/des.c\" target=\"_blank\" rel=\"noopener\">DES算法 c语言代码</a></p>"},{"layout":"post","title":"局部加权线性回归——机器学习笔记（二）","date":"2013-08-10T17:21:00.000Z","comments":1,"reward":true,"_content":"\n局部加权回归（Locally weighted linear regression）在进行预测时，都需要基于训练集来重新拟合一条曲线。\n\n在$J(\\theta)$函数中增加一个$w(i)$作为当前数据点的权值，通过对每个数据点进行加权后使用线性回归算法（如：梯度下降.etc），就能得到一条基于当前预测点的局部加权回归后的预测值。\n\n在进行线性规划的时，有时得到训练模型的预测结果并不能很好地拟合数据集（欠拟合）。\n\n<!-- more -->\n\n如果尝试给模型添加几个特征值，如：房屋大小$x_1$，房屋面积$x_2$...当添加太多特征值后，最终会训练出一个完美通过每个数据点的曲线。\n\n显然，这样的曲线不能并不能反应数据所表达的普遍特征（过拟合）。\n\nFrom 《机器学习》P49 Tom M.Mitchell\n\n*给定一个假设空间H，一个假设h属于H，如果存在其他的假设h’属于H,使得在训练样例上h的错误率比h’小，但在整个实例分布上h’比h的错误率小，那么就说假设h过度拟合训练数据。*\n\n局部加权回归的步骤是：\n\n* 检查数据集合，考虑位于x周围的固定区域内的数据点\n\n* 对这个区域内的点做线性回归，拟合出一条直线\n\n* 根据拟合直线对x的输出，作为算法返回的结果\n\n其中权值函数weight的选择：\n\n$w^{(i)}=exp(-\\frac{(x^{(i)}-x)^2}{2\\tau^2 })$\n\n如果使用批量梯度下降来实习线性回归的话：\n\n$Repeat\\ until\\ convergence${\n\n$\\theta_j:=\\theta_j+\\alpha\\sum_{i=1}^mw^{(i)}×(y^{(i)}-h_\\theta(x^{(i)}))x_j^{(i)} $   \n\n(for every j)\n\n}\n\n[局部加权回归 C++实现][1]\n\n[1]:https://github.com/plusplus7/MachineLearning/blob/master/src/locally_weighted_linear_regression/locally_weighted_linear_regression.cc\n","source":"_posts/局部加权线性回归——机器学习笔记（二）.md","raw":"---\nlayout: post\ntitle: 局部加权线性回归——机器学习笔记（二）\ndate: 2013-8-11 01:21\ncomments: true\nreward: true\ntags:\n    - Life\n---\n\n局部加权回归（Locally weighted linear regression）在进行预测时，都需要基于训练集来重新拟合一条曲线。\n\n在$J(\\theta)$函数中增加一个$w(i)$作为当前数据点的权值，通过对每个数据点进行加权后使用线性回归算法（如：梯度下降.etc），就能得到一条基于当前预测点的局部加权回归后的预测值。\n\n在进行线性规划的时，有时得到训练模型的预测结果并不能很好地拟合数据集（欠拟合）。\n\n<!-- more -->\n\n如果尝试给模型添加几个特征值，如：房屋大小$x_1$，房屋面积$x_2$...当添加太多特征值后，最终会训练出一个完美通过每个数据点的曲线。\n\n显然，这样的曲线不能并不能反应数据所表达的普遍特征（过拟合）。\n\nFrom 《机器学习》P49 Tom M.Mitchell\n\n*给定一个假设空间H，一个假设h属于H，如果存在其他的假设h’属于H,使得在训练样例上h的错误率比h’小，但在整个实例分布上h’比h的错误率小，那么就说假设h过度拟合训练数据。*\n\n局部加权回归的步骤是：\n\n* 检查数据集合，考虑位于x周围的固定区域内的数据点\n\n* 对这个区域内的点做线性回归，拟合出一条直线\n\n* 根据拟合直线对x的输出，作为算法返回的结果\n\n其中权值函数weight的选择：\n\n$w^{(i)}=exp(-\\frac{(x^{(i)}-x)^2}{2\\tau^2 })$\n\n如果使用批量梯度下降来实习线性回归的话：\n\n$Repeat\\ until\\ convergence${\n\n$\\theta_j:=\\theta_j+\\alpha\\sum_{i=1}^mw^{(i)}×(y^{(i)}-h_\\theta(x^{(i)}))x_j^{(i)} $   \n\n(for every j)\n\n}\n\n[局部加权回归 C++实现][1]\n\n[1]:https://github.com/plusplus7/MachineLearning/blob/master/src/locally_weighted_linear_regression/locally_weighted_linear_regression.cc\n","slug":"局部加权线性回归——机器学习笔记（二）","published":1,"updated":"2018-05-23T14:45:27.319Z","photos":[],"link":"","_id":"cjhj92bnv001oe0vfkj70jw5m","content":"<p>局部加权回归（Locally weighted linear regression）在进行预测时，都需要基于训练集来重新拟合一条曲线。</p>\n<p>在$J(\\theta)$函数中增加一个$w(i)$作为当前数据点的权值，通过对每个数据点进行加权后使用线性回归算法（如：梯度下降.etc），就能得到一条基于当前预测点的局部加权回归后的预测值。</p>\n<p>在进行线性规划的时，有时得到训练模型的预测结果并不能很好地拟合数据集（欠拟合）。</p>\n<a id=\"more\"></a>\n<p>如果尝试给模型添加几个特征值，如：房屋大小$x_1$，房屋面积$x_2$…当添加太多特征值后，最终会训练出一个完美通过每个数据点的曲线。</p>\n<p>显然，这样的曲线不能并不能反应数据所表达的普遍特征（过拟合）。</p>\n<p>From 《机器学习》P49 Tom M.Mitchell</p>\n<p><em>给定一个假设空间H，一个假设h属于H，如果存在其他的假设h’属于H,使得在训练样例上h的错误率比h’小，但在整个实例分布上h’比h的错误率小，那么就说假设h过度拟合训练数据。</em></p>\n<p>局部加权回归的步骤是：</p>\n<ul>\n<li><p>检查数据集合，考虑位于x周围的固定区域内的数据点</p>\n</li>\n<li><p>对这个区域内的点做线性回归，拟合出一条直线</p>\n</li>\n<li><p>根据拟合直线对x的输出，作为算法返回的结果</p>\n</li>\n</ul>\n<p>其中权值函数weight的选择：</p>\n<p>$w^{(i)}=exp(-\\frac{(x^{(i)}-x)^2}{2\\tau^2 })$</p>\n<p>如果使用批量梯度下降来实习线性回归的话：</p>\n<p>$Repeat\\ until\\ convergence${</p>\n<p>$\\theta_j:=\\theta<em>j+\\alpha\\sum</em>{i=1}^mw^{(i)}×(y^{(i)}-h_\\theta(x^{(i)}))x_j^{(i)} $   </p>\n<p>(for every j)</p>\n<p>}</p>\n<p><a href=\"https://github.com/plusplus7/MachineLearning/blob/master/src/locally_weighted_linear_regression/locally_weighted_linear_regression.cc\" target=\"_blank\" rel=\"noopener\">局部加权回归 C++实现</a></p>\n","site":{"data":{}},"excerpt":"<p>局部加权回归（Locally weighted linear regression）在进行预测时，都需要基于训练集来重新拟合一条曲线。</p>\n<p>在$J(\\theta)$函数中增加一个$w(i)$作为当前数据点的权值，通过对每个数据点进行加权后使用线性回归算法（如：梯度下降.etc），就能得到一条基于当前预测点的局部加权回归后的预测值。</p>\n<p>在进行线性规划的时，有时得到训练模型的预测结果并不能很好地拟合数据集（欠拟合）。</p>","more":"<p>如果尝试给模型添加几个特征值，如：房屋大小$x_1$，房屋面积$x_2$…当添加太多特征值后，最终会训练出一个完美通过每个数据点的曲线。</p>\n<p>显然，这样的曲线不能并不能反应数据所表达的普遍特征（过拟合）。</p>\n<p>From 《机器学习》P49 Tom M.Mitchell</p>\n<p><em>给定一个假设空间H，一个假设h属于H，如果存在其他的假设h’属于H,使得在训练样例上h的错误率比h’小，但在整个实例分布上h’比h的错误率小，那么就说假设h过度拟合训练数据。</em></p>\n<p>局部加权回归的步骤是：</p>\n<ul>\n<li><p>检查数据集合，考虑位于x周围的固定区域内的数据点</p>\n</li>\n<li><p>对这个区域内的点做线性回归，拟合出一条直线</p>\n</li>\n<li><p>根据拟合直线对x的输出，作为算法返回的结果</p>\n</li>\n</ul>\n<p>其中权值函数weight的选择：</p>\n<p>$w^{(i)}=exp(-\\frac{(x^{(i)}-x)^2}{2\\tau^2 })$</p>\n<p>如果使用批量梯度下降来实习线性回归的话：</p>\n<p>$Repeat\\ until\\ convergence${</p>\n<p>$\\theta_j:=\\theta<em>j+\\alpha\\sum</em>{i=1}^mw^{(i)}×(y^{(i)}-h_\\theta(x^{(i)}))x_j^{(i)} $   </p>\n<p>(for every j)</p>\n<p>}</p>\n<p><a href=\"https://github.com/plusplus7/MachineLearning/blob/master/src/locally_weighted_linear_regression/locally_weighted_linear_regression.cc\" target=\"_blank\" rel=\"noopener\">局部加权回归 C++实现</a></p>"},{"layout":"post","title":"收集的威尔逊定理证明","date":"2013-05-16T17:21:00.000Z","comments":1,"reward":true,"_content":"\n在求解[BNUOJ 1093 YAPTCHA][1]时，用到了威尔逊定理。\n\n在这里收集整理一下证明威尔逊定理的方法。\n\n先说从题意出发吧。这道题是给定一个式子\n\n再给若干个n，让你求出Sn的值。其中1<=n<=10^6\n\n<!-- more -->\n\n<img src=\"http://bcs.duapp.com/blogbuk/1362584646_4462.jpg\">\n</img>\n\n暴力肯定是不行的。所以考虑数论的方法。\n\n        当3k+7不是素数时，可以得到((3k+6)!+1)/(3k+7)=(3k+6)!/(3k+7)，此时括号内的值为0.\n\n        当3k+7是素数时，由威尔逊定理知(3k+6)! = -1 (mod 3k+7) ，可以得到((3k+6)!+1)/(3k+7)=[(3k+6)!/(3k+7)]+1，此时括号内的值为1.\n\n所以解法就是筛出素数表，然后从0到10^6，判断素数，是素数就等于前一项的值+1，不是素数就直接等于前一项的值，答案保存到一个数组中即可。\n\n威尔逊定理：当( p -1 )! ≡ -1 ( mod p ) 时，p为素数。\n\n证明如下\n\n充分性：\n\n      当p不是素数，那么令p=a*b ，其中1 < a < p-1 ,1 < b < p-1.\n    (1)若a≠b,\n        因为(p-1)!=1*2*...*a*...*b*...*p-1,\n        所以(p-1)!≡ 0 (mod a)        \n               (p-1)!≡ 0 (mod b)\n        可得(p-1)!≡ 0 (mod a*b) ，\n              即 (p-1)!≡ 0 (mod p)\n        与( p -1 )! ≡ -1 ( mod p )  矛盾\n    (2)若a=b\n        因为(p-1)!=1*2*...*a*...*2a*...*p-1.\n        所以(p-1)!≡ 0 (mod a)          \n               (p-1)!≡ 0 (mod 2a)\n        可得(p-1)!≡ 0 (mod a*2a) => (p-1)!≡ 0 (mod a*a) ，\n          即 (p-1)!≡ 0 (mod p)\n        与( p -1 )! ≡ -1 ( mod p )  矛盾\n        因此p只能是素数。\n\n必要性：\n\n        当p为2，( p -1 )! ≡ -1 ( mod p ) 显然成立\n\n        当p为3，( p -1 )! ≡ -1 ( mod p ) 显然成立\n\n        对于p>=5，令M={2,3,4,...,p-2}.\n\n        对于a∈M，令N={a,2*a,3*a,4*a,....(p-2)*a,(p-1)*a}\n\n        令1 <= t1 <= p-1 ,1 <= t2 <= p-1,t1 ≠ t2\n\n        那么t1*a∈N，t2*a∈N。\n\n        若t1*a≡t2*a (mod p) ，那么|t1-t2|*a ≡ 0 (mod p)。\n\n        因为|t1-t2|*a∈N，与N中元素不能被p除尽矛盾。\n\n        所以t1*a≡t2*a不成立。\n\n        那么N中元素对p取模后形成的集合为{1,2,3,4,...,p-1}.\n\n        设x*a ≡ 1 (mod p)。\n\n                当x=1时， x*a=a, 对p取模不为1，所以不成立。\n\n                当x=p-1时，(p-1)*a=p*a-a, 对p取模不为1，所以不成立。\n                当x=a时，a*a≡1 (mod p)，可得(a+1)*(a-1)≡ 0 (mod p),a=1或a=p-1 ，所以不成立。\n\n        综上所述，x,a∈M，并且当a不同时，x也随之不同。\n\n        所以，M集合中每一个元素a都能够找到一个与之配对的x，使得x*a ≡ 1 (mod p).\n        (p-1)!=1*2*3*...p-1\n                  =1*(2*x1)*(3*x3)*...*(p-1)\n        所以， (p-1)!≡1*(p-1)    (mod p)\n        即，(p-1)!≡-1     (mod p) \n\n------\n证明完毕\n[1]:http://acm.bnu.edu.cn/bnuoj/problem_show.php?pid=1093\n","source":"_posts/收集的威尔逊定理证明.md","raw":"---\nlayout: post\ntitle: 收集的威尔逊定理证明\ndate: 2013-5-17 01:21\ncomments: true\nreward: true\ntags:\n    - Life\n---\n\n在求解[BNUOJ 1093 YAPTCHA][1]时，用到了威尔逊定理。\n\n在这里收集整理一下证明威尔逊定理的方法。\n\n先说从题意出发吧。这道题是给定一个式子\n\n再给若干个n，让你求出Sn的值。其中1<=n<=10^6\n\n<!-- more -->\n\n<img src=\"http://bcs.duapp.com/blogbuk/1362584646_4462.jpg\">\n</img>\n\n暴力肯定是不行的。所以考虑数论的方法。\n\n        当3k+7不是素数时，可以得到((3k+6)!+1)/(3k+7)=(3k+6)!/(3k+7)，此时括号内的值为0.\n\n        当3k+7是素数时，由威尔逊定理知(3k+6)! = -1 (mod 3k+7) ，可以得到((3k+6)!+1)/(3k+7)=[(3k+6)!/(3k+7)]+1，此时括号内的值为1.\n\n所以解法就是筛出素数表，然后从0到10^6，判断素数，是素数就等于前一项的值+1，不是素数就直接等于前一项的值，答案保存到一个数组中即可。\n\n威尔逊定理：当( p -1 )! ≡ -1 ( mod p ) 时，p为素数。\n\n证明如下\n\n充分性：\n\n      当p不是素数，那么令p=a*b ，其中1 < a < p-1 ,1 < b < p-1.\n    (1)若a≠b,\n        因为(p-1)!=1*2*...*a*...*b*...*p-1,\n        所以(p-1)!≡ 0 (mod a)        \n               (p-1)!≡ 0 (mod b)\n        可得(p-1)!≡ 0 (mod a*b) ，\n              即 (p-1)!≡ 0 (mod p)\n        与( p -1 )! ≡ -1 ( mod p )  矛盾\n    (2)若a=b\n        因为(p-1)!=1*2*...*a*...*2a*...*p-1.\n        所以(p-1)!≡ 0 (mod a)          \n               (p-1)!≡ 0 (mod 2a)\n        可得(p-1)!≡ 0 (mod a*2a) => (p-1)!≡ 0 (mod a*a) ，\n          即 (p-1)!≡ 0 (mod p)\n        与( p -1 )! ≡ -1 ( mod p )  矛盾\n        因此p只能是素数。\n\n必要性：\n\n        当p为2，( p -1 )! ≡ -1 ( mod p ) 显然成立\n\n        当p为3，( p -1 )! ≡ -1 ( mod p ) 显然成立\n\n        对于p>=5，令M={2,3,4,...,p-2}.\n\n        对于a∈M，令N={a,2*a,3*a,4*a,....(p-2)*a,(p-1)*a}\n\n        令1 <= t1 <= p-1 ,1 <= t2 <= p-1,t1 ≠ t2\n\n        那么t1*a∈N，t2*a∈N。\n\n        若t1*a≡t2*a (mod p) ，那么|t1-t2|*a ≡ 0 (mod p)。\n\n        因为|t1-t2|*a∈N，与N中元素不能被p除尽矛盾。\n\n        所以t1*a≡t2*a不成立。\n\n        那么N中元素对p取模后形成的集合为{1,2,3,4,...,p-1}.\n\n        设x*a ≡ 1 (mod p)。\n\n                当x=1时， x*a=a, 对p取模不为1，所以不成立。\n\n                当x=p-1时，(p-1)*a=p*a-a, 对p取模不为1，所以不成立。\n                当x=a时，a*a≡1 (mod p)，可得(a+1)*(a-1)≡ 0 (mod p),a=1或a=p-1 ，所以不成立。\n\n        综上所述，x,a∈M，并且当a不同时，x也随之不同。\n\n        所以，M集合中每一个元素a都能够找到一个与之配对的x，使得x*a ≡ 1 (mod p).\n        (p-1)!=1*2*3*...p-1\n                  =1*(2*x1)*(3*x3)*...*(p-1)\n        所以， (p-1)!≡1*(p-1)    (mod p)\n        即，(p-1)!≡-1     (mod p) \n\n------\n证明完毕\n[1]:http://acm.bnu.edu.cn/bnuoj/problem_show.php?pid=1093\n","slug":"收集的威尔逊定理证明","published":1,"updated":"2018-05-23T14:45:27.354Z","photos":[],"link":"","_id":"cjhj92bo3001re0vfc00ttmcv","content":"<p>在求解<a href=\"http://acm.bnu.edu.cn/bnuoj/problem_show.php?pid=1093\" target=\"_blank\" rel=\"noopener\">BNUOJ 1093 YAPTCHA</a>时，用到了威尔逊定理。</p>\n<p>在这里收集整理一下证明威尔逊定理的方法。</p>\n<p>先说从题意出发吧。这道题是给定一个式子</p>\n<p>再给若干个n，让你求出Sn的值。其中1&lt;=n&lt;=10^6</p>\n<a id=\"more\"></a>\n<p><img src=\"http://bcs.duapp.com/blogbuk/1362584646_4462.jpg\"><br></p>\n<p>暴力肯定是不行的。所以考虑数论的方法。</p>\n<pre><code>当3k+7不是素数时，可以得到((3k+6)!+1)/(3k+7)=(3k+6)!/(3k+7)，此时括号内的值为0.\n\n当3k+7是素数时，由威尔逊定理知(3k+6)! = -1 (mod 3k+7) ，可以得到((3k+6)!+1)/(3k+7)=[(3k+6)!/(3k+7)]+1，此时括号内的值为1.\n</code></pre><p>所以解法就是筛出素数表，然后从0到10^6，判断素数，是素数就等于前一项的值+1，不是素数就直接等于前一项的值，答案保存到一个数组中即可。</p>\n<p>威尔逊定理：当( p -1 )! ≡ -1 ( mod p ) 时，p为素数。</p>\n<p>证明如下</p>\n<p>充分性：</p>\n<pre><code>  当p不是素数，那么令p=a*b ，其中1 &lt; a &lt; p-1 ,1 &lt; b &lt; p-1.\n(1)若a≠b,\n    因为(p-1)!=1*2*...*a*...*b*...*p-1,\n    所以(p-1)!≡ 0 (mod a)        \n           (p-1)!≡ 0 (mod b)\n    可得(p-1)!≡ 0 (mod a*b) ，\n          即 (p-1)!≡ 0 (mod p)\n    与( p -1 )! ≡ -1 ( mod p )  矛盾\n(2)若a=b\n    因为(p-1)!=1*2*...*a*...*2a*...*p-1.\n    所以(p-1)!≡ 0 (mod a)          \n           (p-1)!≡ 0 (mod 2a)\n    可得(p-1)!≡ 0 (mod a*2a) =&gt; (p-1)!≡ 0 (mod a*a) ，\n      即 (p-1)!≡ 0 (mod p)\n    与( p -1 )! ≡ -1 ( mod p )  矛盾\n    因此p只能是素数。\n</code></pre><p>必要性：</p>\n<pre><code>当p为2，( p -1 )! ≡ -1 ( mod p ) 显然成立\n\n当p为3，( p -1 )! ≡ -1 ( mod p ) 显然成立\n\n对于p&gt;=5，令M={2,3,4,...,p-2}.\n\n对于a∈M，令N={a,2*a,3*a,4*a,....(p-2)*a,(p-1)*a}\n\n令1 &lt;= t1 &lt;= p-1 ,1 &lt;= t2 &lt;= p-1,t1 ≠ t2\n\n那么t1*a∈N，t2*a∈N。\n\n若t1*a≡t2*a (mod p) ，那么|t1-t2|*a ≡ 0 (mod p)。\n\n因为|t1-t2|*a∈N，与N中元素不能被p除尽矛盾。\n\n所以t1*a≡t2*a不成立。\n\n那么N中元素对p取模后形成的集合为{1,2,3,4,...,p-1}.\n\n设x*a ≡ 1 (mod p)。\n\n        当x=1时， x*a=a, 对p取模不为1，所以不成立。\n\n        当x=p-1时，(p-1)*a=p*a-a, 对p取模不为1，所以不成立。\n        当x=a时，a*a≡1 (mod p)，可得(a+1)*(a-1)≡ 0 (mod p),a=1或a=p-1 ，所以不成立。\n\n综上所述，x,a∈M，并且当a不同时，x也随之不同。\n\n所以，M集合中每一个元素a都能够找到一个与之配对的x，使得x*a ≡ 1 (mod p).\n(p-1)!=1*2*3*...p-1\n          =1*(2*x1)*(3*x3)*...*(p-1)\n所以， (p-1)!≡1*(p-1)    (mod p)\n即，(p-1)!≡-1     (mod p) \n</code></pre><hr>\n<p>证明完毕</p>\n","site":{"data":{}},"excerpt":"<p>在求解<a href=\"http://acm.bnu.edu.cn/bnuoj/problem_show.php?pid=1093\" target=\"_blank\" rel=\"noopener\">BNUOJ 1093 YAPTCHA</a>时，用到了威尔逊定理。</p>\n<p>在这里收集整理一下证明威尔逊定理的方法。</p>\n<p>先说从题意出发吧。这道题是给定一个式子</p>\n<p>再给若干个n，让你求出Sn的值。其中1&lt;=n&lt;=10^6</p>","more":"<p><img src=\"http://bcs.duapp.com/blogbuk/1362584646_4462.jpg\"><br></p>\n<p>暴力肯定是不行的。所以考虑数论的方法。</p>\n<pre><code>当3k+7不是素数时，可以得到((3k+6)!+1)/(3k+7)=(3k+6)!/(3k+7)，此时括号内的值为0.\n\n当3k+7是素数时，由威尔逊定理知(3k+6)! = -1 (mod 3k+7) ，可以得到((3k+6)!+1)/(3k+7)=[(3k+6)!/(3k+7)]+1，此时括号内的值为1.\n</code></pre><p>所以解法就是筛出素数表，然后从0到10^6，判断素数，是素数就等于前一项的值+1，不是素数就直接等于前一项的值，答案保存到一个数组中即可。</p>\n<p>威尔逊定理：当( p -1 )! ≡ -1 ( mod p ) 时，p为素数。</p>\n<p>证明如下</p>\n<p>充分性：</p>\n<pre><code>  当p不是素数，那么令p=a*b ，其中1 &lt; a &lt; p-1 ,1 &lt; b &lt; p-1.\n(1)若a≠b,\n    因为(p-1)!=1*2*...*a*...*b*...*p-1,\n    所以(p-1)!≡ 0 (mod a)        \n           (p-1)!≡ 0 (mod b)\n    可得(p-1)!≡ 0 (mod a*b) ，\n          即 (p-1)!≡ 0 (mod p)\n    与( p -1 )! ≡ -1 ( mod p )  矛盾\n(2)若a=b\n    因为(p-1)!=1*2*...*a*...*2a*...*p-1.\n    所以(p-1)!≡ 0 (mod a)          \n           (p-1)!≡ 0 (mod 2a)\n    可得(p-1)!≡ 0 (mod a*2a) =&gt; (p-1)!≡ 0 (mod a*a) ，\n      即 (p-1)!≡ 0 (mod p)\n    与( p -1 )! ≡ -1 ( mod p )  矛盾\n    因此p只能是素数。\n</code></pre><p>必要性：</p>\n<pre><code>当p为2，( p -1 )! ≡ -1 ( mod p ) 显然成立\n\n当p为3，( p -1 )! ≡ -1 ( mod p ) 显然成立\n\n对于p&gt;=5，令M={2,3,4,...,p-2}.\n\n对于a∈M，令N={a,2*a,3*a,4*a,....(p-2)*a,(p-1)*a}\n\n令1 &lt;= t1 &lt;= p-1 ,1 &lt;= t2 &lt;= p-1,t1 ≠ t2\n\n那么t1*a∈N，t2*a∈N。\n\n若t1*a≡t2*a (mod p) ，那么|t1-t2|*a ≡ 0 (mod p)。\n\n因为|t1-t2|*a∈N，与N中元素不能被p除尽矛盾。\n\n所以t1*a≡t2*a不成立。\n\n那么N中元素对p取模后形成的集合为{1,2,3,4,...,p-1}.\n\n设x*a ≡ 1 (mod p)。\n\n        当x=1时， x*a=a, 对p取模不为1，所以不成立。\n\n        当x=p-1时，(p-1)*a=p*a-a, 对p取模不为1，所以不成立。\n        当x=a时，a*a≡1 (mod p)，可得(a+1)*(a-1)≡ 0 (mod p),a=1或a=p-1 ，所以不成立。\n\n综上所述，x,a∈M，并且当a不同时，x也随之不同。\n\n所以，M集合中每一个元素a都能够找到一个与之配对的x，使得x*a ≡ 1 (mod p).\n(p-1)!=1*2*3*...p-1\n          =1*(2*x1)*(3*x3)*...*(p-1)\n所以， (p-1)!≡1*(p-1)    (mod p)\n即，(p-1)!≡-1     (mod p) \n</code></pre><hr>\n<p>证明完毕</p>"},{"layout":"post","title":"普通程序员的日常修行之路","date":"2015-07-22T17:21:00.000Z","comments":1,"reward":true,"_content":"\n作为一个生活在二线城市，普普通通的程序员，工作了一段时间，经常会感觉自己脑子转得比以前慢了。有的时候思考很简单问题，都是会思考很久......\n\n<!-- more -->\n\nCodeForces是一个俄罗斯的网站，是一个举办比赛、做题和交流的平台。每个用户都会有一个Rating评分，通过参加在线比赛可以提高/降低这个积分。以前打ACM比赛的时候会经常玩，但是退役之后就基本没怎么碰了。最近一段时间，在ACM群里看见有讨论CodeForces，正好碰到周末在家休息，于是我管不住手也开始玩了...\n\n结果自然是很惨烈...但是充满挑战的题目，紧绷的思考过程，刺激的SystemTest...依然让我感觉到了乐趣。之前听网上的谁说过，“玩DOTA，再怎么样也要把天梯分打到5000来证明自己玩过这个游戏”。我个人觉得对于我来说，dota2天梯分再高也不如一个CodeForces红名来得更耀眼（其实是深陷鱼塘，天梯分实在是冲不上去了...)\n\n好吧，说这么多其实就是想给博客开一个新的专栏，督促自己不断地学习，活动一下日渐机械化的大脑。对于读者来说，这个专栏主要用来记录一些算法竞赛的解题报告，包括但不限于CodeForces，BestCoder，也算是给博客丰富了一些内容吧。其实我每周的业余时间估计也只能参加最多一次这样的比赛，希望能稳步提高Rating，只希望能不要掉太多分就好。\n\n我以前老早就有这个想法了，但是最后都没有坚持下来。所以这次也是下定决心要把这件事情做起来，作为一个程序员的日常修行。\n","source":"_posts/普通程序员的日常修行之路.md","raw":"---\nlayout: post\ntitle: 普通程序员的日常修行之路\ndate: 2015-7-23 01:21\ncomments: true\nreward: true\ntags:\n    - Life\n---\n\n作为一个生活在二线城市，普普通通的程序员，工作了一段时间，经常会感觉自己脑子转得比以前慢了。有的时候思考很简单问题，都是会思考很久......\n\n<!-- more -->\n\nCodeForces是一个俄罗斯的网站，是一个举办比赛、做题和交流的平台。每个用户都会有一个Rating评分，通过参加在线比赛可以提高/降低这个积分。以前打ACM比赛的时候会经常玩，但是退役之后就基本没怎么碰了。最近一段时间，在ACM群里看见有讨论CodeForces，正好碰到周末在家休息，于是我管不住手也开始玩了...\n\n结果自然是很惨烈...但是充满挑战的题目，紧绷的思考过程，刺激的SystemTest...依然让我感觉到了乐趣。之前听网上的谁说过，“玩DOTA，再怎么样也要把天梯分打到5000来证明自己玩过这个游戏”。我个人觉得对于我来说，dota2天梯分再高也不如一个CodeForces红名来得更耀眼（其实是深陷鱼塘，天梯分实在是冲不上去了...)\n\n好吧，说这么多其实就是想给博客开一个新的专栏，督促自己不断地学习，活动一下日渐机械化的大脑。对于读者来说，这个专栏主要用来记录一些算法竞赛的解题报告，包括但不限于CodeForces，BestCoder，也算是给博客丰富了一些内容吧。其实我每周的业余时间估计也只能参加最多一次这样的比赛，希望能稳步提高Rating，只希望能不要掉太多分就好。\n\n我以前老早就有这个想法了，但是最后都没有坚持下来。所以这次也是下定决心要把这件事情做起来，作为一个程序员的日常修行。\n","slug":"普通程序员的日常修行之路","published":1,"updated":"2018-05-23T14:45:27.384Z","photos":[],"link":"","_id":"cjhj92boc001ve0vfwi0ft6y0","content":"<p>作为一个生活在二线城市，普普通通的程序员，工作了一段时间，经常会感觉自己脑子转得比以前慢了。有的时候思考很简单问题，都是会思考很久……</p>\n<a id=\"more\"></a>\n<p>CodeForces是一个俄罗斯的网站，是一个举办比赛、做题和交流的平台。每个用户都会有一个Rating评分，通过参加在线比赛可以提高/降低这个积分。以前打ACM比赛的时候会经常玩，但是退役之后就基本没怎么碰了。最近一段时间，在ACM群里看见有讨论CodeForces，正好碰到周末在家休息，于是我管不住手也开始玩了…</p>\n<p>结果自然是很惨烈…但是充满挑战的题目，紧绷的思考过程，刺激的SystemTest…依然让我感觉到了乐趣。之前听网上的谁说过，“玩DOTA，再怎么样也要把天梯分打到5000来证明自己玩过这个游戏”。我个人觉得对于我来说，dota2天梯分再高也不如一个CodeForces红名来得更耀眼（其实是深陷鱼塘，天梯分实在是冲不上去了…)</p>\n<p>好吧，说这么多其实就是想给博客开一个新的专栏，督促自己不断地学习，活动一下日渐机械化的大脑。对于读者来说，这个专栏主要用来记录一些算法竞赛的解题报告，包括但不限于CodeForces，BestCoder，也算是给博客丰富了一些内容吧。其实我每周的业余时间估计也只能参加最多一次这样的比赛，希望能稳步提高Rating，只希望能不要掉太多分就好。</p>\n<p>我以前老早就有这个想法了，但是最后都没有坚持下来。所以这次也是下定决心要把这件事情做起来，作为一个程序员的日常修行。</p>\n","site":{"data":{}},"excerpt":"<p>作为一个生活在二线城市，普普通通的程序员，工作了一段时间，经常会感觉自己脑子转得比以前慢了。有的时候思考很简单问题，都是会思考很久……</p>","more":"<p>CodeForces是一个俄罗斯的网站，是一个举办比赛、做题和交流的平台。每个用户都会有一个Rating评分，通过参加在线比赛可以提高/降低这个积分。以前打ACM比赛的时候会经常玩，但是退役之后就基本没怎么碰了。最近一段时间，在ACM群里看见有讨论CodeForces，正好碰到周末在家休息，于是我管不住手也开始玩了…</p>\n<p>结果自然是很惨烈…但是充满挑战的题目，紧绷的思考过程，刺激的SystemTest…依然让我感觉到了乐趣。之前听网上的谁说过，“玩DOTA，再怎么样也要把天梯分打到5000来证明自己玩过这个游戏”。我个人觉得对于我来说，dota2天梯分再高也不如一个CodeForces红名来得更耀眼（其实是深陷鱼塘，天梯分实在是冲不上去了…)</p>\n<p>好吧，说这么多其实就是想给博客开一个新的专栏，督促自己不断地学习，活动一下日渐机械化的大脑。对于读者来说，这个专栏主要用来记录一些算法竞赛的解题报告，包括但不限于CodeForces，BestCoder，也算是给博客丰富了一些内容吧。其实我每周的业余时间估计也只能参加最多一次这样的比赛，希望能稳步提高Rating，只希望能不要掉太多分就好。</p>\n<p>我以前老早就有这个想法了，但是最后都没有坚持下来。所以这次也是下定决心要把这件事情做起来，作为一个程序员的日常修行。</p>"},{"layout":"post","title":"梯度下降算法——机器学习笔记（一）","date":"2014-09-16T17:21:00.000Z","comments":1,"reward":true,"_content":"\n监督式学习(Supervised Learning)，是一个机器学习中的方法，可以由数据(data)中学到或建立一个模式，并依此模式推测新的实例。\n\n通过学习数据的输入(x : Input variables)和输出(y : Output Variables)，建立一个函数h：x->y，通常函数h被称作hypothesis。若函数h的输出是一段连续的值，这种学习问题被称为回归分析(Regression Analysis)；若函数h的输出是推测某种性质，这种学习问题被称为分类问题(Classification Problem)。\n<!-- more -->\n\n假设现有向量 $\\vec x=x_1,x_2,x_3...$作为输入，那么$h_\\theta(x)=\\theta_0+\\theta_1\\times x_1+\\theta_2\\times x_2...$\n\n令$x_0=1$，则有$h_\\theta(x)=\\theta^Tx$\n\n定义 $J(\\theta)=\\frac{1}{2}\\sum_{i=1}^{m}(h_\\theta(x^{(i)})-(y^{(i)}))^2$ 为训练模型和实际输出的差异，要使得训练模型尽可能合理，其实就是要选择合适的 $\\theta$ ，最终使得 $J(\\theta)$ 尽可能小。\n\n梯度下降算法是一种能找到一个 $J(\\theta)$ 最小值的方法。\n\n先随机指定一组系数 $\\theta$，然后进行迭代，通过改变θ的值来减小 $J(\\theta)$，直到 $J(\\theta)$ 不再变小（收敛）。\n\n有以下迭代式 $\\theta_j:=\\theta_j-\\alpha\\frac{\\partial}{\\partial\\theta_j}J(\\theta)$\n\n对$\\theta_j$求偏导，其实是求得\n函数在$\\theta$处的梯度，由方向导数概念可知，沿负梯度方向，函数的下降最快。\n其中$\\alpha$ 是学习速率，这个值设置太大会导致算法在最小值附近大幅度跳动，导致不能正常收敛。\n\n对该式进行化简\n\n$\\theta_j:=\\theta_j+\\alpha(y^{(i)}-h_\\theta(x^{(i)}))x_j^{(i)}$\n\n具体的梯度下降算法分为：批量梯度下降(batch gradient descent)和随机梯度下降（stochastic gradient descent）。\n\n批量梯度下降在一轮迭代过程中，需要遍历完所有数据，计算出每个 $\\theta$ 的更新值，再对 $\\theta$ 进行更新：\n\n$Repeat\\ until\\ convergence${\n\n$\\theta_j:=\\theta_j+\\alpha\\sum_{i=1}^m(y^{(i)}-h_\\theta(x^{(i)}))x_j^{(i)} $   \n\n(for every j)\n\n}\n\n令T为总的迭代次数，则该算法的时间复杂度是$O(T\\times m\\times n)$\n\n其中n为feature的数量，m为输入的数量。\n\n随机梯度下降在一轮迭代过程中，每遍历一条训练数据，就更新一次 $\\theta$。在数据量大的时候通常随机梯度下降会比批量梯度下降的收敛速度更快，即T的值会小很多：\n\n$Repeat\\ until\\ convergence${\n\n$for\\ i=1\\ to\\ m:$ \n\n$\\theta_j:=\\theta_j+\\alpha\\(y^{(i)}-h_\\theta(x^{(i)}))x_j^{(i)} $\n\n(for every j)\n\n}\n\n[批量梯度下降算法c++实现代码][1]\n[1]:https://github.com/plusplus7/MachineLearning/blob/master/src/gradient_descent/batch_gradient_descent.cc\n\n[随机梯度下降算法c++实现代码][2]\n[2]:https://github.com/plusplus7/MachineLearning/blob/master/src/gradient_descent/stochastic_gradient_descent.cc\n","source":"_posts/梯度下降算法——机器学习笔记（一）.md","raw":"---\nlayout: post\ntitle: 梯度下降算法——机器学习笔记（一）\ndate: 2014-9-17 01:21\ncomments: true\nreward: true\ntags:\n    - Life\n---\n\n监督式学习(Supervised Learning)，是一个机器学习中的方法，可以由数据(data)中学到或建立一个模式，并依此模式推测新的实例。\n\n通过学习数据的输入(x : Input variables)和输出(y : Output Variables)，建立一个函数h：x->y，通常函数h被称作hypothesis。若函数h的输出是一段连续的值，这种学习问题被称为回归分析(Regression Analysis)；若函数h的输出是推测某种性质，这种学习问题被称为分类问题(Classification Problem)。\n<!-- more -->\n\n假设现有向量 $\\vec x=x_1,x_2,x_3...$作为输入，那么$h_\\theta(x)=\\theta_0+\\theta_1\\times x_1+\\theta_2\\times x_2...$\n\n令$x_0=1$，则有$h_\\theta(x)=\\theta^Tx$\n\n定义 $J(\\theta)=\\frac{1}{2}\\sum_{i=1}^{m}(h_\\theta(x^{(i)})-(y^{(i)}))^2$ 为训练模型和实际输出的差异，要使得训练模型尽可能合理，其实就是要选择合适的 $\\theta$ ，最终使得 $J(\\theta)$ 尽可能小。\n\n梯度下降算法是一种能找到一个 $J(\\theta)$ 最小值的方法。\n\n先随机指定一组系数 $\\theta$，然后进行迭代，通过改变θ的值来减小 $J(\\theta)$，直到 $J(\\theta)$ 不再变小（收敛）。\n\n有以下迭代式 $\\theta_j:=\\theta_j-\\alpha\\frac{\\partial}{\\partial\\theta_j}J(\\theta)$\n\n对$\\theta_j$求偏导，其实是求得\n函数在$\\theta$处的梯度，由方向导数概念可知，沿负梯度方向，函数的下降最快。\n其中$\\alpha$ 是学习速率，这个值设置太大会导致算法在最小值附近大幅度跳动，导致不能正常收敛。\n\n对该式进行化简\n\n$\\theta_j:=\\theta_j+\\alpha(y^{(i)}-h_\\theta(x^{(i)}))x_j^{(i)}$\n\n具体的梯度下降算法分为：批量梯度下降(batch gradient descent)和随机梯度下降（stochastic gradient descent）。\n\n批量梯度下降在一轮迭代过程中，需要遍历完所有数据，计算出每个 $\\theta$ 的更新值，再对 $\\theta$ 进行更新：\n\n$Repeat\\ until\\ convergence${\n\n$\\theta_j:=\\theta_j+\\alpha\\sum_{i=1}^m(y^{(i)}-h_\\theta(x^{(i)}))x_j^{(i)} $   \n\n(for every j)\n\n}\n\n令T为总的迭代次数，则该算法的时间复杂度是$O(T\\times m\\times n)$\n\n其中n为feature的数量，m为输入的数量。\n\n随机梯度下降在一轮迭代过程中，每遍历一条训练数据，就更新一次 $\\theta$。在数据量大的时候通常随机梯度下降会比批量梯度下降的收敛速度更快，即T的值会小很多：\n\n$Repeat\\ until\\ convergence${\n\n$for\\ i=1\\ to\\ m:$ \n\n$\\theta_j:=\\theta_j+\\alpha\\(y^{(i)}-h_\\theta(x^{(i)}))x_j^{(i)} $\n\n(for every j)\n\n}\n\n[批量梯度下降算法c++实现代码][1]\n[1]:https://github.com/plusplus7/MachineLearning/blob/master/src/gradient_descent/batch_gradient_descent.cc\n\n[随机梯度下降算法c++实现代码][2]\n[2]:https://github.com/plusplus7/MachineLearning/blob/master/src/gradient_descent/stochastic_gradient_descent.cc\n","slug":"梯度下降算法——机器学习笔记（一）","published":1,"updated":"2018-05-23T14:45:27.412Z","photos":[],"link":"","_id":"cjhj92bog001ye0vfrnzkew1f","content":"<p>监督式学习(Supervised Learning)，是一个机器学习中的方法，可以由数据(data)中学到或建立一个模式，并依此模式推测新的实例。</p>\n<p>通过学习数据的输入(x : Input variables)和输出(y : Output Variables)，建立一个函数h：x-&gt;y，通常函数h被称作hypothesis。若函数h的输出是一段连续的值，这种学习问题被称为回归分析(Regression Analysis)；若函数h的输出是推测某种性质，这种学习问题被称为分类问题(Classification Problem)。<br><a id=\"more\"></a></p>\n<p>假设现有向量 $\\vec x=x_1,x_2,x<em>3…$作为输入，那么$h</em>\\theta(x)=\\theta_0+\\theta_1\\times x_1+\\theta_2\\times x_2…$</p>\n<p>令$x<em>0=1$，则有$h</em>\\theta(x)=\\theta^Tx$</p>\n<p>定义 $J(\\theta)=\\frac{1}{2}\\sum<em>{i=1}^{m}(h</em>\\theta(x^{(i)})-(y^{(i)}))^2$ 为训练模型和实际输出的差异，要使得训练模型尽可能合理，其实就是要选择合适的 $\\theta$ ，最终使得 $J(\\theta)$ 尽可能小。</p>\n<p>梯度下降算法是一种能找到一个 $J(\\theta)$ 最小值的方法。</p>\n<p>先随机指定一组系数 $\\theta$，然后进行迭代，通过改变θ的值来减小 $J(\\theta)$，直到 $J(\\theta)$ 不再变小（收敛）。</p>\n<p>有以下迭代式 $\\theta_j:=\\theta_j-\\alpha\\frac{\\partial}{\\partial\\theta_j}J(\\theta)$</p>\n<p>对$\\theta_j$求偏导，其实是求得<br>函数在$\\theta$处的梯度，由方向导数概念可知，沿负梯度方向，函数的下降最快。<br>其中$\\alpha$ 是学习速率，这个值设置太大会导致算法在最小值附近大幅度跳动，导致不能正常收敛。</p>\n<p>对该式进行化简</p>\n<p>$\\theta_j:=\\theta<em>j+\\alpha(y^{(i)}-h</em>\\theta(x^{(i)}))x_j^{(i)}$</p>\n<p>具体的梯度下降算法分为：批量梯度下降(batch gradient descent)和随机梯度下降（stochastic gradient descent）。</p>\n<p>批量梯度下降在一轮迭代过程中，需要遍历完所有数据，计算出每个 $\\theta$ 的更新值，再对 $\\theta$ 进行更新：</p>\n<p>$Repeat\\ until\\ convergence${</p>\n<p>$\\theta_j:=\\theta<em>j+\\alpha\\sum</em>{i=1}^m(y^{(i)}-h_\\theta(x^{(i)}))x_j^{(i)} $   </p>\n<p>(for every j)</p>\n<p>}</p>\n<p>令T为总的迭代次数，则该算法的时间复杂度是$O(T\\times m\\times n)$</p>\n<p>其中n为feature的数量，m为输入的数量。</p>\n<p>随机梯度下降在一轮迭代过程中，每遍历一条训练数据，就更新一次 $\\theta$。在数据量大的时候通常随机梯度下降会比批量梯度下降的收敛速度更快，即T的值会小很多：</p>\n<p>$Repeat\\ until\\ convergence${</p>\n<p>$for\\ i=1\\ to\\ m:$ </p>\n<p>$\\theta_j:=\\theta<em>j+\\alpha(y^{(i)}-h</em>\\theta(x^{(i)}))x_j^{(i)} $</p>\n<p>(for every j)</p>\n<p>}</p>\n<p><a href=\"https://github.com/plusplus7/MachineLearning/blob/master/src/gradient_descent/batch_gradient_descent.cc\" target=\"_blank\" rel=\"noopener\">批量梯度下降算法c++实现代码</a></p>\n<p><a href=\"https://github.com/plusplus7/MachineLearning/blob/master/src/gradient_descent/stochastic_gradient_descent.cc\" target=\"_blank\" rel=\"noopener\">随机梯度下降算法c++实现代码</a></p>\n","site":{"data":{}},"excerpt":"<p>监督式学习(Supervised Learning)，是一个机器学习中的方法，可以由数据(data)中学到或建立一个模式，并依此模式推测新的实例。</p>\n<p>通过学习数据的输入(x : Input variables)和输出(y : Output Variables)，建立一个函数h：x-&gt;y，通常函数h被称作hypothesis。若函数h的输出是一段连续的值，这种学习问题被称为回归分析(Regression Analysis)；若函数h的输出是推测某种性质，这种学习问题被称为分类问题(Classification Problem)。<br>","more":"</p>\n<p>假设现有向量 $\\vec x=x_1,x_2,x<em>3…$作为输入，那么$h</em>\\theta(x)=\\theta_0+\\theta_1\\times x_1+\\theta_2\\times x_2…$</p>\n<p>令$x<em>0=1$，则有$h</em>\\theta(x)=\\theta^Tx$</p>\n<p>定义 $J(\\theta)=\\frac{1}{2}\\sum<em>{i=1}^{m}(h</em>\\theta(x^{(i)})-(y^{(i)}))^2$ 为训练模型和实际输出的差异，要使得训练模型尽可能合理，其实就是要选择合适的 $\\theta$ ，最终使得 $J(\\theta)$ 尽可能小。</p>\n<p>梯度下降算法是一种能找到一个 $J(\\theta)$ 最小值的方法。</p>\n<p>先随机指定一组系数 $\\theta$，然后进行迭代，通过改变θ的值来减小 $J(\\theta)$，直到 $J(\\theta)$ 不再变小（收敛）。</p>\n<p>有以下迭代式 $\\theta_j:=\\theta_j-\\alpha\\frac{\\partial}{\\partial\\theta_j}J(\\theta)$</p>\n<p>对$\\theta_j$求偏导，其实是求得<br>函数在$\\theta$处的梯度，由方向导数概念可知，沿负梯度方向，函数的下降最快。<br>其中$\\alpha$ 是学习速率，这个值设置太大会导致算法在最小值附近大幅度跳动，导致不能正常收敛。</p>\n<p>对该式进行化简</p>\n<p>$\\theta_j:=\\theta<em>j+\\alpha(y^{(i)}-h</em>\\theta(x^{(i)}))x_j^{(i)}$</p>\n<p>具体的梯度下降算法分为：批量梯度下降(batch gradient descent)和随机梯度下降（stochastic gradient descent）。</p>\n<p>批量梯度下降在一轮迭代过程中，需要遍历完所有数据，计算出每个 $\\theta$ 的更新值，再对 $\\theta$ 进行更新：</p>\n<p>$Repeat\\ until\\ convergence${</p>\n<p>$\\theta_j:=\\theta<em>j+\\alpha\\sum</em>{i=1}^m(y^{(i)}-h_\\theta(x^{(i)}))x_j^{(i)} $   </p>\n<p>(for every j)</p>\n<p>}</p>\n<p>令T为总的迭代次数，则该算法的时间复杂度是$O(T\\times m\\times n)$</p>\n<p>其中n为feature的数量，m为输入的数量。</p>\n<p>随机梯度下降在一轮迭代过程中，每遍历一条训练数据，就更新一次 $\\theta$。在数据量大的时候通常随机梯度下降会比批量梯度下降的收敛速度更快，即T的值会小很多：</p>\n<p>$Repeat\\ until\\ convergence${</p>\n<p>$for\\ i=1\\ to\\ m:$ </p>\n<p>$\\theta_j:=\\theta<em>j+\\alpha(y^{(i)}-h</em>\\theta(x^{(i)}))x_j^{(i)} $</p>\n<p>(for every j)</p>\n<p>}</p>\n<p><a href=\"https://github.com/plusplus7/MachineLearning/blob/master/src/gradient_descent/batch_gradient_descent.cc\" target=\"_blank\" rel=\"noopener\">批量梯度下降算法c++实现代码</a></p>\n<p><a href=\"https://github.com/plusplus7/MachineLearning/blob/master/src/gradient_descent/stochastic_gradient_descent.cc\" target=\"_blank\" rel=\"noopener\">随机梯度下降算法c++实现代码</a></p>"},{"layout":"post","title":"求两个随机正整数互质的概率","date":"2014-09-16T17:21:00.000Z","comments":1,"reward":true,"_content":"\n随机选取两个正整数，如(1,1230102),(1344,12319045)...他们互质的概率是\n$$\\frac{6}{\\pi^2}$$\n\n<!-- more -->\n\n证明：\n      \n$$令a_i为素数数列，即a_i={2,3,5,7...}$$\n$$设x,y为一对随机正整数$$\n$$\\because 能整除a_i的数总是每隔a_i个出现一次$$\n$$\\therefore x能整除a_i的概率是\\frac{1}{a_i}$$\n$$同理，y能整除a_i的概率同样是\\frac{1}{a_i}$$\n$$x与y都能整除a_i的概率是\\frac{1}{a_i^2}$$\n$$x与y不都能整除a_i的概率是1-\\frac{1}{a_i^2}$$\n$$显然，x与y互质的概率是\\prod_{i=1}^{\\infty}1-\\frac{1}{a_i^2}$$\n$$\\prod_{i=1}^{\\infty}1-\\frac{1}{a_i^2}=\\frac{1}{\\prod_{i=1}^{\\infty}\\frac{1}{1-\\frac{1}{a_i^2}}}$$\n$$\\because \\prod_{i=1}^\\infty{\\sum_{j=0}^{\\infty}\\frac{1}{a_i^{2j}}}=\\prod_{i=1}^{\\infty}\\frac{1}{1-\\frac{1}{a_i^2}}$$\n$$\\therefore \\prod_{i=1}^{\\infty}1-\\frac{1}{a_i^2}=\\frac{1}{\\prod_{i=1}^\\infty{\\sum_{j=0}^{\\infty}\\frac{1}{a_i^{2j}}}}$$\n$$=\\frac{1}{(1+\\frac{1}{2^2}+\\frac{1}{2^4}+...)(1+\\frac{1}{3^2}+\\frac{1}{3^4}+...)(1+\\frac{1}{5^2}+\\frac{1}{5^4}+...)...}$$\n$$根据正整数的唯一分解定理$$\n$$可得，原式=\\frac{1}{1+\\frac{1}{2^2}+\\frac{1}{3^2}+\\frac{1}{4^2}+\\frac{1}{5^2}+...}$$\n$$即\\frac{1}{\\sum_{i=1}^{\\infty}\\frac{1}{i^2}}$$\n$$\\sum_{i=1}^{\\infty}\\frac{1}{i^2}是黎曼ζ函数ζ(s)在s=2时的情况$$\n$$其值为\\frac{\\pi^2}{6}$$\n$$原式=\\frac{6}{\\pi^2}$$\n$$更多关于ζ(2)=\\frac{\\pi^2}{6}的严密证明方法以及参考过的资料:$$\n[ζ(2)=π2/6的十四种证明][1]\n\n[巴塞尔问题][2]\n\n[OEIS数列][3]\n[1]:http://empslocal.ex.ac.uk/people/staff/rjchapma/etc/zeta2.pdf\n[2]:http://zh.wikipedia.org/wiki/%E5%B7%B4%E5%A1%9E%E5%B0%94%E9%97%AE%E9%A2%98\n[3]:http://oeis.org/A013661\n","source":"_posts/求两个随机正整数互质的概率.md","raw":"---\nlayout: post\ntitle: 求两个随机正整数互质的概率\ndate: 2014-9-17 01:21\ncomments: true\nreward: true\ntags:\n    - Math\n---\n\n随机选取两个正整数，如(1,1230102),(1344,12319045)...他们互质的概率是\n$$\\frac{6}{\\pi^2}$$\n\n<!-- more -->\n\n证明：\n      \n$$令a_i为素数数列，即a_i={2,3,5,7...}$$\n$$设x,y为一对随机正整数$$\n$$\\because 能整除a_i的数总是每隔a_i个出现一次$$\n$$\\therefore x能整除a_i的概率是\\frac{1}{a_i}$$\n$$同理，y能整除a_i的概率同样是\\frac{1}{a_i}$$\n$$x与y都能整除a_i的概率是\\frac{1}{a_i^2}$$\n$$x与y不都能整除a_i的概率是1-\\frac{1}{a_i^2}$$\n$$显然，x与y互质的概率是\\prod_{i=1}^{\\infty}1-\\frac{1}{a_i^2}$$\n$$\\prod_{i=1}^{\\infty}1-\\frac{1}{a_i^2}=\\frac{1}{\\prod_{i=1}^{\\infty}\\frac{1}{1-\\frac{1}{a_i^2}}}$$\n$$\\because \\prod_{i=1}^\\infty{\\sum_{j=0}^{\\infty}\\frac{1}{a_i^{2j}}}=\\prod_{i=1}^{\\infty}\\frac{1}{1-\\frac{1}{a_i^2}}$$\n$$\\therefore \\prod_{i=1}^{\\infty}1-\\frac{1}{a_i^2}=\\frac{1}{\\prod_{i=1}^\\infty{\\sum_{j=0}^{\\infty}\\frac{1}{a_i^{2j}}}}$$\n$$=\\frac{1}{(1+\\frac{1}{2^2}+\\frac{1}{2^4}+...)(1+\\frac{1}{3^2}+\\frac{1}{3^4}+...)(1+\\frac{1}{5^2}+\\frac{1}{5^4}+...)...}$$\n$$根据正整数的唯一分解定理$$\n$$可得，原式=\\frac{1}{1+\\frac{1}{2^2}+\\frac{1}{3^2}+\\frac{1}{4^2}+\\frac{1}{5^2}+...}$$\n$$即\\frac{1}{\\sum_{i=1}^{\\infty}\\frac{1}{i^2}}$$\n$$\\sum_{i=1}^{\\infty}\\frac{1}{i^2}是黎曼ζ函数ζ(s)在s=2时的情况$$\n$$其值为\\frac{\\pi^2}{6}$$\n$$原式=\\frac{6}{\\pi^2}$$\n$$更多关于ζ(2)=\\frac{\\pi^2}{6}的严密证明方法以及参考过的资料:$$\n[ζ(2)=π2/6的十四种证明][1]\n\n[巴塞尔问题][2]\n\n[OEIS数列][3]\n[1]:http://empslocal.ex.ac.uk/people/staff/rjchapma/etc/zeta2.pdf\n[2]:http://zh.wikipedia.org/wiki/%E5%B7%B4%E5%A1%9E%E5%B0%94%E9%97%AE%E9%A2%98\n[3]:http://oeis.org/A013661\n","slug":"求两个随机正整数互质的概率","published":1,"updated":"2018-05-23T14:45:27.442Z","photos":[],"link":"","_id":"cjhj92bok0022e0vfi4mi9vox","content":"<p>随机选取两个正整数，如(1,1230102),(1344,12319045)…他们互质的概率是<br>$$\\frac{6}{\\pi^2}$$</p>\n<a id=\"more\"></a>\n<p>证明：</p>\n<p>$$令a_i为素数数列，即a_i={2,3,5,7…}$$<br>$$设x,y为一对随机正整数$$<br>$$\\because 能整除a_i的数总是每隔a_i个出现一次$$<br>$$\\therefore x能整除a_i的概率是\\frac{1}{a_i}$$<br>$$同理，y能整除a_i的概率同样是\\frac{1}{a_i}$$<br>$$x与y都能整除a_i的概率是\\frac{1}{a_i^2}$$<br>$$x与y不都能整除a_i的概率是1-\\frac{1}{a<em>i^2}$$<br>$$显然，x与y互质的概率是\\prod</em>{i=1}^{\\infty}1-\\frac{1}{a<em>i^2}$$<br>$$\\prod</em>{i=1}^{\\infty}1-\\frac{1}{a<em>i^2}=\\frac{1}{\\prod</em>{i=1}^{\\infty}\\frac{1}{1-\\frac{1}{a<em>i^2}}}$$<br>$$\\because \\prod</em>{i=1}^\\infty{\\sum_{j=0}^{\\infty}\\frac{1}{a<em>i^{2j}}}=\\prod</em>{i=1}^{\\infty}\\frac{1}{1-\\frac{1}{a<em>i^2}}$$<br>$$\\therefore \\prod</em>{i=1}^{\\infty}1-\\frac{1}{a<em>i^2}=\\frac{1}{\\prod</em>{i=1}^\\infty{\\sum_{j=0}^{\\infty}\\frac{1}{a<em>i^{2j}}}}$$<br>$$=\\frac{1}{(1+\\frac{1}{2^2}+\\frac{1}{2^4}+…)(1+\\frac{1}{3^2}+\\frac{1}{3^4}+…)(1+\\frac{1}{5^2}+\\frac{1}{5^4}+…)…}$$<br>$$根据正整数的唯一分解定理$$<br>$$可得，原式=\\frac{1}{1+\\frac{1}{2^2}+\\frac{1}{3^2}+\\frac{1}{4^2}+\\frac{1}{5^2}+…}$$<br>$$即\\frac{1}{\\sum</em>{i=1}^{\\infty}\\frac{1}{i^2}}$$<br>$$\\sum_{i=1}^{\\infty}\\frac{1}{i^2}是黎曼ζ函数ζ(s)在s=2时的情况$$<br>$$其值为\\frac{\\pi^2}{6}$$<br>$$原式=\\frac{6}{\\pi^2}$$<br>$$更多关于ζ(2)=\\frac{\\pi^2}{6}的严密证明方法以及参考过的资料:$$<br><a href=\"http://empslocal.ex.ac.uk/people/staff/rjchapma/etc/zeta2.pdf\" target=\"_blank\" rel=\"noopener\">ζ(2)=π2/6的十四种证明</a></p>\n<p><a href=\"http://zh.wikipedia.org/wiki/%E5%B7%B4%E5%A1%9E%E5%B0%94%E9%97%AE%E9%A2%98\" target=\"_blank\" rel=\"noopener\">巴塞尔问题</a></p>\n<p><a href=\"http://oeis.org/A013661\" target=\"_blank\" rel=\"noopener\">OEIS数列</a></p>\n","site":{"data":{}},"excerpt":"<p>随机选取两个正整数，如(1,1230102),(1344,12319045)…他们互质的概率是<br>$$\\frac{6}{\\pi^2}$$</p>","more":"<p>证明：</p>\n<p>$$令a_i为素数数列，即a_i={2,3,5,7…}$$<br>$$设x,y为一对随机正整数$$<br>$$\\because 能整除a_i的数总是每隔a_i个出现一次$$<br>$$\\therefore x能整除a_i的概率是\\frac{1}{a_i}$$<br>$$同理，y能整除a_i的概率同样是\\frac{1}{a_i}$$<br>$$x与y都能整除a_i的概率是\\frac{1}{a_i^2}$$<br>$$x与y不都能整除a_i的概率是1-\\frac{1}{a<em>i^2}$$<br>$$显然，x与y互质的概率是\\prod</em>{i=1}^{\\infty}1-\\frac{1}{a<em>i^2}$$<br>$$\\prod</em>{i=1}^{\\infty}1-\\frac{1}{a<em>i^2}=\\frac{1}{\\prod</em>{i=1}^{\\infty}\\frac{1}{1-\\frac{1}{a<em>i^2}}}$$<br>$$\\because \\prod</em>{i=1}^\\infty{\\sum_{j=0}^{\\infty}\\frac{1}{a<em>i^{2j}}}=\\prod</em>{i=1}^{\\infty}\\frac{1}{1-\\frac{1}{a<em>i^2}}$$<br>$$\\therefore \\prod</em>{i=1}^{\\infty}1-\\frac{1}{a<em>i^2}=\\frac{1}{\\prod</em>{i=1}^\\infty{\\sum_{j=0}^{\\infty}\\frac{1}{a<em>i^{2j}}}}$$<br>$$=\\frac{1}{(1+\\frac{1}{2^2}+\\frac{1}{2^4}+…)(1+\\frac{1}{3^2}+\\frac{1}{3^4}+…)(1+\\frac{1}{5^2}+\\frac{1}{5^4}+…)…}$$<br>$$根据正整数的唯一分解定理$$<br>$$可得，原式=\\frac{1}{1+\\frac{1}{2^2}+\\frac{1}{3^2}+\\frac{1}{4^2}+\\frac{1}{5^2}+…}$$<br>$$即\\frac{1}{\\sum</em>{i=1}^{\\infty}\\frac{1}{i^2}}$$<br>$$\\sum_{i=1}^{\\infty}\\frac{1}{i^2}是黎曼ζ函数ζ(s)在s=2时的情况$$<br>$$其值为\\frac{\\pi^2}{6}$$<br>$$原式=\\frac{6}{\\pi^2}$$<br>$$更多关于ζ(2)=\\frac{\\pi^2}{6}的严密证明方法以及参考过的资料:$$<br><a href=\"http://empslocal.ex.ac.uk/people/staff/rjchapma/etc/zeta2.pdf\" target=\"_blank\" rel=\"noopener\">ζ(2)=π2/6的十四种证明</a></p>\n<p><a href=\"http://zh.wikipedia.org/wiki/%E5%B7%B4%E5%A1%9E%E5%B0%94%E9%97%AE%E9%A2%98\" target=\"_blank\" rel=\"noopener\">巴塞尔问题</a></p>\n<p><a href=\"http://oeis.org/A013661\" target=\"_blank\" rel=\"noopener\">OEIS数列</a></p>"},{"layout":"post","title":"跳点寻路算法的学习笔记","date":"2017-05-16T17:21:00.000Z","comments":1,"reward":true,"_content":"\n跳点寻路算法（Jump Point Search），是一种在线的高效寻路算法。\n\n其精髓在于“跳过”一些明显不必经过的路，抽象地说，就是在搜索时大量减掉明显无用的分支，使得朴素的搜索过程变得高效。正如刚刚说的那样，Jump Point Search（简称JPS）是一个在线（Online）算法，所以无需预处理，而且运行时不占用空间。最美妙的是，JPS可以和现有的搜索加速技术（启发式，记忆化等）结合，爆发出惊人的威力。\n\n        在拜读了相当的论文，资料后，今天终于尝试着把代码写出来了。。。    \n        这篇博文算是对这么多天学习的一个总结和笔记吧。\n        如有谬误，欢迎指正。\n\n<!-- more -->\n\n## 一. 从游戏中引出的问题 \n（本节以下内容略微有些扯淡。。）\n\n以前老喜欢玩DotA/LoL，现在也喜欢玩。玩着玩着就有了一个问题：\n\n        在DotA/LoL游戏中操作一个英雄，从 泉水处 出发去打 肉山/大龙。英雄是按照什么样的路径行走的呢？最近的路径？还是最安全的路径？当然不是最安全的路径了，鬼知道会不会有一群人 开了雾/蹲草丛 来gank你。\n        所以我们假设是一条最近的路径，程序是怎么算出这样一条路径的呢？\n\n## 二. 抽象化的模型\n假设游戏地图是一个m*n的方格，地图中有些地方是障碍，问题就是求一条从A点到B点最近的路径。如图：\n\n<img src=\"https://qiniu.plusplus7.com/jps_algorithm/a-b.png-fullpercent\" width=\"300\" />\n\n有很多经典的算法可以用来处理这样的问题。\n\n    广度优先搜索（BFS），朴素的盲目搜索算法，编码难度低，实现简单。\n    深度优先搜索（DFS），较BFS节省空间，但速度更慢，且非常不稳定（有时会过深地陷入某个错误分支）\n    Dijkstra算法，图论算法，有建图空间开销，速度不稳定，在数据量小的时候，可能还不如盲目搜索。\n    双向广度搜索，BFS升级版，空间开销更大，编码难度上一个档次，实现复杂。\n    A*启发式搜索，BFS的启发式版本，速度相当快。但也会有掉进某个“坑”而浪费时间的情况，就常见情况来说，速度非常理想。\n    IDA*启发式搜索，DFS的启发式版本，速度相当快。比A*好的是，保证了速度的同时减少了空间开销，且编码难度降低。\n\n由于A*搜索和接下来的内容有关，所以这里简单介绍一下A*的原理。\n\nA*在朴素BFS之上，添加了启发式。就好比是，BFS就像是一个人在迷宫里寻找出口，他老老实实地挨着挨着找。加上启发式，就像是有其他人在出口处放置了一台大功率的喇叭放着《最炫XX风》，于是这个人就不老老实实地找了，他可以听着声音判断自己是不是离出口越来越近了，然后从最近的开始找。\n\n因为我们知道B点的坐标，不知道A到B的路径。我们完全可以根据当前所在的坐标以及B点坐标来判断一下，当前搜索的节点是不是离B点更近了。引入等式：\n$$f(x)=g(x)+h(x)$$\ng(x) 表示从A点到x点所走过的距离。g值是在搜索时可以记录的。\n\nh(x) 表示当前所在的x点到B点的估算距离。h值需要构造一个估价函数进行计算。\n\nf(x) 表示从A到B的估算距离。 \n\n在进行BFS的同时，计算f值，并且在进行状态转移时，选择当前f值最小的，即选估计路径最短的一条分支进行搜索。如果走到一个状态不同f值，以前遇到过并且还没有被扩展，那么选择一个f值最小的更新就行。\n\n虽然看起来好像并没有增加太多的东西，但是实现起来需要讲究的地方很多。\n\n* 估价函数的选取。估价函数会直接影响搜索效率，若设计的不合理（f函数不单调递增），A*效率会降低到和BFS一个档次。\n\n* 按照刚刚增加的东西，要在搜索时选取f值最小的进行扩展，就需要用一个小根堆来实现这一点。遇到同一个状态不同f值时，选择最小的更新，需要用一个排序二叉树来完成。\n\n所以，真正实现起来一个正确高效的A*算法还是有一些难度。\n## 三. 让搜索“跳”起来\nA*寻路已经可以很出色地完成我们提出的问题了。在此之上，JPS算法能够让A*寻路更上一个档次。\n\n在搜索中，有部分节点的扩展是无用的。如图：\n\n<img src=\"https://qiniu.plusplus7.com/jps_algorithm/jps_natural.png-fullpercent\"/>\n\n当前按照箭头方向搜索到了x点，至此所有灰色节点都是无用的，因为总是存在一条最近路径可以从x点的父节点出发，不经过x点，而最终到达灰色节点。\n\n但有一些点比较特殊。如图：\n\n<img src=\"https://qiniu.plusplus7.com/jps_algorithm/jps_forced.png-fullpercent\"/>\n\n所有灰色节点都是无用的，而图中被红圈圈住的点，是不存在一条不经过x点的最近路径可以从x点的父节点出发而到达。而x点就是一条特殊的点，因为有要到达x点的某些后继节点，必须要经过x点，否则就不是最近路径。\n\n所以，JPS实际上是在搜索中寻找跳点的后继节点（jump point successor）而转移状态，而不是直接从当前节点进行扩展。JPS跳过了部分的无用节点，保留关键的“跳点（jump point）”，令A*在搜索时减少了扩展的节点数， 从而达到加速的效果。\n\n## 四. 查阅过的资料和代码\n\n代码实现使用c++，功能基本实现。[代码地址][2]\n\n为了保证算法正确，随机生成了20组数据，在关键地方输出中间变量，然后与github上这位大神的 [js版本][1]进行对拍结果一致。\n\n代码风格不太好，而且没有注释......\n\n如有任何错误，欢迎指正。\n\n电子邮箱：JackieDeng.cn@gmail.com\n\n[1]:https://github.com/qiao/PathFinding.js/blob/master/src/finders/JumpPointFinder.js\n[2]:https://github.com/plusplus7/JumpPointSearchAlgorithm/blob/master/main.cpp\n\n\n","source":"_posts/跳点寻路算法的学习笔记.md","raw":"---\nlayout: post\ntitle: 跳点寻路算法的学习笔记\ndate: 2017-5-17 01:21\ncomments: true\nreward: true\ntags:\n    - Algorithm\n---\n\n跳点寻路算法（Jump Point Search），是一种在线的高效寻路算法。\n\n其精髓在于“跳过”一些明显不必经过的路，抽象地说，就是在搜索时大量减掉明显无用的分支，使得朴素的搜索过程变得高效。正如刚刚说的那样，Jump Point Search（简称JPS）是一个在线（Online）算法，所以无需预处理，而且运行时不占用空间。最美妙的是，JPS可以和现有的搜索加速技术（启发式，记忆化等）结合，爆发出惊人的威力。\n\n        在拜读了相当的论文，资料后，今天终于尝试着把代码写出来了。。。    \n        这篇博文算是对这么多天学习的一个总结和笔记吧。\n        如有谬误，欢迎指正。\n\n<!-- more -->\n\n## 一. 从游戏中引出的问题 \n（本节以下内容略微有些扯淡。。）\n\n以前老喜欢玩DotA/LoL，现在也喜欢玩。玩着玩着就有了一个问题：\n\n        在DotA/LoL游戏中操作一个英雄，从 泉水处 出发去打 肉山/大龙。英雄是按照什么样的路径行走的呢？最近的路径？还是最安全的路径？当然不是最安全的路径了，鬼知道会不会有一群人 开了雾/蹲草丛 来gank你。\n        所以我们假设是一条最近的路径，程序是怎么算出这样一条路径的呢？\n\n## 二. 抽象化的模型\n假设游戏地图是一个m*n的方格，地图中有些地方是障碍，问题就是求一条从A点到B点最近的路径。如图：\n\n<img src=\"https://qiniu.plusplus7.com/jps_algorithm/a-b.png-fullpercent\" width=\"300\" />\n\n有很多经典的算法可以用来处理这样的问题。\n\n    广度优先搜索（BFS），朴素的盲目搜索算法，编码难度低，实现简单。\n    深度优先搜索（DFS），较BFS节省空间，但速度更慢，且非常不稳定（有时会过深地陷入某个错误分支）\n    Dijkstra算法，图论算法，有建图空间开销，速度不稳定，在数据量小的时候，可能还不如盲目搜索。\n    双向广度搜索，BFS升级版，空间开销更大，编码难度上一个档次，实现复杂。\n    A*启发式搜索，BFS的启发式版本，速度相当快。但也会有掉进某个“坑”而浪费时间的情况，就常见情况来说，速度非常理想。\n    IDA*启发式搜索，DFS的启发式版本，速度相当快。比A*好的是，保证了速度的同时减少了空间开销，且编码难度降低。\n\n由于A*搜索和接下来的内容有关，所以这里简单介绍一下A*的原理。\n\nA*在朴素BFS之上，添加了启发式。就好比是，BFS就像是一个人在迷宫里寻找出口，他老老实实地挨着挨着找。加上启发式，就像是有其他人在出口处放置了一台大功率的喇叭放着《最炫XX风》，于是这个人就不老老实实地找了，他可以听着声音判断自己是不是离出口越来越近了，然后从最近的开始找。\n\n因为我们知道B点的坐标，不知道A到B的路径。我们完全可以根据当前所在的坐标以及B点坐标来判断一下，当前搜索的节点是不是离B点更近了。引入等式：\n$$f(x)=g(x)+h(x)$$\ng(x) 表示从A点到x点所走过的距离。g值是在搜索时可以记录的。\n\nh(x) 表示当前所在的x点到B点的估算距离。h值需要构造一个估价函数进行计算。\n\nf(x) 表示从A到B的估算距离。 \n\n在进行BFS的同时，计算f值，并且在进行状态转移时，选择当前f值最小的，即选估计路径最短的一条分支进行搜索。如果走到一个状态不同f值，以前遇到过并且还没有被扩展，那么选择一个f值最小的更新就行。\n\n虽然看起来好像并没有增加太多的东西，但是实现起来需要讲究的地方很多。\n\n* 估价函数的选取。估价函数会直接影响搜索效率，若设计的不合理（f函数不单调递增），A*效率会降低到和BFS一个档次。\n\n* 按照刚刚增加的东西，要在搜索时选取f值最小的进行扩展，就需要用一个小根堆来实现这一点。遇到同一个状态不同f值时，选择最小的更新，需要用一个排序二叉树来完成。\n\n所以，真正实现起来一个正确高效的A*算法还是有一些难度。\n## 三. 让搜索“跳”起来\nA*寻路已经可以很出色地完成我们提出的问题了。在此之上，JPS算法能够让A*寻路更上一个档次。\n\n在搜索中，有部分节点的扩展是无用的。如图：\n\n<img src=\"https://qiniu.plusplus7.com/jps_algorithm/jps_natural.png-fullpercent\"/>\n\n当前按照箭头方向搜索到了x点，至此所有灰色节点都是无用的，因为总是存在一条最近路径可以从x点的父节点出发，不经过x点，而最终到达灰色节点。\n\n但有一些点比较特殊。如图：\n\n<img src=\"https://qiniu.plusplus7.com/jps_algorithm/jps_forced.png-fullpercent\"/>\n\n所有灰色节点都是无用的，而图中被红圈圈住的点，是不存在一条不经过x点的最近路径可以从x点的父节点出发而到达。而x点就是一条特殊的点，因为有要到达x点的某些后继节点，必须要经过x点，否则就不是最近路径。\n\n所以，JPS实际上是在搜索中寻找跳点的后继节点（jump point successor）而转移状态，而不是直接从当前节点进行扩展。JPS跳过了部分的无用节点，保留关键的“跳点（jump point）”，令A*在搜索时减少了扩展的节点数， 从而达到加速的效果。\n\n## 四. 查阅过的资料和代码\n\n代码实现使用c++，功能基本实现。[代码地址][2]\n\n为了保证算法正确，随机生成了20组数据，在关键地方输出中间变量，然后与github上这位大神的 [js版本][1]进行对拍结果一致。\n\n代码风格不太好，而且没有注释......\n\n如有任何错误，欢迎指正。\n\n电子邮箱：JackieDeng.cn@gmail.com\n\n[1]:https://github.com/qiao/PathFinding.js/blob/master/src/finders/JumpPointFinder.js\n[2]:https://github.com/plusplus7/JumpPointSearchAlgorithm/blob/master/main.cpp\n\n\n","slug":"跳点寻路算法的学习笔记","published":1,"updated":"2019-01-14T17:28:31.426Z","_id":"cjhj92bop0025e0vfvuyvwed0","photos":[],"link":"","content":"<p>跳点寻路算法（Jump Point Search），是一种在线的高效寻路算法。</p>\n<p>其精髓在于“跳过”一些明显不必经过的路，抽象地说，就是在搜索时大量减掉明显无用的分支，使得朴素的搜索过程变得高效。正如刚刚说的那样，Jump Point Search（简称JPS）是一个在线（Online）算法，所以无需预处理，而且运行时不占用空间。最美妙的是，JPS可以和现有的搜索加速技术（启发式，记忆化等）结合，爆发出惊人的威力。</p>\n<pre><code>在拜读了相当的论文，资料后，今天终于尝试着把代码写出来了。。。    \n这篇博文算是对这么多天学习的一个总结和笔记吧。\n如有谬误，欢迎指正。\n</code></pre><a id=\"more\"></a>\n<h2 id=\"一-从游戏中引出的问题\"><a href=\"#一-从游戏中引出的问题\" class=\"headerlink\" title=\"一. 从游戏中引出的问题\"></a>一. 从游戏中引出的问题</h2><p>（本节以下内容略微有些扯淡。。）</p>\n<p>以前老喜欢玩DotA/LoL，现在也喜欢玩。玩着玩着就有了一个问题：</p>\n<pre><code>在DotA/LoL游戏中操作一个英雄，从 泉水处 出发去打 肉山/大龙。英雄是按照什么样的路径行走的呢？最近的路径？还是最安全的路径？当然不是最安全的路径了，鬼知道会不会有一群人 开了雾/蹲草丛 来gank你。\n所以我们假设是一条最近的路径，程序是怎么算出这样一条路径的呢？\n</code></pre><h2 id=\"二-抽象化的模型\"><a href=\"#二-抽象化的模型\" class=\"headerlink\" title=\"二. 抽象化的模型\"></a>二. 抽象化的模型</h2><p>假设游戏地图是一个m*n的方格，地图中有些地方是障碍，问题就是求一条从A点到B点最近的路径。如图：</p>\n<p><img src=\"https://qiniu.plusplus7.com/jps_algorithm/a-b.png-fullpercent\" width=\"300\"></p>\n<p>有很多经典的算法可以用来处理这样的问题。</p>\n<pre><code>广度优先搜索（BFS），朴素的盲目搜索算法，编码难度低，实现简单。\n深度优先搜索（DFS），较BFS节省空间，但速度更慢，且非常不稳定（有时会过深地陷入某个错误分支）\nDijkstra算法，图论算法，有建图空间开销，速度不稳定，在数据量小的时候，可能还不如盲目搜索。\n双向广度搜索，BFS升级版，空间开销更大，编码难度上一个档次，实现复杂。\nA*启发式搜索，BFS的启发式版本，速度相当快。但也会有掉进某个“坑”而浪费时间的情况，就常见情况来说，速度非常理想。\nIDA*启发式搜索，DFS的启发式版本，速度相当快。比A*好的是，保证了速度的同时减少了空间开销，且编码难度降低。\n</code></pre><p>由于A<em>搜索和接下来的内容有关，所以这里简单介绍一下A</em>的原理。</p>\n<p>A*在朴素BFS之上，添加了启发式。就好比是，BFS就像是一个人在迷宫里寻找出口，他老老实实地挨着挨着找。加上启发式，就像是有其他人在出口处放置了一台大功率的喇叭放着《最炫XX风》，于是这个人就不老老实实地找了，他可以听着声音判断自己是不是离出口越来越近了，然后从最近的开始找。</p>\n<p>因为我们知道B点的坐标，不知道A到B的路径。我们完全可以根据当前所在的坐标以及B点坐标来判断一下，当前搜索的节点是不是离B点更近了。引入等式：<br>$$f(x)=g(x)+h(x)$$<br>g(x) 表示从A点到x点所走过的距离。g值是在搜索时可以记录的。</p>\n<p>h(x) 表示当前所在的x点到B点的估算距离。h值需要构造一个估价函数进行计算。</p>\n<p>f(x) 表示从A到B的估算距离。 </p>\n<p>在进行BFS的同时，计算f值，并且在进行状态转移时，选择当前f值最小的，即选估计路径最短的一条分支进行搜索。如果走到一个状态不同f值，以前遇到过并且还没有被扩展，那么选择一个f值最小的更新就行。</p>\n<p>虽然看起来好像并没有增加太多的东西，但是实现起来需要讲究的地方很多。</p>\n<ul>\n<li><p>估价函数的选取。估价函数会直接影响搜索效率，若设计的不合理（f函数不单调递增），A*效率会降低到和BFS一个档次。</p>\n</li>\n<li><p>按照刚刚增加的东西，要在搜索时选取f值最小的进行扩展，就需要用一个小根堆来实现这一点。遇到同一个状态不同f值时，选择最小的更新，需要用一个排序二叉树来完成。</p>\n</li>\n</ul>\n<p>所以，真正实现起来一个正确高效的A*算法还是有一些难度。</p>\n<h2 id=\"三-让搜索“跳”起来\"><a href=\"#三-让搜索“跳”起来\" class=\"headerlink\" title=\"三. 让搜索“跳”起来\"></a>三. 让搜索“跳”起来</h2><p>A<em>寻路已经可以很出色地完成我们提出的问题了。在此之上，JPS算法能够让A</em>寻路更上一个档次。</p>\n<p>在搜索中，有部分节点的扩展是无用的。如图：</p>\n<p><img src=\"https://qiniu.plusplus7.com/jps_algorithm/jps_natural.png-fullpercent\"></p>\n<p>当前按照箭头方向搜索到了x点，至此所有灰色节点都是无用的，因为总是存在一条最近路径可以从x点的父节点出发，不经过x点，而最终到达灰色节点。</p>\n<p>但有一些点比较特殊。如图：</p>\n<p><img src=\"https://qiniu.plusplus7.com/jps_algorithm/jps_forced.png-fullpercent\"></p>\n<p>所有灰色节点都是无用的，而图中被红圈圈住的点，是不存在一条不经过x点的最近路径可以从x点的父节点出发而到达。而x点就是一条特殊的点，因为有要到达x点的某些后继节点，必须要经过x点，否则就不是最近路径。</p>\n<p>所以，JPS实际上是在搜索中寻找跳点的后继节点（jump point successor）而转移状态，而不是直接从当前节点进行扩展。JPS跳过了部分的无用节点，保留关键的“跳点（jump point）”，令A*在搜索时减少了扩展的节点数， 从而达到加速的效果。</p>\n<h2 id=\"四-查阅过的资料和代码\"><a href=\"#四-查阅过的资料和代码\" class=\"headerlink\" title=\"四. 查阅过的资料和代码\"></a>四. 查阅过的资料和代码</h2><p>代码实现使用c++，功能基本实现。<a href=\"https://github.com/plusplus7/JumpPointSearchAlgorithm/blob/master/main.cpp\" target=\"_blank\" rel=\"noopener\">代码地址</a></p>\n<p>为了保证算法正确，随机生成了20组数据，在关键地方输出中间变量，然后与github上这位大神的 <a href=\"https://github.com/qiao/PathFinding.js/blob/master/src/finders/JumpPointFinder.js\" target=\"_blank\" rel=\"noopener\">js版本</a>进行对拍结果一致。</p>\n<p>代码风格不太好，而且没有注释……</p>\n<p>如有任何错误，欢迎指正。</p>\n<p>电子邮箱：JackieDeng.cn@gmail.com</p>\n","site":{"data":{}},"excerpt":"<p>跳点寻路算法（Jump Point Search），是一种在线的高效寻路算法。</p>\n<p>其精髓在于“跳过”一些明显不必经过的路，抽象地说，就是在搜索时大量减掉明显无用的分支，使得朴素的搜索过程变得高效。正如刚刚说的那样，Jump Point Search（简称JPS）是一个在线（Online）算法，所以无需预处理，而且运行时不占用空间。最美妙的是，JPS可以和现有的搜索加速技术（启发式，记忆化等）结合，爆发出惊人的威力。</p>\n<pre><code>在拜读了相当的论文，资料后，今天终于尝试着把代码写出来了。。。    \n这篇博文算是对这么多天学习的一个总结和笔记吧。\n如有谬误，欢迎指正。\n</code></pre>","more":"<h2 id=\"一-从游戏中引出的问题\"><a href=\"#一-从游戏中引出的问题\" class=\"headerlink\" title=\"一. 从游戏中引出的问题\"></a>一. 从游戏中引出的问题</h2><p>（本节以下内容略微有些扯淡。。）</p>\n<p>以前老喜欢玩DotA/LoL，现在也喜欢玩。玩着玩着就有了一个问题：</p>\n<pre><code>在DotA/LoL游戏中操作一个英雄，从 泉水处 出发去打 肉山/大龙。英雄是按照什么样的路径行走的呢？最近的路径？还是最安全的路径？当然不是最安全的路径了，鬼知道会不会有一群人 开了雾/蹲草丛 来gank你。\n所以我们假设是一条最近的路径，程序是怎么算出这样一条路径的呢？\n</code></pre><h2 id=\"二-抽象化的模型\"><a href=\"#二-抽象化的模型\" class=\"headerlink\" title=\"二. 抽象化的模型\"></a>二. 抽象化的模型</h2><p>假设游戏地图是一个m*n的方格，地图中有些地方是障碍，问题就是求一条从A点到B点最近的路径。如图：</p>\n<p><img src=\"https://qiniu.plusplus7.com/jps_algorithm/a-b.png-fullpercent\" width=\"300\"></p>\n<p>有很多经典的算法可以用来处理这样的问题。</p>\n<pre><code>广度优先搜索（BFS），朴素的盲目搜索算法，编码难度低，实现简单。\n深度优先搜索（DFS），较BFS节省空间，但速度更慢，且非常不稳定（有时会过深地陷入某个错误分支）\nDijkstra算法，图论算法，有建图空间开销，速度不稳定，在数据量小的时候，可能还不如盲目搜索。\n双向广度搜索，BFS升级版，空间开销更大，编码难度上一个档次，实现复杂。\nA*启发式搜索，BFS的启发式版本，速度相当快。但也会有掉进某个“坑”而浪费时间的情况，就常见情况来说，速度非常理想。\nIDA*启发式搜索，DFS的启发式版本，速度相当快。比A*好的是，保证了速度的同时减少了空间开销，且编码难度降低。\n</code></pre><p>由于A<em>搜索和接下来的内容有关，所以这里简单介绍一下A</em>的原理。</p>\n<p>A*在朴素BFS之上，添加了启发式。就好比是，BFS就像是一个人在迷宫里寻找出口，他老老实实地挨着挨着找。加上启发式，就像是有其他人在出口处放置了一台大功率的喇叭放着《最炫XX风》，于是这个人就不老老实实地找了，他可以听着声音判断自己是不是离出口越来越近了，然后从最近的开始找。</p>\n<p>因为我们知道B点的坐标，不知道A到B的路径。我们完全可以根据当前所在的坐标以及B点坐标来判断一下，当前搜索的节点是不是离B点更近了。引入等式：<br>$$f(x)=g(x)+h(x)$$<br>g(x) 表示从A点到x点所走过的距离。g值是在搜索时可以记录的。</p>\n<p>h(x) 表示当前所在的x点到B点的估算距离。h值需要构造一个估价函数进行计算。</p>\n<p>f(x) 表示从A到B的估算距离。 </p>\n<p>在进行BFS的同时，计算f值，并且在进行状态转移时，选择当前f值最小的，即选估计路径最短的一条分支进行搜索。如果走到一个状态不同f值，以前遇到过并且还没有被扩展，那么选择一个f值最小的更新就行。</p>\n<p>虽然看起来好像并没有增加太多的东西，但是实现起来需要讲究的地方很多。</p>\n<ul>\n<li><p>估价函数的选取。估价函数会直接影响搜索效率，若设计的不合理（f函数不单调递增），A*效率会降低到和BFS一个档次。</p>\n</li>\n<li><p>按照刚刚增加的东西，要在搜索时选取f值最小的进行扩展，就需要用一个小根堆来实现这一点。遇到同一个状态不同f值时，选择最小的更新，需要用一个排序二叉树来完成。</p>\n</li>\n</ul>\n<p>所以，真正实现起来一个正确高效的A*算法还是有一些难度。</p>\n<h2 id=\"三-让搜索“跳”起来\"><a href=\"#三-让搜索“跳”起来\" class=\"headerlink\" title=\"三. 让搜索“跳”起来\"></a>三. 让搜索“跳”起来</h2><p>A<em>寻路已经可以很出色地完成我们提出的问题了。在此之上，JPS算法能够让A</em>寻路更上一个档次。</p>\n<p>在搜索中，有部分节点的扩展是无用的。如图：</p>\n<p><img src=\"https://qiniu.plusplus7.com/jps_algorithm/jps_natural.png-fullpercent\"></p>\n<p>当前按照箭头方向搜索到了x点，至此所有灰色节点都是无用的，因为总是存在一条最近路径可以从x点的父节点出发，不经过x点，而最终到达灰色节点。</p>\n<p>但有一些点比较特殊。如图：</p>\n<p><img src=\"https://qiniu.plusplus7.com/jps_algorithm/jps_forced.png-fullpercent\"></p>\n<p>所有灰色节点都是无用的，而图中被红圈圈住的点，是不存在一条不经过x点的最近路径可以从x点的父节点出发而到达。而x点就是一条特殊的点，因为有要到达x点的某些后继节点，必须要经过x点，否则就不是最近路径。</p>\n<p>所以，JPS实际上是在搜索中寻找跳点的后继节点（jump point successor）而转移状态，而不是直接从当前节点进行扩展。JPS跳过了部分的无用节点，保留关键的“跳点（jump point）”，令A*在搜索时减少了扩展的节点数， 从而达到加速的效果。</p>\n<h2 id=\"四-查阅过的资料和代码\"><a href=\"#四-查阅过的资料和代码\" class=\"headerlink\" title=\"四. 查阅过的资料和代码\"></a>四. 查阅过的资料和代码</h2><p>代码实现使用c++，功能基本实现。<a href=\"https://github.com/plusplus7/JumpPointSearchAlgorithm/blob/master/main.cpp\" target=\"_blank\" rel=\"noopener\">代码地址</a></p>\n<p>为了保证算法正确，随机生成了20组数据，在关键地方输出中间变量，然后与github上这位大神的 <a href=\"https://github.com/qiao/PathFinding.js/blob/master/src/finders/JumpPointFinder.js\" target=\"_blank\" rel=\"noopener\">js版本</a>进行对拍结果一致。</p>\n<p>代码风格不太好，而且没有注释……</p>\n<p>如有任何错误，欢迎指正。</p>\n<p>电子邮箱：JackieDeng.cn@gmail.com</p>"},{"layout":"post","title":"逻辑回归——机器学习笔记（三）","date":"2014-08-16T17:21:00.000Z","comments":1,"reward":true,"_content":"\n逻辑回归(Logistic regression)是一种二值型输出分类器，其基本思路是对于数据的边界线建立回归公式，以此进行分类。\n\n比如，银行在处理信用卡申请时，需要判断申请人是否有能力使用信用卡。根据申请人的年龄，职业，信用记录等信息，以此作为输入数据点x，来预测申请人是否有能力使用信用卡，即输出1或0表示是否。\n\n<!-- more -->\n    \n    最近入手了MacBook，于是就把学习MachineLearning以及Coding的环境换到了OS X（不得不说MacBook的用户体验简直太nice了）。\n    \n    之后就是学习了一下NumPy，简直是太好用了...于是决定以后在学习MachineLearning的时候，用C++敲算法，之后用python来看效果。\n\n为了实现接受输入然后推测输出，并且输出值只能是0或1。于是需要一个函数来实现分类。Sigmoid函数是一种阶跃函数，并且易于处理：\n\n$g(z)=\\frac{1}{1+e^z}$\n\n要实现这个分类器，需要把输入的每个特征乘上回归系数 $\\theta$，把结果加起来，即$\\theta^Tx$代入Sigmoid函数，构造出hypothesis函数。\n\n$h_\\theta(x)=\\frac{1}{1+e^{-\\theta Tx}}$\n\n根据最大似然分析，可知\n似然性\n\n\n$$L(\\theta)=\\prod^{m}(h_\\theta(x^{(i)}))^{y^{(i)}}(1-h_\\theta(x^{(i)}))^{1-y^{(i)}}$$\n\n先对等式两边取对数。\n\n$logL(\\theta)=l(\\theta)=\\sum^m_{i=1}y^{(i)}logh(x^{(i)})+(1-y^{(i)})log(1-h(x^{(i)}))$\n\n要使似然性最大，可以用类似之前线性回归的方法对$l(\\theta)$求导数。\n\n$\\frac{∂}{∂\\theta_j}l(\\theta)=(y-h_ \\theta(x))x_j$\n\n化简得到算法\n$\\theta_j := \\theta_j + \\alpha(y^{(i)}-h _\\theta(x^{(i)}))x_j^{(i)}$\n\n因为这里其实是在求最大值，所以这里的算法应该是叫梯度上升算法。\n\n我的代码实现使用的是随机梯度上升。\n\n最后是用NumPy库展示出的效果图。\n\n<img src=\"http://bcs.duapp.com/blogbuk/logistic_regression.png\"/>\n\n[C++代码实现][1]\n\n[1]:https://github.com/plusplus7/MachineLearning/blob/master/src/logistic_regression/logistic_regression.cc\n","source":"_posts/逻辑回归——机器学习笔记（三）.md","raw":"---\nlayout: post\ntitle: 逻辑回归——机器学习笔记（三）\ndate: 2014-8-17 01:21\ncomments: true\nreward: true\ntags:\n    - Algorithm\n---\n\n逻辑回归(Logistic regression)是一种二值型输出分类器，其基本思路是对于数据的边界线建立回归公式，以此进行分类。\n\n比如，银行在处理信用卡申请时，需要判断申请人是否有能力使用信用卡。根据申请人的年龄，职业，信用记录等信息，以此作为输入数据点x，来预测申请人是否有能力使用信用卡，即输出1或0表示是否。\n\n<!-- more -->\n    \n    最近入手了MacBook，于是就把学习MachineLearning以及Coding的环境换到了OS X（不得不说MacBook的用户体验简直太nice了）。\n    \n    之后就是学习了一下NumPy，简直是太好用了...于是决定以后在学习MachineLearning的时候，用C++敲算法，之后用python来看效果。\n\n为了实现接受输入然后推测输出，并且输出值只能是0或1。于是需要一个函数来实现分类。Sigmoid函数是一种阶跃函数，并且易于处理：\n\n$g(z)=\\frac{1}{1+e^z}$\n\n要实现这个分类器，需要把输入的每个特征乘上回归系数 $\\theta$，把结果加起来，即$\\theta^Tx$代入Sigmoid函数，构造出hypothesis函数。\n\n$h_\\theta(x)=\\frac{1}{1+e^{-\\theta Tx}}$\n\n根据最大似然分析，可知\n似然性\n\n\n$$L(\\theta)=\\prod^{m}(h_\\theta(x^{(i)}))^{y^{(i)}}(1-h_\\theta(x^{(i)}))^{1-y^{(i)}}$$\n\n先对等式两边取对数。\n\n$logL(\\theta)=l(\\theta)=\\sum^m_{i=1}y^{(i)}logh(x^{(i)})+(1-y^{(i)})log(1-h(x^{(i)}))$\n\n要使似然性最大，可以用类似之前线性回归的方法对$l(\\theta)$求导数。\n\n$\\frac{∂}{∂\\theta_j}l(\\theta)=(y-h_ \\theta(x))x_j$\n\n化简得到算法\n$\\theta_j := \\theta_j + \\alpha(y^{(i)}-h _\\theta(x^{(i)}))x_j^{(i)}$\n\n因为这里其实是在求最大值，所以这里的算法应该是叫梯度上升算法。\n\n我的代码实现使用的是随机梯度上升。\n\n最后是用NumPy库展示出的效果图。\n\n<img src=\"http://bcs.duapp.com/blogbuk/logistic_regression.png\"/>\n\n[C++代码实现][1]\n\n[1]:https://github.com/plusplus7/MachineLearning/blob/master/src/logistic_regression/logistic_regression.cc\n","slug":"逻辑回归——机器学习笔记（三）","published":1,"updated":"2018-05-23T14:45:27.502Z","photos":[],"link":"","_id":"cjhj92bot0028e0vf5tdm8jq1","content":"<p>逻辑回归(Logistic regression)是一种二值型输出分类器，其基本思路是对于数据的边界线建立回归公式，以此进行分类。</p>\n<p>比如，银行在处理信用卡申请时，需要判断申请人是否有能力使用信用卡。根据申请人的年龄，职业，信用记录等信息，以此作为输入数据点x，来预测申请人是否有能力使用信用卡，即输出1或0表示是否。</p>\n<a id=\"more\"></a>\n<pre><code>最近入手了MacBook，于是就把学习MachineLearning以及Coding的环境换到了OS X（不得不说MacBook的用户体验简直太nice了）。\n\n之后就是学习了一下NumPy，简直是太好用了...于是决定以后在学习MachineLearning的时候，用C++敲算法，之后用python来看效果。\n</code></pre><p>为了实现接受输入然后推测输出，并且输出值只能是0或1。于是需要一个函数来实现分类。Sigmoid函数是一种阶跃函数，并且易于处理：</p>\n<p>$g(z)=\\frac{1}{1+e^z}$</p>\n<p>要实现这个分类器，需要把输入的每个特征乘上回归系数 $\\theta$，把结果加起来，即$\\theta^Tx$代入Sigmoid函数，构造出hypothesis函数。</p>\n<p>$h_\\theta(x)=\\frac{1}{1+e^{-\\theta Tx}}$</p>\n<p>根据最大似然分析，可知<br>似然性</p>\n<p>$$L(\\theta)=\\prod^{m}(h<em>\\theta(x^{(i)}))^{y^{(i)}}(1-h</em>\\theta(x^{(i)}))^{1-y^{(i)}}$$</p>\n<p>先对等式两边取对数。</p>\n<p>$logL(\\theta)=l(\\theta)=\\sum^m_{i=1}y^{(i)}logh(x^{(i)})+(1-y^{(i)})log(1-h(x^{(i)}))$</p>\n<p>要使似然性最大，可以用类似之前线性回归的方法对$l(\\theta)$求导数。</p>\n<p>$\\frac{∂}{∂\\theta<em>j}l(\\theta)=(y-h</em> \\theta(x))x_j$</p>\n<p>化简得到算法<br>$\\theta_j := \\theta<em>j + \\alpha(y^{(i)}-h </em>\\theta(x^{(i)}))x_j^{(i)}$</p>\n<p>因为这里其实是在求最大值，所以这里的算法应该是叫梯度上升算法。</p>\n<p>我的代码实现使用的是随机梯度上升。</p>\n<p>最后是用NumPy库展示出的效果图。</p>\n<p><img src=\"http://bcs.duapp.com/blogbuk/logistic_regression.png\"></p>\n<p><a href=\"https://github.com/plusplus7/MachineLearning/blob/master/src/logistic_regression/logistic_regression.cc\" target=\"_blank\" rel=\"noopener\">C++代码实现</a></p>\n","site":{"data":{}},"excerpt":"<p>逻辑回归(Logistic regression)是一种二值型输出分类器，其基本思路是对于数据的边界线建立回归公式，以此进行分类。</p>\n<p>比如，银行在处理信用卡申请时，需要判断申请人是否有能力使用信用卡。根据申请人的年龄，职业，信用记录等信息，以此作为输入数据点x，来预测申请人是否有能力使用信用卡，即输出1或0表示是否。</p>","more":"<pre><code>最近入手了MacBook，于是就把学习MachineLearning以及Coding的环境换到了OS X（不得不说MacBook的用户体验简直太nice了）。\n\n之后就是学习了一下NumPy，简直是太好用了...于是决定以后在学习MachineLearning的时候，用C++敲算法，之后用python来看效果。\n</code></pre><p>为了实现接受输入然后推测输出，并且输出值只能是0或1。于是需要一个函数来实现分类。Sigmoid函数是一种阶跃函数，并且易于处理：</p>\n<p>$g(z)=\\frac{1}{1+e^z}$</p>\n<p>要实现这个分类器，需要把输入的每个特征乘上回归系数 $\\theta$，把结果加起来，即$\\theta^Tx$代入Sigmoid函数，构造出hypothesis函数。</p>\n<p>$h_\\theta(x)=\\frac{1}{1+e^{-\\theta Tx}}$</p>\n<p>根据最大似然分析，可知<br>似然性</p>\n<p>$$L(\\theta)=\\prod^{m}(h<em>\\theta(x^{(i)}))^{y^{(i)}}(1-h</em>\\theta(x^{(i)}))^{1-y^{(i)}}$$</p>\n<p>先对等式两边取对数。</p>\n<p>$logL(\\theta)=l(\\theta)=\\sum^m_{i=1}y^{(i)}logh(x^{(i)})+(1-y^{(i)})log(1-h(x^{(i)}))$</p>\n<p>要使似然性最大，可以用类似之前线性回归的方法对$l(\\theta)$求导数。</p>\n<p>$\\frac{∂}{∂\\theta<em>j}l(\\theta)=(y-h</em> \\theta(x))x_j$</p>\n<p>化简得到算法<br>$\\theta_j := \\theta<em>j + \\alpha(y^{(i)}-h </em>\\theta(x^{(i)}))x_j^{(i)}$</p>\n<p>因为这里其实是在求最大值，所以这里的算法应该是叫梯度上升算法。</p>\n<p>我的代码实现使用的是随机梯度上升。</p>\n<p>最后是用NumPy库展示出的效果图。</p>\n<p><img src=\"http://bcs.duapp.com/blogbuk/logistic_regression.png\"></p>\n<p><a href=\"https://github.com/plusplus7/MachineLearning/blob/master/src/logistic_regression/logistic_regression.cc\" target=\"_blank\" rel=\"noopener\">C++代码实现</a></p>"},{"layout":"post","title":"27天“环游世界”旅行日记","date":"2018-12-11T04:11:00.000Z","comments":1,"reward":true,"_content":"\n## Day 1 法兰克福\n\n因为是从芬兰进入欧洲的，所以是在芬兰过的海关。\n\n海关小哥神情很严肃，认真地看了我所有的资料，然后问我为什么去德国。\n\n我说，“看音乐节”。\n\n小哥问，“啥音乐节？”\n\n我回答，“Wacken金属音乐节”。\n\n然后他漏出一个鄙夷的眼神:“你最喜欢那个乐队？”\n\n我想了想说，“当然是Nightwish (芬兰引以为傲的国宝级乐队)”。然后小哥笑了，就放行了。\n\n<!-- more -->\n\n到了法兰克福之后，感觉是这是一座非常现代化的城市。机场很大，不愧为欧洲第二航空交通枢纽。之后便搭乘轻轨S9号线从机场去到了位于中央火车站附近的酒店。\n\n一路上没有遇见什么难民，火车站附近有些吉普赛人。总体上来说，感觉很安全，并没有感受到所谓“难民危机”的气息。\n\n## Day 2 弗莱堡\n\n一大早就去取车，想早点开车去黑森林（弗莱堡）玩，结果管理员找不到给我准备的车，在停车场转了半个小时才把车给我。\n\n欧洲市区里开车实在是太惊险，路窄，人多，而且规矩很多很复杂x。\n\n到了高速公路就可以放飞自我了。我开的是Opel欧宝Mokka X ecotec 1.4T，这辆车官方定的最高时速是195km/h，被我开到了200km/h。路上的车都非常守规矩，驾驶体验极好。\n\n弗莱堡算是一个大学城，以学生居多。整个城市就在黑森林内，居民区分布在几个山谷中间。这里的水是全德国最干净的，直接来自黑森林的山泉水。面积巨大的树林区域提供了强大的净水能力，和强大的空气净化能力。\n\n到黑森林看了之后，我才感受到什么叫艺术源于生活。所以这边会有小红帽，白雪公主，邪恶的女巫，聪明的猎人。黑压压的一大片森林，树又高又大又密。而且还有长相奇怪的大石头…\n\n<img src=\"https://qiniu.plusplus7.com/blackforest.png-60percent\" />\n\n老师给我看了冬天的照片，感觉很像undertale里面雪镇的样子，很漂亮。\n\n晚上去住店遇到了一个态度极其不好的德国店主xwx，嫌我入住时间太晚了，影响了大家的休息。而且店里都没有WiFi，我要去booking上给他打差评！\n\n感觉对这家店印象很差，准备第二天早点走。\n\n## Day 3 卢塞恩\n\n今天是愉快的一天！\n\n在巴塞尔很愉快地拍到了三国交界和莱茵河，然后买了瑞士的高速卡，可以入境瑞士啦！\n\n去卢塞恩的一路上都是很美很美的景色，路边有牧场有农场，感觉随手一拍都是windows桌面。\n\n来到卢塞恩，直接去找酒店。\n\n我为了贪便宜，专门订了一个很偏僻的酒店，在阿尔卑斯山-皮拉图斯峰的山脊上。没有公共交通直达，也离景点什么的很远，所以算是比较冷门的地方。开车上山一路上是很惊险的…路很窄，有些地方只能让一辆车经过，开起来挺吓人。\n\n不过我到了之后，感觉这一切都是值得的！窗外景色太美了，我直接都看傻了。酒店的位置有一定的海拔高度，可以看到卢塞恩湖，也可以直接看到皮拉图斯峰的主峰。即使是夏天，但是也有少量积雪覆盖，很漂亮。\n\n<img src=\"https://qiniu.plusplus7.com/luzerne.jpg-fullpercent\" />\n\n山上一片片的树林，空气清新，景色优美，是一个徒步的好地方！\n\n晚上去吃了卢塞恩最有名的芝士火锅店，这边除了能吃到正宗的芝士火锅，并且晚上7：30之后会有瑞士传统文化的演出。\n\n我去的时候是7：46，正好是演出开始不久。一开始是音乐秀，几位老爷子，弹手风琴，钢琴，大提琴。\n\n<img src=\"https://qiniu.plusplus7.com/cheesefondue.png-60percent\" />\n\n还有瑞士的一种传统乐器-阿尔卑斯号角，大概是这样xwx。\n\n<img src=\"https://qiniu.plusplus7.com/alps_horn.jpg-fullpercent\" />\n\n然后还有观众互动环节什么的。\n\n芝士火锅感觉很不错！大概就是把很多芝士放到小锅里，然后用火煮。加上一些红酒什么的，这样芝士不会太快凝聚。芝士全部煮融化之后，就用小叉子插一块切成正方体的小面包到锅里过一圈芝士，然后拿到空中，稍等一下，让芝士略微有点凝固，然后就一起放进嘴里。\n\n就是吃完以后特别的腻…大概回去之后，会有一段时间不想吃芝士了…\n\n不过吃饭的时候，几位老爷子表演的节目是真心好。所有的音乐都是现场演奏，而且有很多对瑞士传统文化的介绍，还有让观众上台体验，节目效果好，观众参与度高。我觉得这算是真正的文化输出了。\n\n我们国家啥时候能有这样的餐厅呢emmmm\n\n还有一个吐槽，就是我在点晚餐的时候，没有注意到菜单的内容。因为菜单是德语法语写的，看起来很费劲。所以我就点了一个套餐A，加一大杯啤酒。\n\n第一道菜是芝士火锅。我吃完就感觉很饱了，想着应该就会上餐后甜品了吧。\n\n<img src=\"https://qiniu.plusplus7.com/first_course.jpg-20percert\" />\n\n我把锅里的芝士都吃完时，锅底上糊了一层芝士的锅巴。服务员说这个也该吃掉。\n\n<img src=\"https://qiniu.plusplus7.com/1.5course.jpg-20percert\" />\n\n所以这个算是第1.5道菜吧。\n\n结果他端上第二道菜时，说了一句“Enjoy your appetizer salad”（请享受您的开胃沙拉）。我当时就“？？？”，什么叫开胃沙拉…难道正菜还没上吗。\n\n<img src=\"https://qiniu.plusplus7.com/second_course.jpg-20percert\" />\n\n答案是肯定的，我吃完沙拉，他就上了第三道菜-正菜，大份土豆泥+一根白香肠…我看得我都快哭了…我感觉很撑了已经..\n\n<img src=\"https://qiniu.plusplus7.com/third_course.jpg-20percert\" />\n\n最后还有第四道菜，甜品，是一个插着瑞士旗的奶油冰淇淋。\n\n<img src=\"https://qiniu.plusplus7.com/forth_course.jpg-20percert\" />\n\n吃完之后，我是彻底满足了。不仅吃得很撑，还在边吃边看演出，了解很多瑞士的传统文化，学到了很多。\n\n吃完之后，在卢塞恩湖附近转了转就回去啦，因为喝了一些啤酒，所以不敢呆太久，就开车回去了。\n\n开车回去之后，我才反映过来…我是不是酒驾了…喝了一大杯啤酒，而且芝士火锅里面也是加酒的XwX…\n\n查了一下瑞士的法律，还好他们其实是允许酒驾的，只要吹气酒精浓度不超过0.25mg/l或者血液酒精浓度不超过0.05%就好。我没喝太多，所以应该没事XwX没想到我第一次酒驾居然是在瑞士。回国之后要好好遵守规定，不能酒后驾驶咳咳。\n\n<img src=\"https://qiniu.plusplus7.com/alcohol.png-60percent\" />\n\n## Day 4 斯图加特\n\n今天开车从瑞士回到了德国，来到了德国斯图加特，去参观了梅赛德斯奔驰博物馆。\n\n虽然不是一个汽车迷吧，但是汽车的历史什么的还是可以了解一下，毕竟世界上第一辆汽车就是出自卡尔·本茨。\n\n学习到了很多汽车的历史，从世界上第一款只有1.1马力的发动机，到现在的超级跑车的演变史。这个博物馆一共有8层楼，可以让人逛一天。\n\n在一楼还有汽车体验中心，可以去亲身去坐一下百万豪车XwX。也就只是坐一下233，只能拍拍照，不能启动什么的。\n\n## Day 5 卢森堡\n\n今天早早地就从斯图加特赶往卢森堡。计划3个小时赶到，然而花了5个小时。。\n\n因为路上先是高速公路封路，因为要清理路上的落叶……然后我就绕道一条乡间小路，没想到路上遇到了别人发生车祸，应该是一个骑摩托车的和汽车相撞，感觉没什么大碍，救护车来了，警车也来了。不过路又不能走了…所以我在路上饶了一大圈才又重新回到高速公路。\n\n不过因此而跑到德国的小山村里面去看了。看到了他们的城镇大厅，伐木场，铁匠铺，学校，教堂。感觉这些建筑的风格，和以前玩得魔兽争霸里面的人族建筑一模一样233333\n\n然后到卢森堡之后，直接开车到了城中心，那边有一个巨大的停车场。然后走路就可以到各个景点，超级方便。\n\n\n\n然后就吃了网红Chocospoon。大概就是把巧克力方块，用木勺放进热牛奶里，然后看着巧克力慢慢融化，最后把他们喝掉xwx，就这样。大概要5.75欧元，50块人民币一杯。感觉不太划算，而且他们的服务员态度很冷淡xwx，差评。\n\n<img src=\"https://qiniu.plusplus7.com/chocospoon.jpg-20percert\" />\n\n本来还想试试法国菜的qwq，卢森堡有好几家米其林餐厅。但是这些餐厅超级傲娇，因为今天是星期天，所以大多数都不开业。唯一一家开业的Le Sud，今天客人招待的够多了，让我改天再去…\n\n我现在已经开车从卢森堡到比利时首都布鲁塞尔附近的一个小乡村里了，住在一家老夫妇家里。他们把阁楼装扮成了客房，来接待旅客。\n\n房子附近就全是农田，这些农田都是那种小麦田，黄黄的，然后卷成椭圆形放在田里的，特别像绝地求生里面，那个麦田的感觉233333\n\n## Day 6 布鲁塞尔\n\n在老夫妇家饱餐了一顿正宗的法式早点之后，赶到了布鲁塞尔。\n\n老爷爷人挺不错的，听说我要去布鲁塞尔，还特地给我说了一个停车很方便的地方。因为语言不通xwx，我不会法语，他不会英语，所以沟通很费劲，但是老爷爷还是很耐心地给我解释清热。\n\n到了布鲁塞尔之后，感觉这是一个对自驾游客很友好的城市，停车不贵，而且很方便。\n\n去看了一下具有400年历史的撒尿小童雕像xwx，感觉真的没啥好看的，很小，而且旁边围了一圈游客。\n\n还去传说中的布鲁塞尔大广场看了看，这是被誉为“欧洲最美的广场”，始建于12世纪。广场上全是游客，还有吉普赛人xwx。\n\n<img src=\"https://qiniu.plusplus7.com/bruxxel.png-20percert\" />\n\n然后就开车去了阿姆斯特丹。\n\n## Day 7 阿姆斯特丹\n\n荷兰给人体验就不是很好了…一是感觉这个城市商业气息很重，卖给游客的东西都很贵，停车费是比利时，德国的4倍。二是整个城市都弥漫着一股大麻味…我有点受不了呃..还有就是在水坝广场，看到了“邪教”组织在传教qwq（对，就是那个宣扬真善忍的教x）照片就不发了，我怕被查水表…\n\n之后就去看了那个传说中的性博物馆xwx\n\n感觉那个也挺坑的，就是收集了各个地方，各个国家的性方面的历史资料\n\n比如中国的就有金瓶梅什么的，日本就是源氏物语什么的。\n\n然后还有很多恶趣味的模型什么的，而且地方也很小，感觉值不会票价x\n\n然后还去吃了荷兰的网红薯条，说实话我感觉这个和在别的地方吃到的，没啥区别。只是这个是在水坝广场卖的而已…\n\n所以总体来说荷兰给我感觉不太好…商业气息很重，游客很多。\n\n## Day 8 不来梅哈芬\n\n来到了一个港口城市，不来梅哈芬。\n\n感觉没啥看的..港口都被封起来了，能看到的就是一片盐碱地…\n\n不过海边确实挺舒服的，太阳很温暖，海风很舒服\n\n之后就开车去Wacken啦，然后找了半天才找到停车场。\n\n去登记之后，得知露营的地方在另一边，于是又开车转了半天才找到露营地。此时已经是半夜1点了..而且因为人太多了，我又来的很晚，所以露营地到舞台大约要走半个小时…这就是我这几天微信运动上每天都走了将近3w步的原因…\n\n因为没有带帐篷，所以就在车上用睡袋裹着睡得。总体感觉还是挺安全的，到处都是警察。\n\n## Day 9 瓦肯音乐节\n\n我早上起来准备吃泡面，但是我打开了一桶之后才意识到..为了环保，德国的塑料是被严格控制的，比如一瓶可乐要多少0.25欧元的押金，之后当你把瓶子回收之后才会把瓶子钱退给你。所以可能也是这个原因，泡面里面也是没有塑料叉子的…于是我就没办法，只能泡好之后直接拿着泡面碗喝…\n\n然后就不小心被旁边的比利时老太太看见，把她吓坏了..她说：“我知道中国人都用筷子，在德国虽然没有筷子，但你也可以试试叉子呀…”\n\n之后就去Wacken的场地看了看。很宽，里面有卖吃的，卖CD的，卖衣服的，都是和金属乐有关，而且店面装修都很到位，很有音乐节的气氛。特别是废土区的装修，可以说是很硬核了\n\n<img src=\"https://qiniu.plusplus7.com/wacken.jpg-20percert\" />\n\n晚上在很前排的位置听了Judas Priest的演出。这个是金属乐历史上最伟大的乐队，没有之一，他们对重金属的发展做出了卓越的贡献。主唱更是被称为”上帝本人（Metal God）“。这位老爷子今年都66岁了，依旧陪我们嗨了一个半小时，而且全程劲爆，超级嗨。不过感觉确实他们都老了，这是成立于1971年的乐队，主唱虽然水平依旧，但是能感觉出他唱得很费力了，一直都是双手捧着话筒在唱，真怕老爷子唱着唱着突然倒下了。能赶在他们退休之前听一场，感觉也是很满足了。\n\n## Day 10 瓦肯音乐节\n\n今天去广场上的电竞区看了看，惊奇地发现里面摆了超级多电脑…可以随便进去van游戏xwx\n\n然后我就开心地玩了两把欧服的吃鸡和DotA2\n\n下午看了EPICA的演出，虽然这支乐队挺大牌的但是我还是不太喜欢他们的歌，总感觉缺点什么..不过他们的女主唱唱功很不错，就是歌不怎么好听\n\n为了在最前排看Nightwish的演出，我提前了将近5个小时赶到Faster主舞台，这时主舞台正在表演的是一个旋律死亡金属乐队。我大概占到了第三排的位置，我前一排的是一个哥特萝莉和一个看起来像刚刚放学的乖乖女，我问“你们都喜欢这种重口味的金属乐吗”。她们表示“不，我们是Nightwish的粉丝，我们是来占位置”[捂脸][捂脸]最后站了五个小时，终于如愿以偿听了一次Nightwish的现场，心满意足[耶]\n\n## Day 11 爱森纳赫\n\n今天做了一回文艺青年，离开了金属音乐节，去到了巴赫的出生地，一个充满童话气息的小山城，爱森纳赫。\n\n到了之后感觉确实是很漂亮呢，所有的建筑风格都想是童话里的那样，而且感觉音乐的气氛很浓厚。据说这里，在17世纪的时候，就是吟游诗人和音乐家们聚会演奏的场所。\n\n今天赶了一天路，早点休息啦～\n\n## Day 12 爱森纳赫\n\n今天去看了巴赫故居，其实就是一个博物馆啦～\n\n门票挺贵的qwq，10欧元（80人民币）。不过里面的内容很丰富，有很多巴赫的手稿原件，还有工作人员每个小时来用巴洛克时期的乐器来演奏巴赫的作品，感觉很不错呢！现场听了一次羽管键琴的演奏，非常有味道。\n\n下午看了一下附近的一个城堡，然后就匆匆地赶回法兰克福了。感觉城堡也没啥看的…内部不开放，外面也看不到啥有意思的东西。\n\n明天是上午7:45的飞机。我觉得去酒店休息一晚再去机场的话可能赶不到，因为太早了没有火车去机场，德国出租车也很难叫的感觉。所以我准备去机场先，然后在机场磨一晚上，第二天上飞机好好睡一觉好了，就当是倒时差。\n\n## Day 13 法兰克福 - 曼彻斯特 - 拉斯维加斯\n\n早上7点45飞机到曼彻斯特\n\n然后9点55转机到拉斯维加斯\n\n从曼彻斯特到拉斯维加斯坐的是Thomas Cook航班..体验极差..空乘在不停的说话，很吵。然后饭超难吃。\n\n## Day 14 - 19 拉斯维加斯\n\n我在这儿参加的一个Defcon信息安全会议。\n\n和这个会议一起开的，还有一个叫Queercon的会议。\n\n是面向信息安全行业里的各种少数派群体，比如LGBTQ+, Furry, Kinkster\n\n[表情]我都惊了，见到了好多兽装大佬\n\n还有各种穿皮♂衣的BDSM大佬\n\n<img src=\"https://qiniu.plusplus7.com/queercon.png-20percert\" />\n\n我超级想要他们的那个[Furry吊牌](https://twitter.com/B00M_s1ang/status/1027730523936804864)\n\n可以亮！\n\n而且摁鼻子还能叫\n\n<img src=\"https://qiniu.plusplus7.com/furry.png-fullpercent\" />\n\n嘤～去Defcon Furs社区看了看，就是一个小房间，然后里面有几个人。\n\n我突然就社恐发作，不敢和任何人说话..然后呆了5分钟就走了。\n\n<img src=\"https://qiniu.plusplus7.com/furryguy.jpg-fullpercent\" />\n\n\n## Day 20 - 27 西雅图\n\n呃。。\n\n飞机在西雅图机场停留了好久才放我们下飞机。\n\n本来是提前了半个小时到达，结果硬生生拖到了延误一个半小时。\n\n去Bellevue老街吃到了好吃的New York Streak。\n\n\n看到了太平洋！\n\n去到了海边！\n\n本来想去雨林看看。导航搜“Rain Forest”，然后出来一个Rain Forest Inn。我就以为这里就是雨林所在地。但其实这个只是一个叫Rain Forest的旅馆，离真正的雨林离得超级远…\n\n所以就没去了。。\n\n\n去俄勒冈的波特兰市买东西，因为那边是没有消费税的州，所以买东西会便宜一些。\n\n之后还想去Tillamook Bay看看，因为那边是奇异人生中Arcadia Bay的原型。\n\n但是那边有点远，来回要3个小时，再加上时间有点晚，所以就不去了QAQ…\n\n下次一定要去!\n","source":"_posts/27days.journal.md","raw":"---\nlayout: post\ntitle: 27天“环游世界”旅行日记\ndate: 2018-12-11 12:11\ncomments: true\nreward: true\ntags:\n    - Live\n---\n\n## Day 1 法兰克福\n\n因为是从芬兰进入欧洲的，所以是在芬兰过的海关。\n\n海关小哥神情很严肃，认真地看了我所有的资料，然后问我为什么去德国。\n\n我说，“看音乐节”。\n\n小哥问，“啥音乐节？”\n\n我回答，“Wacken金属音乐节”。\n\n然后他漏出一个鄙夷的眼神:“你最喜欢那个乐队？”\n\n我想了想说，“当然是Nightwish (芬兰引以为傲的国宝级乐队)”。然后小哥笑了，就放行了。\n\n<!-- more -->\n\n到了法兰克福之后，感觉是这是一座非常现代化的城市。机场很大，不愧为欧洲第二航空交通枢纽。之后便搭乘轻轨S9号线从机场去到了位于中央火车站附近的酒店。\n\n一路上没有遇见什么难民，火车站附近有些吉普赛人。总体上来说，感觉很安全，并没有感受到所谓“难民危机”的气息。\n\n## Day 2 弗莱堡\n\n一大早就去取车，想早点开车去黑森林（弗莱堡）玩，结果管理员找不到给我准备的车，在停车场转了半个小时才把车给我。\n\n欧洲市区里开车实在是太惊险，路窄，人多，而且规矩很多很复杂x。\n\n到了高速公路就可以放飞自我了。我开的是Opel欧宝Mokka X ecotec 1.4T，这辆车官方定的最高时速是195km/h，被我开到了200km/h。路上的车都非常守规矩，驾驶体验极好。\n\n弗莱堡算是一个大学城，以学生居多。整个城市就在黑森林内，居民区分布在几个山谷中间。这里的水是全德国最干净的，直接来自黑森林的山泉水。面积巨大的树林区域提供了强大的净水能力，和强大的空气净化能力。\n\n到黑森林看了之后，我才感受到什么叫艺术源于生活。所以这边会有小红帽，白雪公主，邪恶的女巫，聪明的猎人。黑压压的一大片森林，树又高又大又密。而且还有长相奇怪的大石头…\n\n<img src=\"https://qiniu.plusplus7.com/blackforest.png-60percent\" />\n\n老师给我看了冬天的照片，感觉很像undertale里面雪镇的样子，很漂亮。\n\n晚上去住店遇到了一个态度极其不好的德国店主xwx，嫌我入住时间太晚了，影响了大家的休息。而且店里都没有WiFi，我要去booking上给他打差评！\n\n感觉对这家店印象很差，准备第二天早点走。\n\n## Day 3 卢塞恩\n\n今天是愉快的一天！\n\n在巴塞尔很愉快地拍到了三国交界和莱茵河，然后买了瑞士的高速卡，可以入境瑞士啦！\n\n去卢塞恩的一路上都是很美很美的景色，路边有牧场有农场，感觉随手一拍都是windows桌面。\n\n来到卢塞恩，直接去找酒店。\n\n我为了贪便宜，专门订了一个很偏僻的酒店，在阿尔卑斯山-皮拉图斯峰的山脊上。没有公共交通直达，也离景点什么的很远，所以算是比较冷门的地方。开车上山一路上是很惊险的…路很窄，有些地方只能让一辆车经过，开起来挺吓人。\n\n不过我到了之后，感觉这一切都是值得的！窗外景色太美了，我直接都看傻了。酒店的位置有一定的海拔高度，可以看到卢塞恩湖，也可以直接看到皮拉图斯峰的主峰。即使是夏天，但是也有少量积雪覆盖，很漂亮。\n\n<img src=\"https://qiniu.plusplus7.com/luzerne.jpg-fullpercent\" />\n\n山上一片片的树林，空气清新，景色优美，是一个徒步的好地方！\n\n晚上去吃了卢塞恩最有名的芝士火锅店，这边除了能吃到正宗的芝士火锅，并且晚上7：30之后会有瑞士传统文化的演出。\n\n我去的时候是7：46，正好是演出开始不久。一开始是音乐秀，几位老爷子，弹手风琴，钢琴，大提琴。\n\n<img src=\"https://qiniu.plusplus7.com/cheesefondue.png-60percent\" />\n\n还有瑞士的一种传统乐器-阿尔卑斯号角，大概是这样xwx。\n\n<img src=\"https://qiniu.plusplus7.com/alps_horn.jpg-fullpercent\" />\n\n然后还有观众互动环节什么的。\n\n芝士火锅感觉很不错！大概就是把很多芝士放到小锅里，然后用火煮。加上一些红酒什么的，这样芝士不会太快凝聚。芝士全部煮融化之后，就用小叉子插一块切成正方体的小面包到锅里过一圈芝士，然后拿到空中，稍等一下，让芝士略微有点凝固，然后就一起放进嘴里。\n\n就是吃完以后特别的腻…大概回去之后，会有一段时间不想吃芝士了…\n\n不过吃饭的时候，几位老爷子表演的节目是真心好。所有的音乐都是现场演奏，而且有很多对瑞士传统文化的介绍，还有让观众上台体验，节目效果好，观众参与度高。我觉得这算是真正的文化输出了。\n\n我们国家啥时候能有这样的餐厅呢emmmm\n\n还有一个吐槽，就是我在点晚餐的时候，没有注意到菜单的内容。因为菜单是德语法语写的，看起来很费劲。所以我就点了一个套餐A，加一大杯啤酒。\n\n第一道菜是芝士火锅。我吃完就感觉很饱了，想着应该就会上餐后甜品了吧。\n\n<img src=\"https://qiniu.plusplus7.com/first_course.jpg-20percert\" />\n\n我把锅里的芝士都吃完时，锅底上糊了一层芝士的锅巴。服务员说这个也该吃掉。\n\n<img src=\"https://qiniu.plusplus7.com/1.5course.jpg-20percert\" />\n\n所以这个算是第1.5道菜吧。\n\n结果他端上第二道菜时，说了一句“Enjoy your appetizer salad”（请享受您的开胃沙拉）。我当时就“？？？”，什么叫开胃沙拉…难道正菜还没上吗。\n\n<img src=\"https://qiniu.plusplus7.com/second_course.jpg-20percert\" />\n\n答案是肯定的，我吃完沙拉，他就上了第三道菜-正菜，大份土豆泥+一根白香肠…我看得我都快哭了…我感觉很撑了已经..\n\n<img src=\"https://qiniu.plusplus7.com/third_course.jpg-20percert\" />\n\n最后还有第四道菜，甜品，是一个插着瑞士旗的奶油冰淇淋。\n\n<img src=\"https://qiniu.plusplus7.com/forth_course.jpg-20percert\" />\n\n吃完之后，我是彻底满足了。不仅吃得很撑，还在边吃边看演出，了解很多瑞士的传统文化，学到了很多。\n\n吃完之后，在卢塞恩湖附近转了转就回去啦，因为喝了一些啤酒，所以不敢呆太久，就开车回去了。\n\n开车回去之后，我才反映过来…我是不是酒驾了…喝了一大杯啤酒，而且芝士火锅里面也是加酒的XwX…\n\n查了一下瑞士的法律，还好他们其实是允许酒驾的，只要吹气酒精浓度不超过0.25mg/l或者血液酒精浓度不超过0.05%就好。我没喝太多，所以应该没事XwX没想到我第一次酒驾居然是在瑞士。回国之后要好好遵守规定，不能酒后驾驶咳咳。\n\n<img src=\"https://qiniu.plusplus7.com/alcohol.png-60percent\" />\n\n## Day 4 斯图加特\n\n今天开车从瑞士回到了德国，来到了德国斯图加特，去参观了梅赛德斯奔驰博物馆。\n\n虽然不是一个汽车迷吧，但是汽车的历史什么的还是可以了解一下，毕竟世界上第一辆汽车就是出自卡尔·本茨。\n\n学习到了很多汽车的历史，从世界上第一款只有1.1马力的发动机，到现在的超级跑车的演变史。这个博物馆一共有8层楼，可以让人逛一天。\n\n在一楼还有汽车体验中心，可以去亲身去坐一下百万豪车XwX。也就只是坐一下233，只能拍拍照，不能启动什么的。\n\n## Day 5 卢森堡\n\n今天早早地就从斯图加特赶往卢森堡。计划3个小时赶到，然而花了5个小时。。\n\n因为路上先是高速公路封路，因为要清理路上的落叶……然后我就绕道一条乡间小路，没想到路上遇到了别人发生车祸，应该是一个骑摩托车的和汽车相撞，感觉没什么大碍，救护车来了，警车也来了。不过路又不能走了…所以我在路上饶了一大圈才又重新回到高速公路。\n\n不过因此而跑到德国的小山村里面去看了。看到了他们的城镇大厅，伐木场，铁匠铺，学校，教堂。感觉这些建筑的风格，和以前玩得魔兽争霸里面的人族建筑一模一样233333\n\n然后到卢森堡之后，直接开车到了城中心，那边有一个巨大的停车场。然后走路就可以到各个景点，超级方便。\n\n\n\n然后就吃了网红Chocospoon。大概就是把巧克力方块，用木勺放进热牛奶里，然后看着巧克力慢慢融化，最后把他们喝掉xwx，就这样。大概要5.75欧元，50块人民币一杯。感觉不太划算，而且他们的服务员态度很冷淡xwx，差评。\n\n<img src=\"https://qiniu.plusplus7.com/chocospoon.jpg-20percert\" />\n\n本来还想试试法国菜的qwq，卢森堡有好几家米其林餐厅。但是这些餐厅超级傲娇，因为今天是星期天，所以大多数都不开业。唯一一家开业的Le Sud，今天客人招待的够多了，让我改天再去…\n\n我现在已经开车从卢森堡到比利时首都布鲁塞尔附近的一个小乡村里了，住在一家老夫妇家里。他们把阁楼装扮成了客房，来接待旅客。\n\n房子附近就全是农田，这些农田都是那种小麦田，黄黄的，然后卷成椭圆形放在田里的，特别像绝地求生里面，那个麦田的感觉233333\n\n## Day 6 布鲁塞尔\n\n在老夫妇家饱餐了一顿正宗的法式早点之后，赶到了布鲁塞尔。\n\n老爷爷人挺不错的，听说我要去布鲁塞尔，还特地给我说了一个停车很方便的地方。因为语言不通xwx，我不会法语，他不会英语，所以沟通很费劲，但是老爷爷还是很耐心地给我解释清热。\n\n到了布鲁塞尔之后，感觉这是一个对自驾游客很友好的城市，停车不贵，而且很方便。\n\n去看了一下具有400年历史的撒尿小童雕像xwx，感觉真的没啥好看的，很小，而且旁边围了一圈游客。\n\n还去传说中的布鲁塞尔大广场看了看，这是被誉为“欧洲最美的广场”，始建于12世纪。广场上全是游客，还有吉普赛人xwx。\n\n<img src=\"https://qiniu.plusplus7.com/bruxxel.png-20percert\" />\n\n然后就开车去了阿姆斯特丹。\n\n## Day 7 阿姆斯特丹\n\n荷兰给人体验就不是很好了…一是感觉这个城市商业气息很重，卖给游客的东西都很贵，停车费是比利时，德国的4倍。二是整个城市都弥漫着一股大麻味…我有点受不了呃..还有就是在水坝广场，看到了“邪教”组织在传教qwq（对，就是那个宣扬真善忍的教x）照片就不发了，我怕被查水表…\n\n之后就去看了那个传说中的性博物馆xwx\n\n感觉那个也挺坑的，就是收集了各个地方，各个国家的性方面的历史资料\n\n比如中国的就有金瓶梅什么的，日本就是源氏物语什么的。\n\n然后还有很多恶趣味的模型什么的，而且地方也很小，感觉值不会票价x\n\n然后还去吃了荷兰的网红薯条，说实话我感觉这个和在别的地方吃到的，没啥区别。只是这个是在水坝广场卖的而已…\n\n所以总体来说荷兰给我感觉不太好…商业气息很重，游客很多。\n\n## Day 8 不来梅哈芬\n\n来到了一个港口城市，不来梅哈芬。\n\n感觉没啥看的..港口都被封起来了，能看到的就是一片盐碱地…\n\n不过海边确实挺舒服的，太阳很温暖，海风很舒服\n\n之后就开车去Wacken啦，然后找了半天才找到停车场。\n\n去登记之后，得知露营的地方在另一边，于是又开车转了半天才找到露营地。此时已经是半夜1点了..而且因为人太多了，我又来的很晚，所以露营地到舞台大约要走半个小时…这就是我这几天微信运动上每天都走了将近3w步的原因…\n\n因为没有带帐篷，所以就在车上用睡袋裹着睡得。总体感觉还是挺安全的，到处都是警察。\n\n## Day 9 瓦肯音乐节\n\n我早上起来准备吃泡面，但是我打开了一桶之后才意识到..为了环保，德国的塑料是被严格控制的，比如一瓶可乐要多少0.25欧元的押金，之后当你把瓶子回收之后才会把瓶子钱退给你。所以可能也是这个原因，泡面里面也是没有塑料叉子的…于是我就没办法，只能泡好之后直接拿着泡面碗喝…\n\n然后就不小心被旁边的比利时老太太看见，把她吓坏了..她说：“我知道中国人都用筷子，在德国虽然没有筷子，但你也可以试试叉子呀…”\n\n之后就去Wacken的场地看了看。很宽，里面有卖吃的，卖CD的，卖衣服的，都是和金属乐有关，而且店面装修都很到位，很有音乐节的气氛。特别是废土区的装修，可以说是很硬核了\n\n<img src=\"https://qiniu.plusplus7.com/wacken.jpg-20percert\" />\n\n晚上在很前排的位置听了Judas Priest的演出。这个是金属乐历史上最伟大的乐队，没有之一，他们对重金属的发展做出了卓越的贡献。主唱更是被称为”上帝本人（Metal God）“。这位老爷子今年都66岁了，依旧陪我们嗨了一个半小时，而且全程劲爆，超级嗨。不过感觉确实他们都老了，这是成立于1971年的乐队，主唱虽然水平依旧，但是能感觉出他唱得很费力了，一直都是双手捧着话筒在唱，真怕老爷子唱着唱着突然倒下了。能赶在他们退休之前听一场，感觉也是很满足了。\n\n## Day 10 瓦肯音乐节\n\n今天去广场上的电竞区看了看，惊奇地发现里面摆了超级多电脑…可以随便进去van游戏xwx\n\n然后我就开心地玩了两把欧服的吃鸡和DotA2\n\n下午看了EPICA的演出，虽然这支乐队挺大牌的但是我还是不太喜欢他们的歌，总感觉缺点什么..不过他们的女主唱唱功很不错，就是歌不怎么好听\n\n为了在最前排看Nightwish的演出，我提前了将近5个小时赶到Faster主舞台，这时主舞台正在表演的是一个旋律死亡金属乐队。我大概占到了第三排的位置，我前一排的是一个哥特萝莉和一个看起来像刚刚放学的乖乖女，我问“你们都喜欢这种重口味的金属乐吗”。她们表示“不，我们是Nightwish的粉丝，我们是来占位置”[捂脸][捂脸]最后站了五个小时，终于如愿以偿听了一次Nightwish的现场，心满意足[耶]\n\n## Day 11 爱森纳赫\n\n今天做了一回文艺青年，离开了金属音乐节，去到了巴赫的出生地，一个充满童话气息的小山城，爱森纳赫。\n\n到了之后感觉确实是很漂亮呢，所有的建筑风格都想是童话里的那样，而且感觉音乐的气氛很浓厚。据说这里，在17世纪的时候，就是吟游诗人和音乐家们聚会演奏的场所。\n\n今天赶了一天路，早点休息啦～\n\n## Day 12 爱森纳赫\n\n今天去看了巴赫故居，其实就是一个博物馆啦～\n\n门票挺贵的qwq，10欧元（80人民币）。不过里面的内容很丰富，有很多巴赫的手稿原件，还有工作人员每个小时来用巴洛克时期的乐器来演奏巴赫的作品，感觉很不错呢！现场听了一次羽管键琴的演奏，非常有味道。\n\n下午看了一下附近的一个城堡，然后就匆匆地赶回法兰克福了。感觉城堡也没啥看的…内部不开放，外面也看不到啥有意思的东西。\n\n明天是上午7:45的飞机。我觉得去酒店休息一晚再去机场的话可能赶不到，因为太早了没有火车去机场，德国出租车也很难叫的感觉。所以我准备去机场先，然后在机场磨一晚上，第二天上飞机好好睡一觉好了，就当是倒时差。\n\n## Day 13 法兰克福 - 曼彻斯特 - 拉斯维加斯\n\n早上7点45飞机到曼彻斯特\n\n然后9点55转机到拉斯维加斯\n\n从曼彻斯特到拉斯维加斯坐的是Thomas Cook航班..体验极差..空乘在不停的说话，很吵。然后饭超难吃。\n\n## Day 14 - 19 拉斯维加斯\n\n我在这儿参加的一个Defcon信息安全会议。\n\n和这个会议一起开的，还有一个叫Queercon的会议。\n\n是面向信息安全行业里的各种少数派群体，比如LGBTQ+, Furry, Kinkster\n\n[表情]我都惊了，见到了好多兽装大佬\n\n还有各种穿皮♂衣的BDSM大佬\n\n<img src=\"https://qiniu.plusplus7.com/queercon.png-20percert\" />\n\n我超级想要他们的那个[Furry吊牌](https://twitter.com/B00M_s1ang/status/1027730523936804864)\n\n可以亮！\n\n而且摁鼻子还能叫\n\n<img src=\"https://qiniu.plusplus7.com/furry.png-fullpercent\" />\n\n嘤～去Defcon Furs社区看了看，就是一个小房间，然后里面有几个人。\n\n我突然就社恐发作，不敢和任何人说话..然后呆了5分钟就走了。\n\n<img src=\"https://qiniu.plusplus7.com/furryguy.jpg-fullpercent\" />\n\n\n## Day 20 - 27 西雅图\n\n呃。。\n\n飞机在西雅图机场停留了好久才放我们下飞机。\n\n本来是提前了半个小时到达，结果硬生生拖到了延误一个半小时。\n\n去Bellevue老街吃到了好吃的New York Streak。\n\n\n看到了太平洋！\n\n去到了海边！\n\n本来想去雨林看看。导航搜“Rain Forest”，然后出来一个Rain Forest Inn。我就以为这里就是雨林所在地。但其实这个只是一个叫Rain Forest的旅馆，离真正的雨林离得超级远…\n\n所以就没去了。。\n\n\n去俄勒冈的波特兰市买东西，因为那边是没有消费税的州，所以买东西会便宜一些。\n\n之后还想去Tillamook Bay看看，因为那边是奇异人生中Arcadia Bay的原型。\n\n但是那边有点远，来回要3个小时，再加上时间有点晚，所以就不去了QAQ…\n\n下次一定要去!\n","slug":"27days.journal","published":1,"updated":"2019-01-14T17:09:22.708Z","_id":"cjpiib5n60000ibvf05nj1lks","photos":[],"link":"","content":"<h2 id=\"Day-1-法兰克福\"><a href=\"#Day-1-法兰克福\" class=\"headerlink\" title=\"Day 1 法兰克福\"></a>Day 1 法兰克福</h2><p>因为是从芬兰进入欧洲的，所以是在芬兰过的海关。</p>\n<p>海关小哥神情很严肃，认真地看了我所有的资料，然后问我为什么去德国。</p>\n<p>我说，“看音乐节”。</p>\n<p>小哥问，“啥音乐节？”</p>\n<p>我回答，“Wacken金属音乐节”。</p>\n<p>然后他漏出一个鄙夷的眼神:“你最喜欢那个乐队？”</p>\n<p>我想了想说，“当然是Nightwish (芬兰引以为傲的国宝级乐队)”。然后小哥笑了，就放行了。</p>\n<a id=\"more\"></a>\n<p>到了法兰克福之后，感觉是这是一座非常现代化的城市。机场很大，不愧为欧洲第二航空交通枢纽。之后便搭乘轻轨S9号线从机场去到了位于中央火车站附近的酒店。</p>\n<p>一路上没有遇见什么难民，火车站附近有些吉普赛人。总体上来说，感觉很安全，并没有感受到所谓“难民危机”的气息。</p>\n<h2 id=\"Day-2-弗莱堡\"><a href=\"#Day-2-弗莱堡\" class=\"headerlink\" title=\"Day 2 弗莱堡\"></a>Day 2 弗莱堡</h2><p>一大早就去取车，想早点开车去黑森林（弗莱堡）玩，结果管理员找不到给我准备的车，在停车场转了半个小时才把车给我。</p>\n<p>欧洲市区里开车实在是太惊险，路窄，人多，而且规矩很多很复杂x。</p>\n<p>到了高速公路就可以放飞自我了。我开的是Opel欧宝Mokka X ecotec 1.4T，这辆车官方定的最高时速是195km/h，被我开到了200km/h。路上的车都非常守规矩，驾驶体验极好。</p>\n<p>弗莱堡算是一个大学城，以学生居多。整个城市就在黑森林内，居民区分布在几个山谷中间。这里的水是全德国最干净的，直接来自黑森林的山泉水。面积巨大的树林区域提供了强大的净水能力，和强大的空气净化能力。</p>\n<p>到黑森林看了之后，我才感受到什么叫艺术源于生活。所以这边会有小红帽，白雪公主，邪恶的女巫，聪明的猎人。黑压压的一大片森林，树又高又大又密。而且还有长相奇怪的大石头…</p>\n<p><img src=\"https://qiniu.plusplus7.com/blackforest.png-60percent\"></p>\n<p>老师给我看了冬天的照片，感觉很像undertale里面雪镇的样子，很漂亮。</p>\n<p>晚上去住店遇到了一个态度极其不好的德国店主xwx，嫌我入住时间太晚了，影响了大家的休息。而且店里都没有WiFi，我要去booking上给他打差评！</p>\n<p>感觉对这家店印象很差，准备第二天早点走。</p>\n<h2 id=\"Day-3-卢塞恩\"><a href=\"#Day-3-卢塞恩\" class=\"headerlink\" title=\"Day 3 卢塞恩\"></a>Day 3 卢塞恩</h2><p>今天是愉快的一天！</p>\n<p>在巴塞尔很愉快地拍到了三国交界和莱茵河，然后买了瑞士的高速卡，可以入境瑞士啦！</p>\n<p>去卢塞恩的一路上都是很美很美的景色，路边有牧场有农场，感觉随手一拍都是windows桌面。</p>\n<p>来到卢塞恩，直接去找酒店。</p>\n<p>我为了贪便宜，专门订了一个很偏僻的酒店，在阿尔卑斯山-皮拉图斯峰的山脊上。没有公共交通直达，也离景点什么的很远，所以算是比较冷门的地方。开车上山一路上是很惊险的…路很窄，有些地方只能让一辆车经过，开起来挺吓人。</p>\n<p>不过我到了之后，感觉这一切都是值得的！窗外景色太美了，我直接都看傻了。酒店的位置有一定的海拔高度，可以看到卢塞恩湖，也可以直接看到皮拉图斯峰的主峰。即使是夏天，但是也有少量积雪覆盖，很漂亮。</p>\n<p><img src=\"https://qiniu.plusplus7.com/luzerne.jpg-fullpercent\"></p>\n<p>山上一片片的树林，空气清新，景色优美，是一个徒步的好地方！</p>\n<p>晚上去吃了卢塞恩最有名的芝士火锅店，这边除了能吃到正宗的芝士火锅，并且晚上7：30之后会有瑞士传统文化的演出。</p>\n<p>我去的时候是7：46，正好是演出开始不久。一开始是音乐秀，几位老爷子，弹手风琴，钢琴，大提琴。</p>\n<p><img src=\"https://qiniu.plusplus7.com/cheesefondue.png-60percent\"></p>\n<p>还有瑞士的一种传统乐器-阿尔卑斯号角，大概是这样xwx。</p>\n<p><img src=\"https://qiniu.plusplus7.com/alps_horn.jpg-fullpercent\"></p>\n<p>然后还有观众互动环节什么的。</p>\n<p>芝士火锅感觉很不错！大概就是把很多芝士放到小锅里，然后用火煮。加上一些红酒什么的，这样芝士不会太快凝聚。芝士全部煮融化之后，就用小叉子插一块切成正方体的小面包到锅里过一圈芝士，然后拿到空中，稍等一下，让芝士略微有点凝固，然后就一起放进嘴里。</p>\n<p>就是吃完以后特别的腻…大概回去之后，会有一段时间不想吃芝士了…</p>\n<p>不过吃饭的时候，几位老爷子表演的节目是真心好。所有的音乐都是现场演奏，而且有很多对瑞士传统文化的介绍，还有让观众上台体验，节目效果好，观众参与度高。我觉得这算是真正的文化输出了。</p>\n<p>我们国家啥时候能有这样的餐厅呢emmmm</p>\n<p>还有一个吐槽，就是我在点晚餐的时候，没有注意到菜单的内容。因为菜单是德语法语写的，看起来很费劲。所以我就点了一个套餐A，加一大杯啤酒。</p>\n<p>第一道菜是芝士火锅。我吃完就感觉很饱了，想着应该就会上餐后甜品了吧。</p>\n<p><img src=\"https://qiniu.plusplus7.com/first_course.jpg-20percert\"></p>\n<p>我把锅里的芝士都吃完时，锅底上糊了一层芝士的锅巴。服务员说这个也该吃掉。</p>\n<p><img src=\"https://qiniu.plusplus7.com/1.5course.jpg-20percert\"></p>\n<p>所以这个算是第1.5道菜吧。</p>\n<p>结果他端上第二道菜时，说了一句“Enjoy your appetizer salad”（请享受您的开胃沙拉）。我当时就“？？？”，什么叫开胃沙拉…难道正菜还没上吗。</p>\n<p><img src=\"https://qiniu.plusplus7.com/second_course.jpg-20percert\"></p>\n<p>答案是肯定的，我吃完沙拉，他就上了第三道菜-正菜，大份土豆泥+一根白香肠…我看得我都快哭了…我感觉很撑了已经..</p>\n<p><img src=\"https://qiniu.plusplus7.com/third_course.jpg-20percert\"></p>\n<p>最后还有第四道菜，甜品，是一个插着瑞士旗的奶油冰淇淋。</p>\n<p><img src=\"https://qiniu.plusplus7.com/forth_course.jpg-20percert\"></p>\n<p>吃完之后，我是彻底满足了。不仅吃得很撑，还在边吃边看演出，了解很多瑞士的传统文化，学到了很多。</p>\n<p>吃完之后，在卢塞恩湖附近转了转就回去啦，因为喝了一些啤酒，所以不敢呆太久，就开车回去了。</p>\n<p>开车回去之后，我才反映过来…我是不是酒驾了…喝了一大杯啤酒，而且芝士火锅里面也是加酒的XwX…</p>\n<p>查了一下瑞士的法律，还好他们其实是允许酒驾的，只要吹气酒精浓度不超过0.25mg/l或者血液酒精浓度不超过0.05%就好。我没喝太多，所以应该没事XwX没想到我第一次酒驾居然是在瑞士。回国之后要好好遵守规定，不能酒后驾驶咳咳。</p>\n<p><img src=\"https://qiniu.plusplus7.com/alcohol.png-60percent\"></p>\n<h2 id=\"Day-4-斯图加特\"><a href=\"#Day-4-斯图加特\" class=\"headerlink\" title=\"Day 4 斯图加特\"></a>Day 4 斯图加特</h2><p>今天开车从瑞士回到了德国，来到了德国斯图加特，去参观了梅赛德斯奔驰博物馆。</p>\n<p>虽然不是一个汽车迷吧，但是汽车的历史什么的还是可以了解一下，毕竟世界上第一辆汽车就是出自卡尔·本茨。</p>\n<p>学习到了很多汽车的历史，从世界上第一款只有1.1马力的发动机，到现在的超级跑车的演变史。这个博物馆一共有8层楼，可以让人逛一天。</p>\n<p>在一楼还有汽车体验中心，可以去亲身去坐一下百万豪车XwX。也就只是坐一下233，只能拍拍照，不能启动什么的。</p>\n<h2 id=\"Day-5-卢森堡\"><a href=\"#Day-5-卢森堡\" class=\"headerlink\" title=\"Day 5 卢森堡\"></a>Day 5 卢森堡</h2><p>今天早早地就从斯图加特赶往卢森堡。计划3个小时赶到，然而花了5个小时。。</p>\n<p>因为路上先是高速公路封路，因为要清理路上的落叶……然后我就绕道一条乡间小路，没想到路上遇到了别人发生车祸，应该是一个骑摩托车的和汽车相撞，感觉没什么大碍，救护车来了，警车也来了。不过路又不能走了…所以我在路上饶了一大圈才又重新回到高速公路。</p>\n<p>不过因此而跑到德国的小山村里面去看了。看到了他们的城镇大厅，伐木场，铁匠铺，学校，教堂。感觉这些建筑的风格，和以前玩得魔兽争霸里面的人族建筑一模一样233333</p>\n<p>然后到卢森堡之后，直接开车到了城中心，那边有一个巨大的停车场。然后走路就可以到各个景点，超级方便。</p>\n<p>然后就吃了网红Chocospoon。大概就是把巧克力方块，用木勺放进热牛奶里，然后看着巧克力慢慢融化，最后把他们喝掉xwx，就这样。大概要5.75欧元，50块人民币一杯。感觉不太划算，而且他们的服务员态度很冷淡xwx，差评。</p>\n<p><img src=\"https://qiniu.plusplus7.com/chocospoon.jpg-20percert\"></p>\n<p>本来还想试试法国菜的qwq，卢森堡有好几家米其林餐厅。但是这些餐厅超级傲娇，因为今天是星期天，所以大多数都不开业。唯一一家开业的Le Sud，今天客人招待的够多了，让我改天再去…</p>\n<p>我现在已经开车从卢森堡到比利时首都布鲁塞尔附近的一个小乡村里了，住在一家老夫妇家里。他们把阁楼装扮成了客房，来接待旅客。</p>\n<p>房子附近就全是农田，这些农田都是那种小麦田，黄黄的，然后卷成椭圆形放在田里的，特别像绝地求生里面，那个麦田的感觉233333</p>\n<h2 id=\"Day-6-布鲁塞尔\"><a href=\"#Day-6-布鲁塞尔\" class=\"headerlink\" title=\"Day 6 布鲁塞尔\"></a>Day 6 布鲁塞尔</h2><p>在老夫妇家饱餐了一顿正宗的法式早点之后，赶到了布鲁塞尔。</p>\n<p>老爷爷人挺不错的，听说我要去布鲁塞尔，还特地给我说了一个停车很方便的地方。因为语言不通xwx，我不会法语，他不会英语，所以沟通很费劲，但是老爷爷还是很耐心地给我解释清热。</p>\n<p>到了布鲁塞尔之后，感觉这是一个对自驾游客很友好的城市，停车不贵，而且很方便。</p>\n<p>去看了一下具有400年历史的撒尿小童雕像xwx，感觉真的没啥好看的，很小，而且旁边围了一圈游客。</p>\n<p>还去传说中的布鲁塞尔大广场看了看，这是被誉为“欧洲最美的广场”，始建于12世纪。广场上全是游客，还有吉普赛人xwx。</p>\n<p><img src=\"https://qiniu.plusplus7.com/bruxxel.png-20percert\"></p>\n<p>然后就开车去了阿姆斯特丹。</p>\n<h2 id=\"Day-7-阿姆斯特丹\"><a href=\"#Day-7-阿姆斯特丹\" class=\"headerlink\" title=\"Day 7 阿姆斯特丹\"></a>Day 7 阿姆斯特丹</h2><p>荷兰给人体验就不是很好了…一是感觉这个城市商业气息很重，卖给游客的东西都很贵，停车费是比利时，德国的4倍。二是整个城市都弥漫着一股大麻味…我有点受不了呃..还有就是在水坝广场，看到了“邪教”组织在传教qwq（对，就是那个宣扬真善忍的教x）照片就不发了，我怕被查水表…</p>\n<p>之后就去看了那个传说中的性博物馆xwx</p>\n<p>感觉那个也挺坑的，就是收集了各个地方，各个国家的性方面的历史资料</p>\n<p>比如中国的就有金瓶梅什么的，日本就是源氏物语什么的。</p>\n<p>然后还有很多恶趣味的模型什么的，而且地方也很小，感觉值不会票价x</p>\n<p>然后还去吃了荷兰的网红薯条，说实话我感觉这个和在别的地方吃到的，没啥区别。只是这个是在水坝广场卖的而已…</p>\n<p>所以总体来说荷兰给我感觉不太好…商业气息很重，游客很多。</p>\n<h2 id=\"Day-8-不来梅哈芬\"><a href=\"#Day-8-不来梅哈芬\" class=\"headerlink\" title=\"Day 8 不来梅哈芬\"></a>Day 8 不来梅哈芬</h2><p>来到了一个港口城市，不来梅哈芬。</p>\n<p>感觉没啥看的..港口都被封起来了，能看到的就是一片盐碱地…</p>\n<p>不过海边确实挺舒服的，太阳很温暖，海风很舒服</p>\n<p>之后就开车去Wacken啦，然后找了半天才找到停车场。</p>\n<p>去登记之后，得知露营的地方在另一边，于是又开车转了半天才找到露营地。此时已经是半夜1点了..而且因为人太多了，我又来的很晚，所以露营地到舞台大约要走半个小时…这就是我这几天微信运动上每天都走了将近3w步的原因…</p>\n<p>因为没有带帐篷，所以就在车上用睡袋裹着睡得。总体感觉还是挺安全的，到处都是警察。</p>\n<h2 id=\"Day-9-瓦肯音乐节\"><a href=\"#Day-9-瓦肯音乐节\" class=\"headerlink\" title=\"Day 9 瓦肯音乐节\"></a>Day 9 瓦肯音乐节</h2><p>我早上起来准备吃泡面，但是我打开了一桶之后才意识到..为了环保，德国的塑料是被严格控制的，比如一瓶可乐要多少0.25欧元的押金，之后当你把瓶子回收之后才会把瓶子钱退给你。所以可能也是这个原因，泡面里面也是没有塑料叉子的…于是我就没办法，只能泡好之后直接拿着泡面碗喝…</p>\n<p>然后就不小心被旁边的比利时老太太看见，把她吓坏了..她说：“我知道中国人都用筷子，在德国虽然没有筷子，但你也可以试试叉子呀…”</p>\n<p>之后就去Wacken的场地看了看。很宽，里面有卖吃的，卖CD的，卖衣服的，都是和金属乐有关，而且店面装修都很到位，很有音乐节的气氛。特别是废土区的装修，可以说是很硬核了</p>\n<p><img src=\"https://qiniu.plusplus7.com/wacken.jpg-20percert\"></p>\n<p>晚上在很前排的位置听了Judas Priest的演出。这个是金属乐历史上最伟大的乐队，没有之一，他们对重金属的发展做出了卓越的贡献。主唱更是被称为”上帝本人（Metal God）“。这位老爷子今年都66岁了，依旧陪我们嗨了一个半小时，而且全程劲爆，超级嗨。不过感觉确实他们都老了，这是成立于1971年的乐队，主唱虽然水平依旧，但是能感觉出他唱得很费力了，一直都是双手捧着话筒在唱，真怕老爷子唱着唱着突然倒下了。能赶在他们退休之前听一场，感觉也是很满足了。</p>\n<h2 id=\"Day-10-瓦肯音乐节\"><a href=\"#Day-10-瓦肯音乐节\" class=\"headerlink\" title=\"Day 10 瓦肯音乐节\"></a>Day 10 瓦肯音乐节</h2><p>今天去广场上的电竞区看了看，惊奇地发现里面摆了超级多电脑…可以随便进去van游戏xwx</p>\n<p>然后我就开心地玩了两把欧服的吃鸡和DotA2</p>\n<p>下午看了EPICA的演出，虽然这支乐队挺大牌的但是我还是不太喜欢他们的歌，总感觉缺点什么..不过他们的女主唱唱功很不错，就是歌不怎么好听</p>\n<p>为了在最前排看Nightwish的演出，我提前了将近5个小时赶到Faster主舞台，这时主舞台正在表演的是一个旋律死亡金属乐队。我大概占到了第三排的位置，我前一排的是一个哥特萝莉和一个看起来像刚刚放学的乖乖女，我问“你们都喜欢这种重口味的金属乐吗”。她们表示“不，我们是Nightwish的粉丝，我们是来占位置”[捂脸][捂脸]最后站了五个小时，终于如愿以偿听了一次Nightwish的现场，心满意足[耶]</p>\n<h2 id=\"Day-11-爱森纳赫\"><a href=\"#Day-11-爱森纳赫\" class=\"headerlink\" title=\"Day 11 爱森纳赫\"></a>Day 11 爱森纳赫</h2><p>今天做了一回文艺青年，离开了金属音乐节，去到了巴赫的出生地，一个充满童话气息的小山城，爱森纳赫。</p>\n<p>到了之后感觉确实是很漂亮呢，所有的建筑风格都想是童话里的那样，而且感觉音乐的气氛很浓厚。据说这里，在17世纪的时候，就是吟游诗人和音乐家们聚会演奏的场所。</p>\n<p>今天赶了一天路，早点休息啦～</p>\n<h2 id=\"Day-12-爱森纳赫\"><a href=\"#Day-12-爱森纳赫\" class=\"headerlink\" title=\"Day 12 爱森纳赫\"></a>Day 12 爱森纳赫</h2><p>今天去看了巴赫故居，其实就是一个博物馆啦～</p>\n<p>门票挺贵的qwq，10欧元（80人民币）。不过里面的内容很丰富，有很多巴赫的手稿原件，还有工作人员每个小时来用巴洛克时期的乐器来演奏巴赫的作品，感觉很不错呢！现场听了一次羽管键琴的演奏，非常有味道。</p>\n<p>下午看了一下附近的一个城堡，然后就匆匆地赶回法兰克福了。感觉城堡也没啥看的…内部不开放，外面也看不到啥有意思的东西。</p>\n<p>明天是上午7:45的飞机。我觉得去酒店休息一晚再去机场的话可能赶不到，因为太早了没有火车去机场，德国出租车也很难叫的感觉。所以我准备去机场先，然后在机场磨一晚上，第二天上飞机好好睡一觉好了，就当是倒时差。</p>\n<h2 id=\"Day-13-法兰克福-曼彻斯特-拉斯维加斯\"><a href=\"#Day-13-法兰克福-曼彻斯特-拉斯维加斯\" class=\"headerlink\" title=\"Day 13 法兰克福 - 曼彻斯特 - 拉斯维加斯\"></a>Day 13 法兰克福 - 曼彻斯特 - 拉斯维加斯</h2><p>早上7点45飞机到曼彻斯特</p>\n<p>然后9点55转机到拉斯维加斯</p>\n<p>从曼彻斯特到拉斯维加斯坐的是Thomas Cook航班..体验极差..空乘在不停的说话，很吵。然后饭超难吃。</p>\n<h2 id=\"Day-14-19-拉斯维加斯\"><a href=\"#Day-14-19-拉斯维加斯\" class=\"headerlink\" title=\"Day 14 - 19 拉斯维加斯\"></a>Day 14 - 19 拉斯维加斯</h2><p>我在这儿参加的一个Defcon信息安全会议。</p>\n<p>和这个会议一起开的，还有一个叫Queercon的会议。</p>\n<p>是面向信息安全行业里的各种少数派群体，比如LGBTQ+, Furry, Kinkster</p>\n<p>[表情]我都惊了，见到了好多兽装大佬</p>\n<p>还有各种穿皮♂衣的BDSM大佬</p>\n<p><img src=\"https://qiniu.plusplus7.com/queercon.png-20percert\"></p>\n<p>我超级想要他们的那个<a href=\"https://twitter.com/B00M_s1ang/status/1027730523936804864\" target=\"_blank\" rel=\"noopener\">Furry吊牌</a></p>\n<p>可以亮！</p>\n<p>而且摁鼻子还能叫</p>\n<p><img src=\"https://qiniu.plusplus7.com/furry.png-fullpercent\"></p>\n<p>嘤～去Defcon Furs社区看了看，就是一个小房间，然后里面有几个人。</p>\n<p>我突然就社恐发作，不敢和任何人说话..然后呆了5分钟就走了。</p>\n<p><img src=\"https://qiniu.plusplus7.com/furryguy.jpg-fullpercent\"></p>\n<h2 id=\"Day-20-27-西雅图\"><a href=\"#Day-20-27-西雅图\" class=\"headerlink\" title=\"Day 20 - 27 西雅图\"></a>Day 20 - 27 西雅图</h2><p>呃。。</p>\n<p>飞机在西雅图机场停留了好久才放我们下飞机。</p>\n<p>本来是提前了半个小时到达，结果硬生生拖到了延误一个半小时。</p>\n<p>去Bellevue老街吃到了好吃的New York Streak。</p>\n<p>看到了太平洋！</p>\n<p>去到了海边！</p>\n<p>本来想去雨林看看。导航搜“Rain Forest”，然后出来一个Rain Forest Inn。我就以为这里就是雨林所在地。但其实这个只是一个叫Rain Forest的旅馆，离真正的雨林离得超级远…</p>\n<p>所以就没去了。。</p>\n<p>去俄勒冈的波特兰市买东西，因为那边是没有消费税的州，所以买东西会便宜一些。</p>\n<p>之后还想去Tillamook Bay看看，因为那边是奇异人生中Arcadia Bay的原型。</p>\n<p>但是那边有点远，来回要3个小时，再加上时间有点晚，所以就不去了QAQ…</p>\n<p>下次一定要去!</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Day-1-法兰克福\"><a href=\"#Day-1-法兰克福\" class=\"headerlink\" title=\"Day 1 法兰克福\"></a>Day 1 法兰克福</h2><p>因为是从芬兰进入欧洲的，所以是在芬兰过的海关。</p>\n<p>海关小哥神情很严肃，认真地看了我所有的资料，然后问我为什么去德国。</p>\n<p>我说，“看音乐节”。</p>\n<p>小哥问，“啥音乐节？”</p>\n<p>我回答，“Wacken金属音乐节”。</p>\n<p>然后他漏出一个鄙夷的眼神:“你最喜欢那个乐队？”</p>\n<p>我想了想说，“当然是Nightwish (芬兰引以为傲的国宝级乐队)”。然后小哥笑了，就放行了。</p>","more":"<p>到了法兰克福之后，感觉是这是一座非常现代化的城市。机场很大，不愧为欧洲第二航空交通枢纽。之后便搭乘轻轨S9号线从机场去到了位于中央火车站附近的酒店。</p>\n<p>一路上没有遇见什么难民，火车站附近有些吉普赛人。总体上来说，感觉很安全，并没有感受到所谓“难民危机”的气息。</p>\n<h2 id=\"Day-2-弗莱堡\"><a href=\"#Day-2-弗莱堡\" class=\"headerlink\" title=\"Day 2 弗莱堡\"></a>Day 2 弗莱堡</h2><p>一大早就去取车，想早点开车去黑森林（弗莱堡）玩，结果管理员找不到给我准备的车，在停车场转了半个小时才把车给我。</p>\n<p>欧洲市区里开车实在是太惊险，路窄，人多，而且规矩很多很复杂x。</p>\n<p>到了高速公路就可以放飞自我了。我开的是Opel欧宝Mokka X ecotec 1.4T，这辆车官方定的最高时速是195km/h，被我开到了200km/h。路上的车都非常守规矩，驾驶体验极好。</p>\n<p>弗莱堡算是一个大学城，以学生居多。整个城市就在黑森林内，居民区分布在几个山谷中间。这里的水是全德国最干净的，直接来自黑森林的山泉水。面积巨大的树林区域提供了强大的净水能力，和强大的空气净化能力。</p>\n<p>到黑森林看了之后，我才感受到什么叫艺术源于生活。所以这边会有小红帽，白雪公主，邪恶的女巫，聪明的猎人。黑压压的一大片森林，树又高又大又密。而且还有长相奇怪的大石头…</p>\n<p><img src=\"https://qiniu.plusplus7.com/blackforest.png-60percent\"></p>\n<p>老师给我看了冬天的照片，感觉很像undertale里面雪镇的样子，很漂亮。</p>\n<p>晚上去住店遇到了一个态度极其不好的德国店主xwx，嫌我入住时间太晚了，影响了大家的休息。而且店里都没有WiFi，我要去booking上给他打差评！</p>\n<p>感觉对这家店印象很差，准备第二天早点走。</p>\n<h2 id=\"Day-3-卢塞恩\"><a href=\"#Day-3-卢塞恩\" class=\"headerlink\" title=\"Day 3 卢塞恩\"></a>Day 3 卢塞恩</h2><p>今天是愉快的一天！</p>\n<p>在巴塞尔很愉快地拍到了三国交界和莱茵河，然后买了瑞士的高速卡，可以入境瑞士啦！</p>\n<p>去卢塞恩的一路上都是很美很美的景色，路边有牧场有农场，感觉随手一拍都是windows桌面。</p>\n<p>来到卢塞恩，直接去找酒店。</p>\n<p>我为了贪便宜，专门订了一个很偏僻的酒店，在阿尔卑斯山-皮拉图斯峰的山脊上。没有公共交通直达，也离景点什么的很远，所以算是比较冷门的地方。开车上山一路上是很惊险的…路很窄，有些地方只能让一辆车经过，开起来挺吓人。</p>\n<p>不过我到了之后，感觉这一切都是值得的！窗外景色太美了，我直接都看傻了。酒店的位置有一定的海拔高度，可以看到卢塞恩湖，也可以直接看到皮拉图斯峰的主峰。即使是夏天，但是也有少量积雪覆盖，很漂亮。</p>\n<p><img src=\"https://qiniu.plusplus7.com/luzerne.jpg-fullpercent\"></p>\n<p>山上一片片的树林，空气清新，景色优美，是一个徒步的好地方！</p>\n<p>晚上去吃了卢塞恩最有名的芝士火锅店，这边除了能吃到正宗的芝士火锅，并且晚上7：30之后会有瑞士传统文化的演出。</p>\n<p>我去的时候是7：46，正好是演出开始不久。一开始是音乐秀，几位老爷子，弹手风琴，钢琴，大提琴。</p>\n<p><img src=\"https://qiniu.plusplus7.com/cheesefondue.png-60percent\"></p>\n<p>还有瑞士的一种传统乐器-阿尔卑斯号角，大概是这样xwx。</p>\n<p><img src=\"https://qiniu.plusplus7.com/alps_horn.jpg-fullpercent\"></p>\n<p>然后还有观众互动环节什么的。</p>\n<p>芝士火锅感觉很不错！大概就是把很多芝士放到小锅里，然后用火煮。加上一些红酒什么的，这样芝士不会太快凝聚。芝士全部煮融化之后，就用小叉子插一块切成正方体的小面包到锅里过一圈芝士，然后拿到空中，稍等一下，让芝士略微有点凝固，然后就一起放进嘴里。</p>\n<p>就是吃完以后特别的腻…大概回去之后，会有一段时间不想吃芝士了…</p>\n<p>不过吃饭的时候，几位老爷子表演的节目是真心好。所有的音乐都是现场演奏，而且有很多对瑞士传统文化的介绍，还有让观众上台体验，节目效果好，观众参与度高。我觉得这算是真正的文化输出了。</p>\n<p>我们国家啥时候能有这样的餐厅呢emmmm</p>\n<p>还有一个吐槽，就是我在点晚餐的时候，没有注意到菜单的内容。因为菜单是德语法语写的，看起来很费劲。所以我就点了一个套餐A，加一大杯啤酒。</p>\n<p>第一道菜是芝士火锅。我吃完就感觉很饱了，想着应该就会上餐后甜品了吧。</p>\n<p><img src=\"https://qiniu.plusplus7.com/first_course.jpg-20percert\"></p>\n<p>我把锅里的芝士都吃完时，锅底上糊了一层芝士的锅巴。服务员说这个也该吃掉。</p>\n<p><img src=\"https://qiniu.plusplus7.com/1.5course.jpg-20percert\"></p>\n<p>所以这个算是第1.5道菜吧。</p>\n<p>结果他端上第二道菜时，说了一句“Enjoy your appetizer salad”（请享受您的开胃沙拉）。我当时就“？？？”，什么叫开胃沙拉…难道正菜还没上吗。</p>\n<p><img src=\"https://qiniu.plusplus7.com/second_course.jpg-20percert\"></p>\n<p>答案是肯定的，我吃完沙拉，他就上了第三道菜-正菜，大份土豆泥+一根白香肠…我看得我都快哭了…我感觉很撑了已经..</p>\n<p><img src=\"https://qiniu.plusplus7.com/third_course.jpg-20percert\"></p>\n<p>最后还有第四道菜，甜品，是一个插着瑞士旗的奶油冰淇淋。</p>\n<p><img src=\"https://qiniu.plusplus7.com/forth_course.jpg-20percert\"></p>\n<p>吃完之后，我是彻底满足了。不仅吃得很撑，还在边吃边看演出，了解很多瑞士的传统文化，学到了很多。</p>\n<p>吃完之后，在卢塞恩湖附近转了转就回去啦，因为喝了一些啤酒，所以不敢呆太久，就开车回去了。</p>\n<p>开车回去之后，我才反映过来…我是不是酒驾了…喝了一大杯啤酒，而且芝士火锅里面也是加酒的XwX…</p>\n<p>查了一下瑞士的法律，还好他们其实是允许酒驾的，只要吹气酒精浓度不超过0.25mg/l或者血液酒精浓度不超过0.05%就好。我没喝太多，所以应该没事XwX没想到我第一次酒驾居然是在瑞士。回国之后要好好遵守规定，不能酒后驾驶咳咳。</p>\n<p><img src=\"https://qiniu.plusplus7.com/alcohol.png-60percent\"></p>\n<h2 id=\"Day-4-斯图加特\"><a href=\"#Day-4-斯图加特\" class=\"headerlink\" title=\"Day 4 斯图加特\"></a>Day 4 斯图加特</h2><p>今天开车从瑞士回到了德国，来到了德国斯图加特，去参观了梅赛德斯奔驰博物馆。</p>\n<p>虽然不是一个汽车迷吧，但是汽车的历史什么的还是可以了解一下，毕竟世界上第一辆汽车就是出自卡尔·本茨。</p>\n<p>学习到了很多汽车的历史，从世界上第一款只有1.1马力的发动机，到现在的超级跑车的演变史。这个博物馆一共有8层楼，可以让人逛一天。</p>\n<p>在一楼还有汽车体验中心，可以去亲身去坐一下百万豪车XwX。也就只是坐一下233，只能拍拍照，不能启动什么的。</p>\n<h2 id=\"Day-5-卢森堡\"><a href=\"#Day-5-卢森堡\" class=\"headerlink\" title=\"Day 5 卢森堡\"></a>Day 5 卢森堡</h2><p>今天早早地就从斯图加特赶往卢森堡。计划3个小时赶到，然而花了5个小时。。</p>\n<p>因为路上先是高速公路封路，因为要清理路上的落叶……然后我就绕道一条乡间小路，没想到路上遇到了别人发生车祸，应该是一个骑摩托车的和汽车相撞，感觉没什么大碍，救护车来了，警车也来了。不过路又不能走了…所以我在路上饶了一大圈才又重新回到高速公路。</p>\n<p>不过因此而跑到德国的小山村里面去看了。看到了他们的城镇大厅，伐木场，铁匠铺，学校，教堂。感觉这些建筑的风格，和以前玩得魔兽争霸里面的人族建筑一模一样233333</p>\n<p>然后到卢森堡之后，直接开车到了城中心，那边有一个巨大的停车场。然后走路就可以到各个景点，超级方便。</p>\n<p>然后就吃了网红Chocospoon。大概就是把巧克力方块，用木勺放进热牛奶里，然后看着巧克力慢慢融化，最后把他们喝掉xwx，就这样。大概要5.75欧元，50块人民币一杯。感觉不太划算，而且他们的服务员态度很冷淡xwx，差评。</p>\n<p><img src=\"https://qiniu.plusplus7.com/chocospoon.jpg-20percert\"></p>\n<p>本来还想试试法国菜的qwq，卢森堡有好几家米其林餐厅。但是这些餐厅超级傲娇，因为今天是星期天，所以大多数都不开业。唯一一家开业的Le Sud，今天客人招待的够多了，让我改天再去…</p>\n<p>我现在已经开车从卢森堡到比利时首都布鲁塞尔附近的一个小乡村里了，住在一家老夫妇家里。他们把阁楼装扮成了客房，来接待旅客。</p>\n<p>房子附近就全是农田，这些农田都是那种小麦田，黄黄的，然后卷成椭圆形放在田里的，特别像绝地求生里面，那个麦田的感觉233333</p>\n<h2 id=\"Day-6-布鲁塞尔\"><a href=\"#Day-6-布鲁塞尔\" class=\"headerlink\" title=\"Day 6 布鲁塞尔\"></a>Day 6 布鲁塞尔</h2><p>在老夫妇家饱餐了一顿正宗的法式早点之后，赶到了布鲁塞尔。</p>\n<p>老爷爷人挺不错的，听说我要去布鲁塞尔，还特地给我说了一个停车很方便的地方。因为语言不通xwx，我不会法语，他不会英语，所以沟通很费劲，但是老爷爷还是很耐心地给我解释清热。</p>\n<p>到了布鲁塞尔之后，感觉这是一个对自驾游客很友好的城市，停车不贵，而且很方便。</p>\n<p>去看了一下具有400年历史的撒尿小童雕像xwx，感觉真的没啥好看的，很小，而且旁边围了一圈游客。</p>\n<p>还去传说中的布鲁塞尔大广场看了看，这是被誉为“欧洲最美的广场”，始建于12世纪。广场上全是游客，还有吉普赛人xwx。</p>\n<p><img src=\"https://qiniu.plusplus7.com/bruxxel.png-20percert\"></p>\n<p>然后就开车去了阿姆斯特丹。</p>\n<h2 id=\"Day-7-阿姆斯特丹\"><a href=\"#Day-7-阿姆斯特丹\" class=\"headerlink\" title=\"Day 7 阿姆斯特丹\"></a>Day 7 阿姆斯特丹</h2><p>荷兰给人体验就不是很好了…一是感觉这个城市商业气息很重，卖给游客的东西都很贵，停车费是比利时，德国的4倍。二是整个城市都弥漫着一股大麻味…我有点受不了呃..还有就是在水坝广场，看到了“邪教”组织在传教qwq（对，就是那个宣扬真善忍的教x）照片就不发了，我怕被查水表…</p>\n<p>之后就去看了那个传说中的性博物馆xwx</p>\n<p>感觉那个也挺坑的，就是收集了各个地方，各个国家的性方面的历史资料</p>\n<p>比如中国的就有金瓶梅什么的，日本就是源氏物语什么的。</p>\n<p>然后还有很多恶趣味的模型什么的，而且地方也很小，感觉值不会票价x</p>\n<p>然后还去吃了荷兰的网红薯条，说实话我感觉这个和在别的地方吃到的，没啥区别。只是这个是在水坝广场卖的而已…</p>\n<p>所以总体来说荷兰给我感觉不太好…商业气息很重，游客很多。</p>\n<h2 id=\"Day-8-不来梅哈芬\"><a href=\"#Day-8-不来梅哈芬\" class=\"headerlink\" title=\"Day 8 不来梅哈芬\"></a>Day 8 不来梅哈芬</h2><p>来到了一个港口城市，不来梅哈芬。</p>\n<p>感觉没啥看的..港口都被封起来了，能看到的就是一片盐碱地…</p>\n<p>不过海边确实挺舒服的，太阳很温暖，海风很舒服</p>\n<p>之后就开车去Wacken啦，然后找了半天才找到停车场。</p>\n<p>去登记之后，得知露营的地方在另一边，于是又开车转了半天才找到露营地。此时已经是半夜1点了..而且因为人太多了，我又来的很晚，所以露营地到舞台大约要走半个小时…这就是我这几天微信运动上每天都走了将近3w步的原因…</p>\n<p>因为没有带帐篷，所以就在车上用睡袋裹着睡得。总体感觉还是挺安全的，到处都是警察。</p>\n<h2 id=\"Day-9-瓦肯音乐节\"><a href=\"#Day-9-瓦肯音乐节\" class=\"headerlink\" title=\"Day 9 瓦肯音乐节\"></a>Day 9 瓦肯音乐节</h2><p>我早上起来准备吃泡面，但是我打开了一桶之后才意识到..为了环保，德国的塑料是被严格控制的，比如一瓶可乐要多少0.25欧元的押金，之后当你把瓶子回收之后才会把瓶子钱退给你。所以可能也是这个原因，泡面里面也是没有塑料叉子的…于是我就没办法，只能泡好之后直接拿着泡面碗喝…</p>\n<p>然后就不小心被旁边的比利时老太太看见，把她吓坏了..她说：“我知道中国人都用筷子，在德国虽然没有筷子，但你也可以试试叉子呀…”</p>\n<p>之后就去Wacken的场地看了看。很宽，里面有卖吃的，卖CD的，卖衣服的，都是和金属乐有关，而且店面装修都很到位，很有音乐节的气氛。特别是废土区的装修，可以说是很硬核了</p>\n<p><img src=\"https://qiniu.plusplus7.com/wacken.jpg-20percert\"></p>\n<p>晚上在很前排的位置听了Judas Priest的演出。这个是金属乐历史上最伟大的乐队，没有之一，他们对重金属的发展做出了卓越的贡献。主唱更是被称为”上帝本人（Metal God）“。这位老爷子今年都66岁了，依旧陪我们嗨了一个半小时，而且全程劲爆，超级嗨。不过感觉确实他们都老了，这是成立于1971年的乐队，主唱虽然水平依旧，但是能感觉出他唱得很费力了，一直都是双手捧着话筒在唱，真怕老爷子唱着唱着突然倒下了。能赶在他们退休之前听一场，感觉也是很满足了。</p>\n<h2 id=\"Day-10-瓦肯音乐节\"><a href=\"#Day-10-瓦肯音乐节\" class=\"headerlink\" title=\"Day 10 瓦肯音乐节\"></a>Day 10 瓦肯音乐节</h2><p>今天去广场上的电竞区看了看，惊奇地发现里面摆了超级多电脑…可以随便进去van游戏xwx</p>\n<p>然后我就开心地玩了两把欧服的吃鸡和DotA2</p>\n<p>下午看了EPICA的演出，虽然这支乐队挺大牌的但是我还是不太喜欢他们的歌，总感觉缺点什么..不过他们的女主唱唱功很不错，就是歌不怎么好听</p>\n<p>为了在最前排看Nightwish的演出，我提前了将近5个小时赶到Faster主舞台，这时主舞台正在表演的是一个旋律死亡金属乐队。我大概占到了第三排的位置，我前一排的是一个哥特萝莉和一个看起来像刚刚放学的乖乖女，我问“你们都喜欢这种重口味的金属乐吗”。她们表示“不，我们是Nightwish的粉丝，我们是来占位置”[捂脸][捂脸]最后站了五个小时，终于如愿以偿听了一次Nightwish的现场，心满意足[耶]</p>\n<h2 id=\"Day-11-爱森纳赫\"><a href=\"#Day-11-爱森纳赫\" class=\"headerlink\" title=\"Day 11 爱森纳赫\"></a>Day 11 爱森纳赫</h2><p>今天做了一回文艺青年，离开了金属音乐节，去到了巴赫的出生地，一个充满童话气息的小山城，爱森纳赫。</p>\n<p>到了之后感觉确实是很漂亮呢，所有的建筑风格都想是童话里的那样，而且感觉音乐的气氛很浓厚。据说这里，在17世纪的时候，就是吟游诗人和音乐家们聚会演奏的场所。</p>\n<p>今天赶了一天路，早点休息啦～</p>\n<h2 id=\"Day-12-爱森纳赫\"><a href=\"#Day-12-爱森纳赫\" class=\"headerlink\" title=\"Day 12 爱森纳赫\"></a>Day 12 爱森纳赫</h2><p>今天去看了巴赫故居，其实就是一个博物馆啦～</p>\n<p>门票挺贵的qwq，10欧元（80人民币）。不过里面的内容很丰富，有很多巴赫的手稿原件，还有工作人员每个小时来用巴洛克时期的乐器来演奏巴赫的作品，感觉很不错呢！现场听了一次羽管键琴的演奏，非常有味道。</p>\n<p>下午看了一下附近的一个城堡，然后就匆匆地赶回法兰克福了。感觉城堡也没啥看的…内部不开放，外面也看不到啥有意思的东西。</p>\n<p>明天是上午7:45的飞机。我觉得去酒店休息一晚再去机场的话可能赶不到，因为太早了没有火车去机场，德国出租车也很难叫的感觉。所以我准备去机场先，然后在机场磨一晚上，第二天上飞机好好睡一觉好了，就当是倒时差。</p>\n<h2 id=\"Day-13-法兰克福-曼彻斯特-拉斯维加斯\"><a href=\"#Day-13-法兰克福-曼彻斯特-拉斯维加斯\" class=\"headerlink\" title=\"Day 13 法兰克福 - 曼彻斯特 - 拉斯维加斯\"></a>Day 13 法兰克福 - 曼彻斯特 - 拉斯维加斯</h2><p>早上7点45飞机到曼彻斯特</p>\n<p>然后9点55转机到拉斯维加斯</p>\n<p>从曼彻斯特到拉斯维加斯坐的是Thomas Cook航班..体验极差..空乘在不停的说话，很吵。然后饭超难吃。</p>\n<h2 id=\"Day-14-19-拉斯维加斯\"><a href=\"#Day-14-19-拉斯维加斯\" class=\"headerlink\" title=\"Day 14 - 19 拉斯维加斯\"></a>Day 14 - 19 拉斯维加斯</h2><p>我在这儿参加的一个Defcon信息安全会议。</p>\n<p>和这个会议一起开的，还有一个叫Queercon的会议。</p>\n<p>是面向信息安全行业里的各种少数派群体，比如LGBTQ+, Furry, Kinkster</p>\n<p>[表情]我都惊了，见到了好多兽装大佬</p>\n<p>还有各种穿皮♂衣的BDSM大佬</p>\n<p><img src=\"https://qiniu.plusplus7.com/queercon.png-20percert\"></p>\n<p>我超级想要他们的那个<a href=\"https://twitter.com/B00M_s1ang/status/1027730523936804864\" target=\"_blank\" rel=\"noopener\">Furry吊牌</a></p>\n<p>可以亮！</p>\n<p>而且摁鼻子还能叫</p>\n<p><img src=\"https://qiniu.plusplus7.com/furry.png-fullpercent\"></p>\n<p>嘤～去Defcon Furs社区看了看，就是一个小房间，然后里面有几个人。</p>\n<p>我突然就社恐发作，不敢和任何人说话..然后呆了5分钟就走了。</p>\n<p><img src=\"https://qiniu.plusplus7.com/furryguy.jpg-fullpercent\"></p>\n<h2 id=\"Day-20-27-西雅图\"><a href=\"#Day-20-27-西雅图\" class=\"headerlink\" title=\"Day 20 - 27 西雅图\"></a>Day 20 - 27 西雅图</h2><p>呃。。</p>\n<p>飞机在西雅图机场停留了好久才放我们下飞机。</p>\n<p>本来是提前了半个小时到达，结果硬生生拖到了延误一个半小时。</p>\n<p>去Bellevue老街吃到了好吃的New York Streak。</p>\n<p>看到了太平洋！</p>\n<p>去到了海边！</p>\n<p>本来想去雨林看看。导航搜“Rain Forest”，然后出来一个Rain Forest Inn。我就以为这里就是雨林所在地。但其实这个只是一个叫Rain Forest的旅馆，离真正的雨林离得超级远…</p>\n<p>所以就没去了。。</p>\n<p>去俄勒冈的波特兰市买东西，因为那边是没有消费税的州，所以买东西会便宜一些。</p>\n<p>之后还想去Tillamook Bay看看，因为那边是奇异人生中Arcadia Bay的原型。</p>\n<p>但是那边有点远，来回要3个小时，再加上时间有点晚，所以就不去了QAQ…</p>\n<p>下次一定要去!</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjhj92bip0000e0vf6f464elc","tag_id":"cjhj92bjw0004e0vfykbowtvw","_id":"cjhj92bkx000ce0vfcc2chz84"},{"post_id":"cjhj92bjo0002e0vfhdyek3q5","tag_id":"cjhj92bku000ae0vf9jl4q2sg","_id":"cjhj92bld000je0vfo3gn16fs"},{"post_id":"cjhj92bk80005e0vfwxuxanqi","tag_id":"cjhj92bjw0004e0vfykbowtvw","_id":"cjhj92blr000pe0vfef26hnt8"},{"post_id":"cjhj92blf000le0vfzfpapgcb","tag_id":"cjhj92bku000ae0vf9jl4q2sg","_id":"cjhj92blz000se0vftj17q233"},{"post_id":"cjhj92bkj0007e0vf68f234vj","tag_id":"cjhj92blm000ne0vfeastr08h","_id":"cjhj92bm6000xe0vfq6vq9300"},{"post_id":"cjhj92bkr0009e0vf43toks9h","tag_id":"cjhj92bm1000ue0vfosfftqqb","_id":"cjhj92bmr0013e0vfnh4jqx5j"},{"post_id":"cjhj92bm7000ye0vfmgpfae2c","tag_id":"cjhj92bjw0004e0vfykbowtvw","_id":"cjhj92bmw0016e0vfrdeh9s04"},{"post_id":"cjhj92bmk0011e0vfs3k4di3n","tag_id":"cjhj92bjw0004e0vfykbowtvw","_id":"cjhj92bna001ae0vf3nqjyh4h"},{"post_id":"cjhj92bky000de0vfchhp65rc","tag_id":"cjhj92bm1000ue0vfosfftqqb","_id":"cjhj92bne001de0vfgjqim5fo"},{"post_id":"cjhj92bl3000fe0vf9cldl9tv","tag_id":"cjhj92bmw0017e0vfr0bdrgi0","_id":"cjhj92bnm001he0vfgpj1i8fe"},{"post_id":"cjhj92bnm001ie0vf46tpe96c","tag_id":"cjhj92bmw0017e0vfr0bdrgi0","_id":"cjhj92bnu001ne0vfmw43i3js"},{"post_id":"cjhj92blb000ie0vf8rk1i3sz","tag_id":"cjhj92bnj001fe0vfusjajlcl","_id":"cjhj92bo3001qe0vfege8ok0k"},{"post_id":"cjhj92bnq001ke0vf424w4fsn","tag_id":"cjhj92bku000ae0vf9jl4q2sg","_id":"cjhj92bob001ue0vf3eg1e80i"},{"post_id":"cjhj92bnv001oe0vfkj70jw5m","tag_id":"cjhj92bjw0004e0vfykbowtvw","_id":"cjhj92bog001xe0vf66it6yys"},{"post_id":"cjhj92blp000oe0vfkqz6n9ua","tag_id":"cjhj92bnu001me0vf8a4ryeiq","_id":"cjhj92bok0020e0vf549dnnhp"},{"post_id":"cjhj92bo3001re0vfc00ttmcv","tag_id":"cjhj92bjw0004e0vfykbowtvw","_id":"cjhj92boo0024e0vfcn2f2r6z"},{"post_id":"cjhj92boc001ve0vfwi0ft6y0","tag_id":"cjhj92bjw0004e0vfykbowtvw","_id":"cjhj92bos0027e0vfx293e3s6"},{"post_id":"cjhj92blx000re0vf5ozaj9t1","tag_id":"cjhj92boa001te0vfd1hh9j7j","_id":"cjhj92boz002be0vfksf9m3jt"},{"post_id":"cjhj92bog001ye0vfrnzkew1f","tag_id":"cjhj92bjw0004e0vfykbowtvw","_id":"cjhj92bp1002de0vfo84ckbq1"},{"post_id":"cjhj92bm2000ve0vf6e8m56oq","tag_id":"cjhj92bok0021e0vf4n1hc1pl","_id":"cjhj92bp4002ge0vfj3jzihu8"},{"post_id":"cjhj92bms0014e0vfbae2i2pw","tag_id":"cjhj92bmw0017e0vfr0bdrgi0","_id":"cjhj92bp6002ie0vfo8g93tb4"},{"post_id":"cjhj92bmx0018e0vfpyb1ean1","tag_id":"cjhj92bmw0017e0vfr0bdrgi0","_id":"cjhj92bpb002le0vfoz0g1t96"},{"post_id":"cjhj92bna001be0vfl4vl5npx","tag_id":"cjhj92bp9002je0vfe446mnfe","_id":"cjhj92bpi002pe0vfl2tsej7i"},{"post_id":"cjhj92bni001ee0vfpkepp71j","tag_id":"cjhj92bpe002oe0vf81fam0sf","_id":"cjhj92bpk002re0vfsvsrfafq"},{"post_id":"cjhj92bok0022e0vfi4mi9vox","tag_id":"cjhj92bpj002qe0vfnpd4rdkm","_id":"cjhj92bpl002te0vflrff84xc"},{"post_id":"cjhj92bop0025e0vfvuyvwed0","tag_id":"cjhj92bp9002je0vfe446mnfe","_id":"cjhj92bpp002ve0vfyhyw6n4x"},{"post_id":"cjhj92bot0028e0vf5tdm8jq1","tag_id":"cjhj92bp9002je0vfe446mnfe","_id":"cjhj92bpq002we0vfzjqr56zf"},{"post_id":"cjpiib5n60000ibvf05nj1lks","tag_id":"cjpiici7s0001ibvftl0ni3w0","_id":"cjpiici7u0002ibvf208tlast"}],"Tag":[{"name":"Life","_id":"cjhj92bjw0004e0vfykbowtvw"},{"name":"Security","_id":"cjhj92bku000ae0vf9jl4q2sg"},{"name":"Music","_id":"cjhj92blm000ne0vfeastr08h"},{"name":"Codeforces","_id":"cjhj92bm1000ue0vfosfftqqb"},{"name":"Games","_id":"cjhj92bmw0017e0vfr0bdrgi0"},{"name":"Leetcode","_id":"cjhj92bnj001fe0vfusjajlcl"},{"name":"Game","_id":"cjhj92bnu001me0vf8a4ryeiq"},{"name":"Machine Learning","_id":"cjhj92boa001te0vfd1hh9j7j"},{"name":"Linux","_id":"cjhj92bok0021e0vf4n1hc1pl"},{"name":"Algorithm","_id":"cjhj92bp9002je0vfe446mnfe"},{"name":"Blog","_id":"cjhj92bpe002oe0vf81fam0sf"},{"name":"Math","_id":"cjhj92bpj002qe0vfnpd4rdkm"},{"name":"Live","_id":"cjpiici7s0001ibvftl0ni3w0"}]}}